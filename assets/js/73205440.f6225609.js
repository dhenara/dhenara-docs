"use strict";(self.webpackChunkdhenara_docs=self.webpackChunkdhenara_docs||[]).push([[5768],{8453:(e,n,o)=>{o.d(n,{R:()=>l,x:()=>a});var i=o(6540);const t={},s=i.createContext(t);function l(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(s.Provider,{value:n},e.children)}},8636:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"dhenara-agent/concepts/flow-control","title":"Loops and Conditions","description":"Overview","source":"@site/docs/dhenara-agent/concepts/flow-control.md","sourceDirName":"dhenara-agent/concepts","slug":"/dhenara-agent/concepts/flow-control","permalink":"/dhenara-agent/concepts/flow-control","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"dhenaraAgentSidebar","previous":{"title":"Templating System","permalink":"/dhenara-agent/concepts/templating-system"},"next":{"title":"Execution Context","permalink":"/dhenara-agent/concepts/execution-context"}}');var t=o(4848),s=o(8453);const l={},a="Loops and Conditions",r={},c=[{value:"Overview",id:"overview",level:2},{value:"Conditional Execution",id:"conditional-execution",level:2},{value:"Basic Conditional Syntax",id:"basic-conditional-syntax",level:3},{value:"Expression Syntax",id:"expression-syntax",level:3},{value:"Direct Expression",id:"direct-expression",level:4},{value:"Python Expression",id:"python-expression",level:4},{value:"Complex Boolean Logic",id:"complex-boolean-logic",level:4},{value:"Advanced Python Logic",id:"advanced-python-logic",level:4},{value:"Practical Example",id:"practical-example",level:3},{value:"Loop Execution (ForEach)",id:"loop-execution-foreach",level:2},{value:"Basic Loop Syntax",id:"basic-loop-syntax",level:3},{value:"Accessing Loop Variables",id:"accessing-loop-variables",level:3},{value:"Nested Loops",id:"nested-loops",level:3},{value:"Practical Example",id:"practical-example-1",level:3},{value:"Real-World Example",id:"real-world-example",level:2},{value:"Implementation in the Flow Coordinator",id:"implementation-in-the-flow-coordinator",level:2},{value:"Important Considerations",id:"important-considerations",level:2},{value:"Loop Limitations",id:"loop-limitations",level:3},{value:"Conditional Branching Complexity",id:"conditional-branching-complexity",level:3},{value:"Variable Scope",id:"variable-scope",level:3},{value:"Best Practices",id:"best-practices",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"loops-and-conditions",children:"Loops and Conditions"})}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"Dhenara Agent DSL (DAD) provides powerful flow control mechanisms that allow you to create dynamic, responsive agent\nworkflows. The two primary flow control structures are conditionals and loops, enabling branching logic and iterative\nprocessing within your flows."}),"\n",(0,t.jsx)(n.p,{children:"This document explains how to use these control structures effectively with practical examples."}),"\n",(0,t.jsx)(n.h2,{id:"conditional-execution",children:"Conditional Execution"}),"\n",(0,t.jsx)(n.p,{children:"Conditional execution allows your flow to take different paths based on the evaluation of expressions. This enables\ncreating flexible agents that can make decisions based on previous results, user input, or other data."}),"\n",(0,t.jsx)(n.h3,{id:"basic-conditional-syntax",children:"Basic Conditional Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.dsl import FlowDefinition\nfrom dhenara.ai.types import ObjectTemplate\n\n# Create a flow\nmy_flow = FlowDefinition()\n\n# Add some nodes\nmy_flow.node("analyzer", analyzer_node)\n\n# Add a conditional\nmy_flow.conditional(\n    id="decision_point",  # Unique identifier for this conditional\n    statement=ObjectTemplate(\n        expression="$expr{$hier{analyzer}.outcome.structured.success == True}"\n    ),\n    true_branch=success_flow,  # Flow to execute if the condition is true\n    false_branch=failure_flow  # Flow to execute if the condition is false\n)\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"statement"})," parameter takes an ",(0,t.jsx)(n.code,{children:"ObjectTemplate"})," with an expression that evaluates to a boolean value. If the\nexpression evaluates to ",(0,t.jsx)(n.code,{children:"True"}),", the ",(0,t.jsx)(n.code,{children:"true_branch"})," flow is executed; otherwise, the ",(0,t.jsx)(n.code,{children:"false_branch"})," flow is executed."]}),"\n",(0,t.jsx)(n.h3,{id:"expression-syntax",children:"Expression Syntax"}),"\n",(0,t.jsx)(n.p,{children:"Conditional expressions can use different syntaxes:"}),"\n",(0,t.jsx)(n.h4,{id:"direct-expression",children:"Direct Expression"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'statement=ObjectTemplate(\n    expression="$expr{child.word_count > 20}"\n)\n'})}),"\n",(0,t.jsx)(n.h4,{id:"python-expression",children:"Python Expression"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'statement=ObjectTemplate(\n    expression="$expr{py: len($hier{initial_repo_analysis}.outcome.results) >= 1}"\n)\n'})}),"\n",(0,t.jsx)(n.h4,{id:"complex-boolean-logic",children:"Complex Boolean Logic"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'statement=ObjectTemplate(\n    expression="$expr{(child.word_count > 20) && (child.word_count < 40)}"\n)\n'})}),"\n",(0,t.jsx)(n.h4,{id:"advanced-python-logic",children:"Advanced Python Logic"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'statement=ObjectTemplate(\n    expression="$expr{py: len($hier{initial_repo_analysis}.outcome.results) >= 1 and \\\n               all(child.word_count > 10 for result in $hier{initial_repo_analysis}.outcome.results \\\n               for child in result.analysis.children)}"\n)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"practical-example",children:"Practical Example"}),"\n",(0,t.jsx)(n.p,{children:"Here's a complete example of a conditional that checks if a file analysis has a certain word count and takes different\nactions based on the result:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'my_flow.conditional(\n    id="complexity_check",\n    statement=ObjectTemplate(\n        expression="$expr{$hier{file_analyzer}.outcome.structured.word_count > 1000}"\n    ),\n    true_branch=FlowDefinition().node(\n        "complex_processor",\n        AIModelNode(\n            settings=AIModelNodeSettings(\n                models=["claude-3-7-sonnet"],\n                system_instructions=["You are processing a complex document."],\n                prompt=Prompt.with_dad_text("Process this complex document: $hier{file_analyzer}.outcome.text"),\n            )\n        )\n    ),\n    false_branch=FlowDefinition().node(\n        "simple_processor",\n        AIModelNode(\n            settings=AIModelNodeSettings(\n                models=["claude-3-5-haiku"],\n                system_instructions=["You are processing a simple document."],\n                prompt=Prompt.with_dad_text("Process this simple document: $hier{file_analyzer}.outcome.text"),\n            )\n        )\n    )\n)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"loop-execution-foreach",children:"Loop Execution (ForEach)"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"for_each"}),' method allows you to iterate over a collection of items, executing a "body" flow for each item. This is\nparticularly useful for processing lists of files, API results, or other collections.']}),"\n",(0,t.jsx)(n.h3,{id:"basic-loop-syntax",children:"Basic Loop Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.dsl import FlowDefinition\nfrom dhenara.ai.types import ObjectTemplate\n\nmy_flow = FlowDefinition()\nmy_flow.node("data_collector", collector_node)\n\n# Define a loop\nmy_flow.for_each(\n    id="item_processor",               # Unique identifier for this loop\n    statement=ObjectTemplate(\n        expression="$expr{$hier{data_collector}.outcome.structured.items}"\n    ),\n    item_var="current_item",          # Variable name for the current item\n    index_var="item_index",           # Variable name for the current index\n    max_iterations=10,                # Maximum number of iterations\n    body=item_processing_flow         # Flow to execute for each item\n)\n'})}),"\n",(0,t.jsx)(n.p,{children:"For each iteration of the loop:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["The current item is assigned to the variable named by ",(0,t.jsx)(n.code,{children:"item_var"})]}),"\n",(0,t.jsxs)(n.li,{children:["The current index is assigned to the variable named by ",(0,t.jsx)(n.code,{children:"index_var"})]}),"\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.code,{children:"body"})," flow is executed with these variables available"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"accessing-loop-variables",children:"Accessing Loop Variables"}),"\n",(0,t.jsxs)(n.p,{children:["Within the body flow, you can access the loop variables using the ",(0,t.jsx)(n.code,{children:"$expr{}"})," syntax:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# In the body flow\nitem_processing_flow = FlowDefinition()\nitem_processing_flow.node(\n    "processor",\n    AIModelNode(\n        settings=AIModelNodeSettings(\n            prompt=Prompt.with_dad_text(\n                "Processing item $expr{item_index + 1}: $expr{current_item.name}"\n            )\n        )\n    )\n)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"nested-loops",children:"Nested Loops"}),"\n",(0,t.jsx)(n.p,{children:"You can nest loops for more complex processing patterns:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'outer_loop_flow = FlowDefinition()\n\n# Outer loop\nouter_loop_flow.for_each(\n    id="category_processor",\n    statement=ObjectTemplate(expression="$expr{$hier{categories}.outcome.structured.categories}"),\n    item_var="category",\n    index_var="category_index",\n    max_iterations=10,\n    body=FlowDefinition().for_each(\n        # Inner loop\n        id="item_processor",\n        statement=ObjectTemplate(expression="$expr{category.items}"),\n        item_var="item",\n        index_var="item_index",\n        max_iterations=20,\n        body=item_processing_flow\n    )\n)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"practical-example-1",children:"Practical Example"}),"\n",(0,t.jsx)(n.p,{children:"Here's a complete example of using a loop to process files from a folder analysis:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'my_flow = FlowDefinition()\n\n# Folder analysis node\nmy_flow.node(\n    "folder_analyzer",\n    FolderAnalyzerNode(\n        settings=FolderAnalyzerSettings(\n            base_directory="$var{run_root}/global_data",\n            operations=[\n                FolderAnalysisOperation(\n                    operation_type="analyze_folder",\n                    path="project/src",\n                    content_read_mode="structure",\n                )\n            ]\n        )\n    )\n)\n\n# Process each file using a loop\nmy_flow.for_each(\n    id="file_processor",\n    statement=ObjectTemplate(\n        expression="$expr{$hier{folder_analyzer}.outcome.results[0].analysis.children}"\n    ),\n    item_var="file",\n    index_var="file_index",\n    max_iterations=50,\n    body=FlowDefinition().node(\n        "file_processor",\n        AIModelNode(\n            settings=AIModelNodeSettings(\n                models=["claude-3-5-haiku"],\n                system_instructions=["You analyze code files."],\n                prompt=Prompt.with_dad_text(\n                    "Analyzing file $expr{file_index + 1}: $expr{file.path}\\n"\n                    "File type: $expr{file.extension}\\n"\n                    "Content: $expr{file.content}\\n"\n                    "Please provide a brief analysis of this file."\n                ),\n            )\n        )\n    )\n)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"real-world-example",children:"Real-World Example"}),"\n",(0,t.jsx)(n.p,{children:"Here's a more complex example showing nested loops and conditionals together, similar to what's used in actual DAD\nagents:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Analyze repository structure\nflow.node(\n    "repo_analysis",\n    FolderAnalyzerNode(\n        settings=FolderAnalyzerSettings(\n            base_directory=global_data_directory,\n            operations=[...]\n        )\n    )\n)\n\n# Process each analysis result\nflow.for_each(\n    id="analysis_processor",\n    statement=ObjectTemplate(expression="$expr{$hier{repo_analysis}.outcome.results}"),\n    item_var="analysis_result",\n    index_var="result_index",\n    max_iterations=10,\n    body=FlowDefinition()\n        # Process each file in this analysis result\n        .for_each(\n            id="file_processor",\n            statement=ObjectTemplate(expression="$expr{analysis_result.analysis.children}"),\n            item_var="file",\n            index_var="file_index",\n            max_iterations=100,\n            body=FlowDefinition()\n                # Apply different processing based on file size\n                .conditional(\n                    id="file_size_check",\n                    statement=ObjectTemplate(\n                        expression="$expr{file.word_count > 500}"\n                    ),\n                    true_branch=FlowDefinition().node(\n                        "large_file_processor",\n                        AIModelNode(settings=large_file_settings)\n                    ),\n                    false_branch=FlowDefinition().node(\n                        "small_file_processor",\n                        AIModelNode(settings=small_file_settings)\n                    )\n                )\n        )\n)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"implementation-in-the-flow-coordinator",children:"Implementation in the Flow Coordinator"}),"\n",(0,t.jsx)(n.p,{children:"The control flow structures are also useful in the main flow coordinator for high-level orchestration:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'coordinator_flow = FlowDefinition()\n\n# Run planning phase\ncoordinator_flow.subflow("planner", planner_flow)\n\n# Conditionally execute implementation based on planning success\ncoordinator_flow.conditional(\n    id="plan_executor",\n    statement=ObjectTemplate(\n        expression="$expr{py: $hier{planner.plan_generator}.outcome.structured is not None}"\n    ),\n    # If planning was successful, iterate through each task\n    true_branch=FlowDefinition().for_each(\n        id="implementation_loop",\n        statement=ObjectTemplate(\n            expression="$expr{py: $hier{planner.plan_generator}.outcome.structured.implementation_tasks}"\n        ),\n        item_var="task_spec",\n        index_var="task_index",\n        max_iterations=20,\n        body=implementation_flow\n    ),\n    # If planning failed, show an error message\n    false_branch=FlowDefinition().node(\n        "no_plan_generated",\n        CommandNode(\n            settings=CommandNodeSettings(\n                commands=["echo \'Planning was unsuccessful.\'"]\n            )\n        )\n    )\n)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"important-considerations",children:"Important Considerations"}),"\n",(0,t.jsx)(n.h3,{id:"loop-limitations",children:"Loop Limitations"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Always set a reasonable ",(0,t.jsx)(n.code,{children:"max_iterations"})," value to prevent infinite loops"]}),"\n",(0,t.jsx)(n.li,{children:"Be mindful of the performance impact when processing large collections"}),"\n",(0,t.jsx)(n.li,{children:"Consider the memory usage when dealing with large datasets in loops"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"conditional-branching-complexity",children:"Conditional Branching Complexity"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Avoid overly complex conditional expressions that are hard to understand"}),"\n",(0,t.jsx)(n.li,{children:"Consider breaking complex logic into separate variables for clarity"}),"\n",(0,t.jsx)(n.li,{children:"Remember that the entire branch flow is defined before execution, so both branches are defined regardless of which one\nexecutes"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"variable-scope",children:"Variable Scope"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Loop variables (",(0,t.jsx)(n.code,{children:"item_var"}),", ",(0,t.jsx)(n.code,{children:"index_var"}),") are only available within the body flow"]}),"\n",(0,t.jsxs)(n.li,{children:["Component variables defined with ",(0,t.jsx)(n.code,{children:"flow.vars({...})"})," are available to all nodes in the flow, including conditional\nbranches and loop bodies"]}),"\n",(0,t.jsxs)(n.li,{children:["Use hierarchical references (",(0,t.jsx)(n.code,{children:"$hier{}"}),") to access results from nodes in parent flows"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use Clear Identifiers"}),": Give meaningful names to loops and conditionals for better readability"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Set Reasonable Limits"}),": Always specify ",(0,t.jsx)(n.code,{children:"max_iterations"})," for loops"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Break Down Complex Logic"}),": Use multiple simple conditionals rather than a single complex one"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Component Variables"}),": Use component variables for shared configuration"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Consistent Patterns"}),": Follow consistent patterns for loop and conditional structures"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Error Handling"}),": Include conditional branches for handling errors"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Documentation"}),": Document the purpose of complex control structures"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"By effectively using flow control mechanisms, you can build sophisticated, adaptive agents that respond intelligently to\nvarious conditions and process complex data structures efficiently."})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);