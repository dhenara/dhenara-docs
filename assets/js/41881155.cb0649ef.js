"use strict";(self.webpackChunkdhenara_docs=self.webpackChunkdhenara_docs||[]).push([[958],{1050:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>a,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"dhenara-agent/concepts/run-system","title":"Run System","description":"Overview","source":"@site/docs/dhenara-agent/concepts/run-system.md","sourceDirName":"dhenara-agent/concepts","slug":"/dhenara-agent/concepts/run-system","permalink":"/dhenara-agent/concepts/run-system","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Run System"},"sidebar":"dhenaraAgentSidebar","previous":{"title":"Observability","permalink":"/dhenara-agent/concepts/observability"},"next":{"title":"Event System","permalink":"/dhenara-agent/concepts/event-system"}}');var i=t(4848),s=t(8453);const o={title:"Run System"},c="Run System",a={},u=[{value:"Overview",id:"overview",level:2},{value:"Core Run System Components",id:"core-run-system-components",level:2},{value:"RunContext",id:"runcontext",level:3},{value:"Run Directory Structure",id:"run-directory-structure",level:2},{value:"Run Lifecycle",id:"run-lifecycle",level:2},{value:"Re-runs and Continuations",id:"re-runs-and-continuations",level:2},{value:"Static Inputs",id:"static-inputs",level:2},{value:"Integration with Runners",id:"integration-with-runners",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Conclusion",id:"conclusion",level:2}];function l(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"run-system",children:"Run System"})}),"\n",(0,i.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(e.p,{children:"The Run System in Dhenara Agent DSL (DAD) is responsible for managing execution contexts, environment setup, and\nartifact handling. It provides a structured approach to executing DAD components while maintaining isolation,\nreproducibility, and observability."}),"\n",(0,i.jsx)(e.h2,{id:"core-run-system-components",children:"Core Run System Components"}),"\n",(0,i.jsx)(e.h3,{id:"runcontext",children:"RunContext"}),"\n",(0,i.jsxs)(e.p,{children:["The ",(0,i.jsx)(e.code,{children:"RunContext"})," is the central component of the run system. It manages the execution environment, including:"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Run directories and IDs"}),"\n",(0,i.jsx)(e.li,{children:"Input and output artifacts"}),"\n",(0,i.jsx)(e.li,{children:"Observability configuration"}),"\n",(0,i.jsx)(e.li,{children:"Resource management"}),"\n",(0,i.jsx)(e.li,{children:"Event handling"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'from dhenara.agent.run import RunContext\nfrom pathlib import Path\n\n# Create a run context\nrun_context = RunContext(\n    root_component_id="my_agent",  # ID of the root component being executed\n    project_root=Path("/path/to/project"),  # Project root directory\n    run_root=Path("/path/to/project/runs"),  # Where run artifacts are stored\n    observability_settings=my_observability_settings,  # Optional custom settings\n)\n\n# Setup the run (creates directories, initializes observability, etc.)\nrun_context.setup_run(run_id_prefix="test")\n'})}),"\n",(0,i.jsx)(e.h2,{id:"run-directory-structure",children:"Run Directory Structure"}),"\n",(0,i.jsx)(e.p,{children:"A typical run directory structure looks like this:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"project_root/\n\u251c\u2500 runs/\n\u2502  \u251c\u2500 run_20231015_123456/  # Individual run directory\n\u2502  \u2502  \u251c\u2500 .trace/           # Observability data\n\u2502  \u2502  \u2502  \u251c\u2500 trace.jsonl\n\u2502  \u2502  \u2502  \u251c\u2500 metrics.jsonl\n\u2502  \u2502  \u2502  \u251c\u2500 logs.jsonl\n\u2502  \u2502  \u2502  \u2514\u2500 dad_metadata.json\n\u2502  \u2502  \u251c\u2500 static_inputs/    # Input data\n\u2502  \u2502  \u251c\u2500 node1/            # Node-specific directories\n\u2502  \u2502  \u251c\u2500 node2/\n\u2502  \u2502  \u2514\u2500 ...\n\u2502  \u251c\u2500 outcome/             # Outcome repository\n\u2502  \u2502  \u2514\u2500 project_name/     # Git repository for outcomes\n"})}),"\n",(0,i.jsx)(e.h2,{id:"run-lifecycle",children:"Run Lifecycle"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Initialization"}),": Create a ",(0,i.jsx)(e.code,{children:"RunContext"})," with appropriate parameters"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Setup"}),": Call ",(0,i.jsx)(e.code,{children:"setup_run()"})," to create directories and initialize systems"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Execution"}),": Runner uses the context to execute components"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Artifact Management"}),": Results and intermediate data stored in run directory"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Completion"}),": Call ",(0,i.jsx)(e.code,{children:"complete_run()"})," to finalize and record completion status"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'try:\n    # Initialize and setup\n    run_context = RunContext(root_component_id="my_agent", project_root=Path("."))\n    run_context.setup_run()\n\n    # Execute\n    runner = AgentRunner(my_agent, run_context)\n    result = await runner.run()\n\n    # Complete successfully\n    run_context.complete_run(status="completed")\n\n    return result\nexcept Exception as e:\n    # Handle failure\n    run_context.complete_run(status="failed", error_msg=str(e))\n    raise\n'})}),"\n",(0,i.jsx)(e.h2,{id:"re-runs-and-continuations",children:"Re-runs and Continuations"}),"\n",(0,i.jsx)(e.p,{children:"DAD supports re-running previous executions or continuing from specific points:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'# Create a run context for a re-run\nrun_context = RunContext(\n    root_component_id="my_agent",\n    project_root=Path("."),\n    previous_run_id="run_20231015_123456",  # ID of the previous run\n    start_hierarchy_path="agent.flow1.node3"  # Continue from this node\n)\n\n# Setup the run with re-run parameters\nrun_context.setup_run()\n'})}),"\n",(0,i.jsx)(e.p,{children:"This enables debugging, experimentation, and incremental development of agent workflows."}),"\n",(0,i.jsx)(e.h2,{id:"static-inputs",children:"Static Inputs"}),"\n",(0,i.jsx)(e.p,{children:"DAD supports providing static inputs to nodes:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'# Register static input for a specific node\nrun_context.register_node_static_input(\n    "my_node_id",\n    MyNodeInput(param1="value1", param2="value2")\n)\n\n# Or load static inputs from JSON\nrun_context.read_static_inputs()  # Reads from static_inputs.json\n'})}),"\n",(0,i.jsx)(e.h2,{id:"integration-with-runners",children:"Integration with Runners"}),"\n",(0,i.jsx)(e.p,{children:"Runners are responsible for actually executing components using the run context:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"from dhenara.agent.runner import FlowRunner\n\n# Create a runner for a flow\nrunner = FlowRunner(my_flow, run_context)\n\n# Setup the runner\nrunner.setup_run()\n\n# Execute the flow\nresult = await runner.run()\n"})}),"\n",(0,i.jsx)(e.p,{children:"Different types of runners (FlowRunner, AgentRunner) handle the execution of different component types."}),"\n",(0,i.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Organized Run Directories"}),": Keep clean run directories by properly managing artifacts"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Error Handling"}),": Implement proper error handling and always call ",(0,i.jsx)(e.code,{children:"complete_run()"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Resource Cleanup"}),": Ensure resources are properly cleaned up after execution"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Run ID Prefixes"}),": Use meaningful run ID prefixes for easier identification"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Environment Configuration"}),": Configure runs appropriately for different environments (dev, staging, prod)"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(e.p,{children:"The Run System in DAD provides a robust infrastructure for managing the execution of agent components. By leveraging the\nrun system effectively, you can ensure isolation, reproducibility, and observability in your agent workflows."})]})}function d(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(l,{...n})}):l(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>c});var r=t(6540);const i={},s=r.createContext(i);function o(n){const e=r.useContext(s);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:o(n.components),r.createElement(s.Provider,{value:e},n.children)}}}]);