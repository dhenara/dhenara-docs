"use strict";(self.webpackChunkdhenara_docs=self.webpackChunkdhenara_docs||[]).push([[2981],{582:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"dhenara-agent/cli/overview","title":"CLI Overview","description":"Introduction","source":"@site/docs/dhenara-agent/cli/overview.md","sourceDirName":"dhenara-agent/cli","slug":"/dhenara-agent/cli/overview","permalink":"/dhenara-agent/cli/overview","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"CLI Overview"},"sidebar":"dhenaraAgentSidebar","previous":{"title":"Command Line Interface","permalink":"/dhenara-agent/cli/"},"next":{"title":"CLI Commands","permalink":"/dhenara-agent/cli/commands"}}');var r=t(4848),a=t(8453);const o={title:"CLI Overview"},s="CLI Overview",l={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Architecture",id:"architecture",level:2},{value:"Main Entry Point",id:"main-entry-point",level:3},{value:"Command Registration Pattern",id:"command-registration-pattern",level:3},{value:"Command Structure",id:"command-structure",level:2},{value:"Project Initialization",id:"project-initialization",level:3},{value:"Agent Management",id:"agent-management",level:3},{value:"Output Management",id:"output-management",level:3},{value:"Observability",id:"observability",level:3},{value:"Project Structure",id:"project-structure",level:2},{value:"Run Artifacts Structure",id:"run-artifacts-structure",level:2},{value:"Templates System",id:"templates-system",level:2},{value:"Node Input Events and Handlers",id:"node-input-events-and-handlers",level:2},{value:"Best Practices",id:"best-practices",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"cli-overview",children:"CLI Overview"})}),"\n",(0,r.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsx)(n.p,{children:"The Dhenara Agent DSL Command Line Interface (CLI) provides a robust and extensible system for interacting with DAD\nagents and projects. It offers an intuitive way to create, run, and manage agents through simple terminal commands."}),"\n",(0,r.jsx)(n.p,{children:"The CLI is designed with a focus on developer experience, offering rich features while maintaining simplicity and\ndiscoverability. It's an essential tool for developers working with Dhenara Agent DSL, streamlining common workflows and\nenabling efficient agent management."}),"\n",(0,r.jsx)(n.h2,{id:"architecture",children:"Architecture"}),"\n",(0,r.jsxs)(n.p,{children:["The DAD CLI is built using ",(0,r.jsx)(n.a,{href:"https://click.palletsprojects.com/",children:"Click"}),", a Python package for creating beautiful command\nline interfaces. The architecture follows a modular design pattern with several key components:"]}),"\n",(0,r.jsx)(n.h3,{id:"main-entry-point",children:"Main Entry Point"}),"\n",(0,r.jsx)(n.p,{children:"The CLI system is initialized through a main entry point that dynamically discovers and loads command modules:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@click.group()\ndef cli():\n    """Dhenara Agent DSL (DAD) CLI."""\n    pass\n\n# Dynamically import all command modules\ndef load_commands():\n    commands_path = Path(__file__).parent / "commands"\n    observability_commands_path = Path(__file__).parent.parent / "agent" / "observability" / "cli"\n\n    # Load regular commands\n    for _, name, _is_pkg in pkgutil.iter_modules([str(commands_path)]):\n        if not name.startswith("_"):  # Skip private modules\n            module = importlib.import_module(f"dhenara.cli.commands.{name}")\n            if hasattr(module, "register"):\n                module.register(cli)\n\n    # Load observability commands\n    for _, name, _is_pkg in pkgutil.iter_modules([str(observability_commands_path)]):\n        if not name.startswith("_"):  # Skip private modules\n            module = importlib.import_module(f"dhenara.agent.observability.cli.{name}")\n            if hasattr(module, "register"):\n                module.register(cli)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"command-registration-pattern",children:"Command Registration Pattern"}),"\n",(0,r.jsxs)(n.p,{children:["Each command module implements a ",(0,r.jsx)(n.code,{children:"register"})," function that adds its commands to the main CLI group:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def register(cli):\n    cli.add_command(my_command)\n\n@click.command("my-command")\n@click.argument("argument")\n@click.option("--option", help="Description of the option")\ndef my_command(argument, option):\n    """Command description that appears in the help text."""\n    # Command implementation\n'})}),"\n",(0,r.jsx)(n.p,{children:"This pattern allows for modular addition of new commands without modifying the core CLI code."}),"\n",(0,r.jsx)(n.h2,{id:"command-structure",children:"Command Structure"}),"\n",(0,r.jsx)(n.p,{children:"The DAD CLI organizes commands into logical groups based on functionality:"}),"\n",(0,r.jsx)(n.h3,{id:"project-initialization",children:"Project Initialization"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"startproject"}),": Creates a new DAD project with the necessary directory structure and configuration files"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"agent-management",children:"Agent Management"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"create agent"}),": Creates a new agent within an existing project"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"run agent"}),": Executes an agent in an isolated environment"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"run agent implementation"}),": Specialized command for running implementation flows"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"output-management",children:"Output Management"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"outputs list"}),": Lists all available run outputs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"outputs compare"}),": Compares outputs from different runs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"outputs checkout"}),": Checks out a specific run output"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"observability",children:"Observability"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Various commands for viewing and analyzing traces, logs, and metrics"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["For detailed information about available commands, their options, and usage examples, see the\n",(0,r.jsx)(n.a,{href:"/dhenara-agent/cli/commands",children:"Commands Reference"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,r.jsx)(n.p,{children:"The DAD CLI expects projects to follow a specific structure:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"project-name/\n\u251c\u2500 .dhenara/             # Dhenara configuration directory\n\u2502  \u251c\u2500 config.yaml        # Project configuration\n\u2502  \u2514\u2500 credentials/       # Credentials for AI models and services\n\u251c\u2500 src/                  # Source code directory\n\u2502  \u251c\u2500 agents/            # Agent definitions\n\u2502  \u2502  \u2514\u2500 my_agent/       # Individual agent directory\n\u2502  \u2502     \u251c\u2500 __init__.py  # Python package marker\n\u2502  \u2502     \u251c\u2500 agent.py     # Main agent definition\n\u2502  \u2502     \u251c\u2500 handler.py   # Event handler for the agent\n\u2502  \u2502     \u2514\u2500 flows/       # Flow definitions directory\n\u2502  \u2502        \u251c\u2500 __init__.py\n\u2502  \u2502        \u2514\u2500 implementation.py\n\u2502  \u251c\u2500 common/            # Shared code\n\u2502  \u2502  \u2514\u2500 live_prompts/   # Runtime prompt templates\n\u2502  \u2514\u2500 runners/           # Agent runners\n\u2502     \u251c\u2500 __init__.py     # Python package marker\n\u2502     \u251c\u2500 defs.py         # Common runner definitions\n\u2502     \u2514\u2500 my_agent.py     # Agent-specific runner\n\u251c\u2500 runs/                 # Generated artifacts directory (not tracked in git)\n\u2502  \u2514\u2500 global_data/       # Global data directory for context\n\u2502     \u2514\u2500 your_repo/      # Context repositories\n\u2514\u2500 README.md             # Project documentation\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This structure is automatically created by the ",(0,r.jsx)(n.code,{children:"startproject"})," command and expanded by the ",(0,r.jsx)(n.code,{children:"create agent"})," command. The\n",(0,r.jsx)(n.code,{children:"runs"})," directory contains artifacts from agent executions and is not tracked in git."]}),"\n",(0,r.jsx)(n.h2,{id:"run-artifacts-structure",children:"Run Artifacts Structure"}),"\n",(0,r.jsxs)(n.p,{children:["When you run an agent, DAD generates a structured directory of artifacts under the ",(0,r.jsx)(n.code,{children:"runs"})," directory:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"runs/run_20240515_233729_f3cd51/\n\u251c\u2500\u2500 .trace/                      # Observability data\n\u2502   \u251c\u2500\u2500 dad_metadata.json        # Run metadata\n\u2502   \u251c\u2500\u2500 logs.jsonl               # Execution logs\n\u2502   \u251c\u2500\u2500 metrics.jsonl            # Performance metrics\n\u2502   \u2514\u2500\u2500 trace.jsonl              # Execution trace\n\u251c\u2500\u2500 agent_root_id/               # Root component ID from runner\n\u2502   \u2514\u2500\u2500 flow_id/                 # Flow ID from agent definition\n\u2502       \u251c\u2500\u2500 node_id_1/           # First node in the flow\n\u2502       \u2502   \u251c\u2500\u2500 outcome.json     # Node outcome\n\u2502       \u2502   \u2514\u2500\u2500 result.json      # Complete execution result\n\u2502       \u2514\u2500\u2500 node_id_2/           # Second node in the flow\n\u2502           \u251c\u2500\u2500 outcome.json\n\u2502           \u251c\u2500\u2500 result.json\n\u2502           \u2514\u2500\u2500 state.json       # For AIModelNode, includes API call details\n\u2514\u2500\u2500 static_inputs/               # Static input files if any\n"})}),"\n",(0,r.jsx)(n.p,{children:"This structure enables powerful features like:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Run Resumption"}),": Using ",(0,r.jsx)(n.code,{children:"--previous-run-id"})," and ",(0,r.jsx)(n.code,{children:"--entry-point"})," to resume from any node"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Debugging"}),": Examining exactly what happened at each step"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Tracing"}),": Following the full execution path with input/output for each node"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"templates-system",children:"Templates System"}),"\n",(0,r.jsx)(n.p,{children:"The CLI utilizes a templates system for generating boilerplate code when creating projects and agents:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'template_dir = Path(__file__).parent.parent / "templates" / "agent"\nrunner_template_dir = Path(__file__).parent.parent / "templates" / "runner"\n\n# Copy and customize templates\nfor template_file in template_dir.glob("*"):\n    if template_file.is_file():\n        target_file = agent_dir / template_file.name\n        with open(template_file) as src, open(target_file, "w") as dst:\n            content = src.read()\n            # Replace placeholders\n            content = content.replace("{{agent_identifier}}", agent_identifier)\n            content = content.replace("{{agent_name}}", name)\n            dst.write(content)\n'})}),"\n",(0,r.jsx)(n.p,{children:"The templates include:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Agent Templates"}),": Basic agent structure with flow definitions and input handlers"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Runner Templates"}),": Runner configurations for executing agents"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"node-input-events-and-handlers",children:"Node Input Events and Handlers"}),"\n",(0,r.jsx)(n.p,{children:"The DAD CLI supports live user input through a handler system. This is demonstrated in the autocoder agent example where\nthe handler pattern is used to collect runtime inputs:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.dsl import FlowNodeTypeEnum, NodeInputRequiredEvent\nfrom dhenara.agent.utils.helpers.terminal import async_input, get_ai_model_node_input\n\nasync def node_input_event_handler(event: NodeInputRequiredEvent):\n    if event.node_type == FlowNodeTypeEnum.ai_model_call:\n        if event.node_id == "code_generator":\n            node_input = await get_ai_model_node_input(node_def_settings=event.node_def_settings)\n            task_description = await async_input("Enter your query: ")\n            node_input.prompt_variables = {"task_description": task_description}\n\n            event.input = node_input\n            event.handled = True\n'})}),"\n",(0,r.jsx)(n.p,{children:"This handler is registered in the runner to enable interactive terminal input:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"run_context.register_event_handlers(\n    handlers_map={\n        EventType.node_input_required: node_input_event_handler,\n        # Optional Notification events\n        EventType.node_execution_completed: print_node_completion,\n        EventType.component_execution_completed: print_component_completion,\n    }\n)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Consistent Command Structure"}),": Follow the established pattern of command registration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Descriptive Help Text"}),": Provide clear, concise help for all commands and options"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Isolated Async Execution"}),": Use the ",(0,r.jsx)(n.code,{children:"IsolatedExecution"})," context for running agents"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Error Handling"}),": Implement proper error handling and reporting"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"User Feedback"}),": Provide clear feedback about command progress and results"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Component Variables"}),": Use flow-level variables for better code organization"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Structured Task Specs"}),": Define structured task specifications for complex projects"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["To learn more about extending the CLI with custom commands, see the ",(0,r.jsx)(n.a,{href:"/dhenara-agent/cli/extending",children:"Extending the CLI"})," guide."]})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var i=t(6540);const r={},a=i.createContext(r);function o(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);