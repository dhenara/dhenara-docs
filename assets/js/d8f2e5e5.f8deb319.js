"use strict";(self.webpackChunkdhenara_docs=self.webpackChunkdhenara_docs||[]).push([[5651],{4147:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"dhenara-agent/architecture/component-model","title":"Component Model","description":"Overview","source":"@site/docs/dhenara-agent/architecture/component-model.md","sourceDirName":"dhenara-agent/architecture","slug":"/dhenara-agent/architecture/component-model","permalink":"/dhenara-agent/architecture/component-model","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Component Model"},"sidebar":"dhenaraAgentSidebar","previous":{"title":"Architecture Overview","permalink":"/dhenara-agent/architecture/overview"},"next":{"title":"Execution Model","permalink":"/dhenara-agent/architecture/execution-model"}}');var t=i(4848),s=i(8453);const l={title:"Component Model"},c="Component Model",r={},a=[{value:"Overview",id:"overview",level:2},{value:"Hierarchical Structure",id:"hierarchical-structure",level:2},{value:"Components at Each Level",id:"components-at-each-level",level:3},{value:"Definition and Execution Pattern",id:"definition-and-execution-pattern",level:2},{value:"Definition Classes",id:"definition-classes",level:3},{value:"Execution Classes",id:"execution-classes",level:3},{value:"Component Connections",id:"component-connections",level:2},{value:"Node Connections",id:"node-connections",level:3},{value:"Flow and Agent Connections",id:"flow-and-agent-connections",level:3},{value:"Component Reusability",id:"component-reusability",level:2},{value:"Benefits of the Component Model",id:"benefits-of-the-component-model",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"component-model",children:"Component Model"})}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"The Dhenara Agent DSL (DAD) employs a hierarchical component model that enables composition, reuse, and scalability.\nThis model organizes agent behavior into a clear, logical structure, making it easier to build and maintain complex AI\nagent systems."}),"\n",(0,t.jsx)(n.h2,{id:"hierarchical-structure",children:"Hierarchical Structure"}),"\n",(0,t.jsx)(n.p,{children:"The component hierarchy in DAD consists of three primary levels:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Agent\n \u251c\u2500\u2500 Flow 1\n \u2502    \u251c\u2500\u2500 Node A\n \u2502    \u251c\u2500\u2500 Node B\n \u2502    \u2514\u2500\u2500 Subflow\n \u2502         \u251c\u2500\u2500 Node C\n \u2502         \u2514\u2500\u2500 Node D\n \u251c\u2500\u2500 Flow 2\n \u2502    \u251c\u2500\u2500 Node E\n \u2502    \u2514\u2500\u2500 Node F\n \u2514\u2500\u2500 Subagent\n      \u2514\u2500\u2500 Flow 3\n           \u251c\u2500\u2500 Node G\n           \u2514\u2500\u2500 Node H\n"})}),"\n",(0,t.jsx)(n.h3,{id:"components-at-each-level",children:"Components at Each Level"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Nodes (Leaf components)"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Atomic units of execution that perform specific tasks"}),"\n",(0,t.jsx)(n.li,{children:"Represent individual operations like making LLM API calls, analyzing files, or manipulating the file system"}),"\n",(0,t.jsx)(n.li,{children:"Form the foundation of any agent workflow"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Flows (Intermediate components)"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Collections of nodes organized with execution logic"}),"\n",(0,t.jsx)(n.li,{children:"Support sequential execution, conditionals, and loops"}),"\n",(0,t.jsx)(n.li,{children:"Can contain other flows (subflows) for modularity"}),"\n",(0,t.jsx)(n.li,{children:"Represent logical processing pipelines"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Agents (Root components)"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Top-level components that can contain flows and other agents"}),"\n",(0,t.jsx)(n.li,{children:"Coordinate the overall behavior and interaction between components"}),"\n",(0,t.jsx)(n.li,{children:"Represent complete functional units or capabilities"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"definition-and-execution-pattern",children:"Definition and Execution Pattern"}),"\n",(0,t.jsx)(n.p,{children:"Each component follows a clear separation between definition (what it does) and execution (how it runs):"}),"\n",(0,t.jsx)(n.h3,{id:"definition-classes",children:"Definition Classes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"NodeDefinition"}),": Defines what a node does, its configuration, and input/output requirements"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"FlowDefinition"}),": Defines the structure of a flow, including its nodes and how they connect"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"AgentDefinition"}),": Defines the structure of an agent, including its flows and subagents"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"execution-classes",children:"Execution Classes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"ExecutableNode"}),": Handles the execution of a node"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Flow"}),": Handles the execution of a flow"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Agent"}),": Handles the execution of an agent"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This separation enables flexible composition and customization while maintaining consistent execution behaviors."}),"\n",(0,t.jsx)(n.h2,{id:"component-connections",children:"Component Connections"}),"\n",(0,t.jsx)(n.p,{children:"Components connect in different ways depending on their level in the hierarchy:"}),"\n",(0,t.jsx)(n.h3,{id:"node-connections",children:"Node Connections"}),"\n",(0,t.jsx)(n.p,{children:"Nodes within a flow can be connected in several ways:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Sequential connection (default)\nflow.sequence(["node1", "node2", "node3"])\n\n# Conditional connections\nflow.conditional(\n    "condition_check",\n    statement=ObjectTemplate(expression="$hier{node1}.outcome.structured.success == True"),\n    true_branch=true_branch_flow,\n    false_branch=false_branch_flow\n)\n\n# Loop connections\nflow.for_each(\n    "process_items",\n    statement=ObjectTemplate(expression="$hier{node1}.outcome.structured.items"),\n    body=item_processor_flow,\n    max_iterations=10\n)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"flow-and-agent-connections",children:"Flow and Agent Connections"}),"\n",(0,t.jsx)(n.p,{children:"Flows within an agent can be connected in similar ways:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Sequential flows\nagent.sequence(["flow1", "flow2", "flow3"])\n\n# Conditional flow execution\nagent.conditional(\n    "condition_check",\n    statement=ObjectTemplate(expression="$hier{flow1.node1}.outcome.structured.requires_processing"),\n    true_branch=processing_agent,\n    false_branch=skip_processing_agent\n)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"component-reusability",children:"Component Reusability"}),"\n",(0,t.jsx)(n.p,{children:"The component model is designed for reusability at every level:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Node Reusability"}),": The same node definition can be used in multiple flows"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Flow Reusability"}),": The same flow definition can be used in multiple agents"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Agent Reusability"}),": Agents can be composed into larger, more complex agent systems"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This reusability enables the creation of component libraries that can be shared across projects."}),"\n",(0,t.jsx)(n.h2,{id:"benefits-of-the-component-model",children:"Benefits of the Component Model"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Modularity"}),": Break complex behaviors into manageable pieces"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Reusability"}),": Build a library of components to use across projects"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Maintainability"}),": Isolate changes and updates to specific components"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Scalability"}),": Grow agent capabilities by adding new components"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Clarity"}),": Clear structure makes it easier to understand agent behavior"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"By leveraging this hierarchical component model, DAD enables the construction of complex, reusable agent systems with\nclear separation of concerns and predictable behavior."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>c});var o=i(6540);const t={},s=o.createContext(t);function l(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);