"use strict";(self.webpackChunkdhenara_docs=self.webpackChunkdhenara_docs||[]).push([[4993],{8342:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"dhenara-agent/concepts/templating-system","title":"Templating System","description":"Overview","source":"@site/docs/dhenara-agent/concepts/templating-system.md","sourceDirName":"dhenara-agent/concepts","slug":"/dhenara-agent/concepts/templating-system","permalink":"/dhenara-agent/concepts/templating-system","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Templating System"},"sidebar":"dhenaraAgentSidebar","previous":{"title":"Custom Components","permalink":"/dhenara-agent/concepts/components/custom-components"},"next":{"title":"Loops and Conditions","permalink":"/dhenara-agent/concepts/flow-control"}}');var t=i(4848),r=i(8453);const a={title:"Templating System"},o="Templating System",l={},c=[{value:"Overview",id:"overview",level:2},{value:"Core Concepts",id:"core-concepts",level:2},{value:"Template Syntax",id:"template-syntax",level:2},{value:"Variable Substitution",id:"variable-substitution",level:3},{value:"Expression Evaluation",id:"expression-evaluation",level:3},{value:"Hierarchical References",id:"hierarchical-references",level:3},{value:"Python Expressions",id:"python-expressions",level:3},{value:"Component Variables",id:"component-variables",level:2},{value:"Using Templates in Nodes",id:"using-templates-in-nodes",level:2},{value:"AIModelNode Templates",id:"aimodelnode-templates",level:3},{value:"FileOperationNode Templates",id:"fileoperationnode-templates",level:3},{value:"FolderAnalyzerNode Templates",id:"folderanalyzernode-templates",level:3},{value:"Advanced Templating Features",id:"advanced-templating-features",level:2},{value:"Conditional Templates",id:"conditional-templates",level:3},{value:"List Comprehensions",id:"list-comprehensions",level:3},{value:"JSON Processing",id:"json-processing",level:3},{value:"Variable Resolution",id:"variable-resolution",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Template Organization",id:"template-organization",level:3},{value:"Performance Considerations",id:"performance-considerations",level:3},{value:"Security Considerations",id:"security-considerations",level:3},{value:"Debugging Templates",id:"debugging-templates",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"templating-system",children:"Templating System"})}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"The Dhenara Agent DSL (DAD) templating system is a powerful feature that enables dynamic content generation, variable\nsubstitution, and complex expression evaluation within agent definitions. This document explains the capabilities of the\ntemplating system and best practices for effective usage."}),"\n",(0,t.jsx)(n.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,t.jsx)(n.p,{children:"The DAD templating system operates on several key concepts:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Variable Substitution"}),": Replace placeholders with variable values"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Expression Evaluation"}),": Evaluate expressions within templates"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Hierarchical References"}),": Access outputs from other nodes in the flow"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Component Variables"}),": Share configuration across all nodes in a flow"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Conditional Logic"}),": Include conditional sections based on expression results"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"template-syntax",children:"Template Syntax"}),"\n",(0,t.jsx)(n.p,{children:"The templating system uses a distinctive syntax for different operations:"}),"\n",(0,t.jsx)(n.h3,{id:"variable-substitution",children:"Variable Substitution"}),"\n",(0,t.jsxs)(n.p,{children:["Variable substitution uses the ",(0,t.jsx)(n.code,{children:"$var{name}"})," syntax to replace placeholders with values:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'"Generate code in $var{language} to implement $var{feature}"\n'})}),"\n",(0,t.jsxs)(n.p,{children:["When rendered, this replaces ",(0,t.jsx)(n.code,{children:"$var{language}"})," and ",(0,t.jsx)(n.code,{children:"$var{feature}"})," with their respective values."]}),"\n",(0,t.jsx)(n.p,{children:"In the single-shot-coder tutorial, we see this pattern used for task descriptions:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'prompt=Prompt.with_dad_text(\n    text=(\n        "## Task Description\\n"\n        "$var{task_description}"\n        "## Repository Context\\n"\n        # ... more content ...\n    ),\n)\n'})}),"\n",(0,t.jsx)(n.p,{children:"And then in the handler providing the value:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'task_description = await async_input("Enter your query: ")\nnode_input.prompt_variables = {"task_description": task_description}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"expression-evaluation",children:"Expression Evaluation"}),"\n",(0,t.jsxs)(n.p,{children:["Expression evaluation uses the ",(0,t.jsx)(n.code,{children:"$expr{expression}"})," syntax to compute values:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'"This will take $expr{processing_time * 2} minutes to complete"\n'})}),"\n",(0,t.jsx)(n.p,{children:"Expressions can include basic arithmetic, string operations, and more complex operations."}),"\n",(0,t.jsxs)(n.p,{children:["Expressions can also include dot notation for accessing object attributes or dictionary keys like\n",(0,t.jsx)(n.code,{children:"$expr{task_spec.task_id}"})," or ",(0,t.jsx)(n.code,{children:"$expr{task_spec.required_context[0].file_name}"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"In the tutorial, expressions are commonly used when accessing component variables or hierarchical references:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'operations_template=ObjectTemplate(\n    expression="$expr{task_spec.required_context}",\n)\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["Dot notation can only be used inside expressions (",(0,t.jsx)(n.code,{children:"$expr{}"}),"), not with simple variable substitution. Even when accessing\nan attribute or key within text (e.g., in a prompt), use ",(0,t.jsx)(n.code,{children:"$expr{}"})," instead of ",(0,t.jsx)(n.code,{children:"$var{}"}),". The ",(0,t.jsx)(n.code,{children:"$var{}"})," syntax should be\nreserved for simple variable substitution inside strings without any attribute or key access."]})}),"\n",(0,t.jsx)(n.h3,{id:"hierarchical-references",children:"Hierarchical References"}),"\n",(0,t.jsxs)(n.p,{children:["Hierarchical references use the ",(0,t.jsx)(n.code,{children:"$hier{node_path.property}"})," syntax to access results from other nodes:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'"Based on the analysis: $hier{analyzer_node.outcome.text}"\n'})}),"\n",(0,t.jsx)(n.p,{children:"This allows nodes to reference outputs from previously executed nodes."}),"\n",(0,t.jsx)(n.p,{children:"In the tutorial, hierarchical references are extensively used to pass data between nodes:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'prompt=Prompt.with_dad_text(\n    text=(\n        # ... other content ...\n        "## Repository Context\\n"\n        "$expr{$hier{dynamic_repo_analysis}.outcome.results}\\n\\n"\n        # ... more content ...\n    ),\n)\n'})}),"\n",(0,t.jsx)(n.p,{children:"And in the file operation node:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'operations_template=ObjectTemplate(\n    expression="$expr{ $hier{code_generator}.outcome.structured.file_operations }",\n),\n'})}),"\n",(0,t.jsx)(n.h3,{id:"python-expressions",children:"Python Expressions"}),"\n",(0,t.jsxs)(n.p,{children:["For more complex logic, Python expressions can be used with ",(0,t.jsx)(n.code,{children:"$expr{py: python_code}"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'"Files found: $expr{py: len($hier{repo_analysis}.outcome.structured.files)}"\n'})}),"\n",(0,t.jsx)(n.p,{children:"This enables the full power of Python within templates."}),"\n",(0,t.jsx)(n.h2,{id:"component-variables",children:"Component Variables"}),"\n",(0,t.jsx)(n.p,{children:"Component variables are a powerful feature of the DAD framework that allow you to define variables at the component\nlevel (like a flow) and access them from any node within that component. This promotes code reusability and cleaner\norganization."}),"\n",(0,t.jsx)(n.p,{children:"To define component variables for a flow:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'implementation_flow = FlowDefinition()\n\nimplementation_flow.vars(\n    {\n        "task_spec": task_spec,\n    }\n)\n'})}),"\n",(0,t.jsx)(n.p,{children:"These variables can then be accessed in any node using expressions:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'prompt=Prompt.with_dad_text(\n    text=(\n        "Task Specification\\n"\n        "Task ID: $expr{task_spec.task_id}\\n"\n        "Description: $expr{task_spec.description}\\n\\n"\n        # ... more content ...\n    ),\n)\n'})}),"\n",(0,t.jsx)(n.p,{children:"Component variables help centralize configuration and make flows more reusable across different contexts."}),"\n",(0,t.jsx)(n.h2,{id:"using-templates-in-nodes",children:"Using Templates in Nodes"}),"\n",(0,t.jsx)(n.h3,{id:"aimodelnode-templates",children:"AIModelNode Templates"}),"\n",(0,t.jsx)(n.p,{children:"Templates are commonly used in AI model node prompts:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'AIModelNode(\n    pre_events=[EventType.node_input_required],\n    settings=AIModelNodeSettings(\n        models=["claude-3-7-sonnet", "gpt-4.1"],\n        system_instructions=[\n            "You are a $var{role} specialized in $var{domain}.",\n        ],\n        prompt=Prompt.with_dad_text(\n            text=(\n                "## Task Description\\n"\n                "$var{task_description}\\n\\n"\n                "## Repository Context\\n"\n                "$expr{$hier{dynamic_repo_analysis}.outcome.results}\\n\\n"\n                "## Implementation Requirements\\n"\n                "1. Generate precise file operations that can be executed programmatically\\n"\n            ),\n            variables={\n                "task_description": "Generate a README file"\n            }\n        ),\n    ),\n)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"fileoperationnode-templates",children:"FileOperationNode Templates"}),"\n",(0,t.jsx)(n.p,{children:"Templates are used in file operation nodes to specify operations:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'FileOperationNode(\n    settings=FileOperationNodeSettings(\n        base_directory=global_data_directory,\n        operations_template=ObjectTemplate(\n            expression="$expr{ $hier{code_generator}.outcome.structured.file_operations }",\n        ),\n        stage=True,\n        commit=True,\n        commit_message="$var{run_id}: Auto generated.",\n    ),\n)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"folderanalyzernode-templates",children:"FolderAnalyzerNode Templates"}),"\n",(0,t.jsx)(n.p,{children:"Templates can be used in folder analyzer settings:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'FolderAnalyzerNode(\n    settings=FolderAnalyzerSettings(\n        base_directory="$var{run_root}/global_data",\n        operations_template=ObjectTemplate(\n            expression="$expr{task_spec.required_context}",\n        ),\n    ),\n)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"advanced-templating-features",children:"Advanced Templating Features"}),"\n",(0,t.jsx)(n.h3,{id:"conditional-templates",children:"Conditional Templates"}),"\n",(0,t.jsx)(n.p,{children:"Conditional logic can be implemented using Python expressions:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"\"$expr{py: 'High priority' if priority > 8 else 'Normal priority'}\"\n"})}),"\n",(0,t.jsx)(n.h3,{id:"list-comprehensions",children:"List Comprehensions"}),"\n",(0,t.jsx)(n.p,{children:"Lists can be manipulated using comprehensions:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"\"Files: $expr{py: ', '.join([f.name for f in $hier{analysis}.outcome.structured.files if f.size > 1000])}\"\n"})}),"\n",(0,t.jsx)(n.h3,{id:"json-processing",children:"JSON Processing"}),"\n",(0,t.jsx)(n.p,{children:"JSON data can be extracted and manipulated:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"\"$expr{py: json.loads($hier{api_call}.outcome.text)['results'][0]['title']}\"\n"})}),"\n",(0,t.jsx)(n.h2,{id:"variable-resolution",children:"Variable Resolution"}),"\n",(0,t.jsx)(n.p,{children:"When resolving variables, the templating system follows this order:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Variables explicitly provided in the template definition"}),"\n",(0,t.jsx)(n.li,{children:"Variables provided through input handlers"}),"\n",(0,t.jsx)(n.li,{children:"Component variables from the flow or agent"}),"\n",(0,t.jsx)(n.li,{children:"Variables from the execution context"}),"\n",(0,t.jsx)(n.li,{children:"Default values if specified"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Variable with a default value\n"$var{threshold:0.75}"\n\n# Variable with type conversion\n"$var{count:int}"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"template-organization",children:"Template Organization"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Maintain Readability"}),": Format complex templates for readability"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Modularize"}),": Break complex templates into smaller pieces"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Document Variables"}),": Document expected variables and their formats"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Error Handling"}),": Include fallbacks for missing variables"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Avoid Deep Nesting"}),": Deeply nested templates can be slower to render"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Lazy Evaluation"}),": Use ",(0,t.jsx)(n.code,{children:"ObjectTemplate"})," for values that should be evaluated only when needed"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Caching"}),": Consider caching results of expensive template evaluations"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Sanitize Inputs"}),": Be careful with user-provided inputs in templates"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Limit Python Expressions"}),": Consider limiting Python expression capabilities in production"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Execution Boundaries"}),": Respect execution boundaries for hierarchical references"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"debugging-templates",children:"Debugging Templates"}),"\n",(0,t.jsx)(n.p,{children:"The templating system supports debug mode for troubleshooting:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Enable debug mode\nresult = TemplateEngine.render_template(template, variables, debug_mode=True)\n"})}),"\n",(0,t.jsx)(n.p,{children:"In debug mode, the engine will print detailed information about variable substitution and expression evaluation."}),"\n",(0,t.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsx)(n.p,{children:"The DAD templating system provides a powerful mechanism for creating dynamic, context-aware agent definitions. By\nleveraging variable substitution, expression evaluation, hierarchical references, and component variables, templates\nenable sophisticated data flow between components while maintaining readability and reusability."})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var s=i(6540);const t={},r=s.createContext(t);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);