"use strict";(self.webpackChunkdhenara_docs=self.webpackChunkdhenara_docs||[]).push([[2122],{2147:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"dhenara-agent/guides/examples/single-shot-coder","title":"Single-Shot Coder","description":"The Single-Shot Coder is a simplified version of the Code Generation Agent designed for focused,","source":"@site/docs/dhenara-agent/guides/examples/single-shot-coder.md","sourceDirName":"dhenara-agent/guides/examples","slug":"/dhenara-agent/guides/examples/single-shot-coder","permalink":"/dhenara-agent/guides/examples/single-shot-coder","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"dhenaraAgentSidebar","previous":{"title":"Code Generation Agent","permalink":"/dhenara-agent/guides/examples/auto-coder"},"next":{"title":"Image Generation Agent","permalink":"/dhenara-agent/guides/examples/image-agent"}}');var o=t(4848),a=t(8453);const r={sidebar_position:4},s="Single-Shot Coder",l={},d=[{value:"Agent Overview",id:"agent-overview",level:2},{value:"Agent Structure",id:"agent-structure",level:2},{value:"Data Models",id:"data-models",level:2},{value:"Agent Definition",id:"agent-definition",level:2},{value:"Implementation Flow",id:"implementation-flow",level:2},{value:"Event Handler",id:"event-handler",level:2},{value:"Task Specification",id:"task-specification",level:2},{value:"Implementation Approaches",id:"implementation-approaches",level:2},{value:"1. Basic Implementation",id:"1-basic-implementation",level:3},{value:"2. Live Input Mode",id:"2-live-input-mode",level:3},{value:"3. Component Variables Mode",id:"3-component-variables-mode",level:3},{value:"Running the Agent",id:"running-the-agent",level:2},{value:"Advantages over Full Autocoder",id:"advantages-over-full-autocoder",level:2},{value:"Learn More",id:"learn-more",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"single-shot-coder",children:"Single-Shot Coder"})}),"\n",(0,o.jsxs)(n.p,{children:["The Single-Shot Coder is a simplified version of the ",(0,o.jsx)(n.a,{href:"/dhenara-agent/guides/examples/auto-coder",children:"Code Generation Agent"})," designed for focused,\none-time coding tasks. This agent bypasses the planning phase and goes directly to implementation, making it ideal for\nsmaller, well-defined tasks."]}),"\n",(0,o.jsx)(n.h2,{id:"agent-overview",children:"Agent Overview"}),"\n",(0,o.jsx)(n.p,{children:"Unlike the full Autocoder agent, which has analysis, planning, and implementation phases, the Single-Shot Coder focuses\nsolely on implementation. It takes a pre-defined task specification and executes the necessary file operations to\nimplement the code changes."}),"\n",(0,o.jsx)(n.p,{children:"This agent is useful when:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"You have a clear, well-defined task"}),"\n",(0,o.jsx)(n.li,{children:"The task doesn't require complex planning"}),"\n",(0,o.jsx)(n.li,{children:"You want a quicker implementation turnaround"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"agent-structure",children:"Agent Structure"}),"\n",(0,o.jsx)(n.p,{children:"The Single-Shot Coder has a simpler structure than the Autocoder:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-plaintext",children:"src/agents/singleshot_coder/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 agent.py        # Main agent definition\n\u251c\u2500\u2500 flows/          # Flow configurations\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 implementation.py # Implementation flow\n\u251c\u2500\u2500 types.py        # Data models\n\u2514\u2500\u2500 handler.py      # Event handlers\n"})}),"\n",(0,o.jsx)(n.p,{children:"It focuses on a three-node structure:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"FolderAnalyzerNode - For gathering context from files and folders"}),"\n",(0,o.jsx)(n.li,{children:"AIModelNode - For code generation based on the task and context"}),"\n",(0,o.jsx)(n.li,{children:"FileOperationNode - For executing file operations from the generated implementation"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"data-models",children:"Data Models"}),"\n",(0,o.jsx)(n.p,{children:"The agent uses Pydantic models for structured data handling:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.dsl.inbuilt.flow_nodes.defs.types import FileOperation\nfrom pydantic import BaseModel, Field\n\nclass TaskImplementation(BaseModel):\n    """\n    Contains the concrete file operations to implement a specific task of the plan.\n    This is the output generated after analyzing the context specified in the TaskSpec.\n    """\n\n    task_id: str | None = Field(\n        default=None,\n        description=("ID of the corresponding TaskSpec that this implements if it was given in the inputs"),\n    )\n    file_operations: list[FileOperation] | None = Field(\n        default_factory=list,\n        description="Ordered list of file operations to execute for this implementation task",\n    )\n    execution_commands: list[dict] | None = Field(\n        None,\n        description="Optional shell commands to run after file operations (e.g., for build or setup)",\n    )\n    verification_commands: list[dict] | None = Field(\n        None,\n        description="Optional commands to verify the changes work as expected",\n    )\n'})}),"\n",(0,o.jsx)(n.h2,{id:"agent-definition",children:"Agent Definition"}),"\n",(0,o.jsx)(n.p,{children:"The agent definition is straightforward, directly using the implementation flow:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.dsl import AgentDefinition\n\nfrom .flows.implementation import implementation_flow\n\nagent = AgentDefinition()\nagent.flow(\n    "main_flow",\n    implementation_flow,\n)\n'})}),"\n",(0,o.jsx)(n.h2,{id:"implementation-flow",children:"Implementation Flow"}),"\n",(0,o.jsx)(n.p,{children:"The implementation flow consists of three key nodes:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.dsl import (\n    AIModelNode,\n    AIModelNodeSettings,\n    EventType,\n    FileOperationNode,\n    FileOperationNodeSettings,\n    FlowDefinition,\n    FolderAnalyzerNode,\n    FolderAnalyzerSettings,\n)\nfrom dhenara.ai.types import AIModelCallConfig, ObjectTemplate, Prompt\n\nfrom src.agents.autocoder.types import TaskImplementation\n\n# Directory path for analysis\nglobal_data_directory = "$var{run_root}/global_data"\n\n# Create a FlowDefinition\nimplementation_flow = FlowDefinition()\n\n# Task specification as a component variable\nimplementation_flow.vars({\n    "task_spec": task_spec,  # Loaded from a file or defined programmatically\n})\n\n# 1. Folder Analysis Node\nimplementation_flow.node(\n    "dynamic_repo_analysis",\n    FolderAnalyzerNode(\n        settings=FolderAnalyzerSettings(\n            base_directory=global_data_directory,\n            operations_template=ObjectTemplate(expression="$expr{task_spec.required_context}"),\n        ),\n    ),\n)\n\n# 2. Code Generation Node\nimplementation_flow.node(\n    "code_generator",\n    AIModelNode(\n        pre_events=[EventType.node_input_required],\n        settings=AIModelNodeSettings(\n            models=["claude-3-7-sonnet", "gpt-4.1-preview", "gemini-2.0-flash"],\n            system_instructions=[\n                "You are a professional code implementation agent specialized in executing precise file operations.",\n                # Additional system instructions...\n            ],\n            prompt=Prompt.with_dad_text(\n                text=(\n                    "## Task Description\\n"\n                    "$expr{task_spec.description}\\n\\n"\n                    "## Repository Context\\n"\n                    "$expr{$hier{dynamic_repo_analysis}.outcome.results}\\n\\n"\n                    "## Implementation Requirements\\n"\n                    "1. Generate precise file operations that can be executed programmatically\\n"\n                    # Additional requirements...\n                ),\n            ),\n            model_call_config=AIModelCallConfig(\n                structured_output=TaskImplementation,\n                max_output_tokens=64000,\n                reasoning=True,\n            ),\n        ),\n    ),\n)\n\n# 3. File Operation Node\nimplementation_flow.node(\n    "code_generator_file_ops",\n    FileOperationNode(\n        settings=FileOperationNodeSettings(\n            base_directory=global_data_directory,\n            operations_template=ObjectTemplate(\n                expression="$expr{ $hier{code_generator}.outcome.structured.file_operations }",\n            ),\n            stage=True,\n            commit=True,\n            commit_message="$var{run_id}: Auto generated.",\n        ),\n    ),\n)\n'})}),"\n",(0,o.jsx)(n.h2,{id:"event-handler",children:"Event Handler"}),"\n",(0,o.jsx)(n.p,{children:"The event handler manages model selection and task inputs:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.dsl import FlowNodeTypeEnum, NodeInputRequiredEvent\nfrom dhenara.agent.utils.helpers.terminal import get_ai_model_node_input, get_folder_analyzer_node_input\n\nfrom .flows.implementation import global_data_directory\n\nasync def node_input_event_handler(event: NodeInputRequiredEvent):\n    node_input = None\n\n    if event.node_type == FlowNodeTypeEnum.ai_model_call:\n        if event.node_id == "code_generator":\n            node_input = await get_ai_model_node_input(\n                node_def_settings=event.node_def_settings,\n            )\n            # For live input mode, uncomment the following:\n            # task_description = await async_input("Enter your query: ")\n            # node_input.prompt_variables = {"task_description": task_description}\n\n        event.input = node_input\n        event.handled = True\n\n    elif event.node_type == FlowNodeTypeEnum.folder_analyzer:\n        if event.node_id == "dynamic_repo_analysis":\n            node_input = await get_folder_analyzer_node_input(\n                node_def_settings=event.node_def_settings,\n                base_directory=global_data_directory,\n            )\n\n        event.input = node_input\n        event.handled = True\n'})}),"\n",(0,o.jsx)(n.h2,{id:"task-specification",children:"Task Specification"}),"\n",(0,o.jsx)(n.p,{children:"The task specification can be defined in a JSON file with this structure:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "order": 1,\n  "task_id": "singleshot_task",\n  "description": "Update the README file with relevant content",\n  "required_context": [\n    {\n      "operation_type": "analyze_folder",\n      "path": "some_repo/docs",\n      "content_read_mode": "none"\n    },\n    {\n      "operation_type": "analyze_file",\n      "path": "some_repo/README.md",\n      "content_read_mode": "full"\n    }\n  ]\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"implementation-approaches",children:"Implementation Approaches"}),"\n",(0,o.jsx)(n.p,{children:"The Single-Shot Coder supports three main implementation approaches:"}),"\n",(0,o.jsx)(n.h3,{id:"1-basic-implementation",children:"1. Basic Implementation"}),"\n",(0,o.jsx)(n.p,{children:"The simplest approach with hardcoded task description and context files. Good for getting started and understanding the\nflow structure."}),"\n",(0,o.jsx)(n.h3,{id:"2-live-input-mode",children:"2. Live Input Mode"}),"\n",(0,o.jsx)(n.p,{children:"Enhances the basic implementation by accepting inputs at runtime:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Dynamic model selection through the terminal interface"}),"\n",(0,o.jsx)(n.li,{children:"Task description entered by the user during execution"}),"\n",(0,o.jsx)(n.li,{children:"Context files/folders specified at runtime"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"3-component-variables-mode",children:"3. Component Variables Mode"}),"\n",(0,o.jsx)(n.p,{children:"The most flexible approach that uses component variables and structured task specifications:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Task specifications loaded from JSON files"}),"\n",(0,o.jsx)(n.li,{children:"Component-level variables accessible to all nodes"}),"\n",(0,o.jsx)(n.li,{children:"Support for complex context analysis operations"}),"\n",(0,o.jsx)(n.li,{children:"Better organization and reusability"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"running-the-agent",children:"Running the Agent"}),"\n",(0,o.jsx)(n.p,{children:"To run the Single-Shot Coder:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.dsl.events import EventType\nfrom dhenara.agent.run import RunContext\nfrom dhenara.agent.runner import AgentRunner\n\nfrom src.agents.singleshot_coder.agent import agent\nfrom src.agents.singleshot_coder.handler import node_input_event_handler\nfrom src.runners.defs import project_root\n\nroot_component_id = "singleshot_coder_root"\nagent.root_id = root_component_id\n\nrun_context = RunContext(\n    root_component_id=root_component_id,\n    project_root=project_root,\n    run_root_subpath="agent_singleshot_coder",\n)\n\nrun_context.register_event_handlers(\n    handlers_map={\n        EventType.node_input_required: node_input_event_handler,\n        # Additional event handlers...\n    }\n)\n\nrunner = AgentRunner(agent, run_context)\n'})}),"\n",(0,o.jsx)(n.h2,{id:"advantages-over-full-autocoder",children:"Advantages over Full Autocoder"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Simplicity"}),": Fewer components and simpler flow"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Speed"}),": Faster execution by skipping the planning phase"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Precision"}),": Direct control over exactly which files are analyzed"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Predictability"}),": Pre-defined task specification ensures consistent behavior"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"learn-more",children:"Learn More"}),"\n",(0,o.jsxs)(n.p,{children:["For a step-by-step guide on building a Single-Shot Coder from scratch, see the\n",(0,o.jsx)(n.a,{href:"/dhenara-agent/guides/tutorials/single-shot-coder/",children:"Single-Shot Coding Assistant tutorial"}),", which walks through:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Setting up the project structure"}),"\n",(0,o.jsx)(n.li,{children:"Implementing each part of the flow"}),"\n",(0,o.jsx)(n.li,{children:"Handling events"}),"\n",(0,o.jsx)(n.li,{children:"Running the agent and understanding artifacts"}),"\n",(0,o.jsx)(n.li,{children:"Enhancing with live inputs"}),"\n",(0,o.jsx)(n.li,{children:"Using component variables"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,o.jsx)(n.p,{children:"The Single-Shot Coder demonstrates how DAD can be adapted for simpler use cases while still leveraging the power of the\nimplementation flow. It's a great example of how you can reuse components from more complex agents to create streamlined\nsolutions for specific tasks."}),"\n",(0,o.jsxs)(n.p,{children:["By understanding both the full ",(0,o.jsx)(n.a,{href:"/dhenara-agent/guides/examples/auto-coder",children:"Code Generation Agent"})," and this simplified version, you can choose the\nright approach for different coding tasks based on their complexity and requirements."]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var i=t(6540);const o={},a=i.createContext(o);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);