"use strict";(self.webpackChunkdhenara_docs=self.webpackChunkdhenara_docs||[]).push([[7874],{5723:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"dhenara-agent/guides/tutorials/single-shot-coder/part-3","title":"Part 3- Component Variables","description":"In Part 2, we implemented live inputs for our agent, allowing us to specify the task description and context files at","source":"@site/docs/dhenara-agent/guides/tutorials/single-shot-coder/part-3.md","sourceDirName":"dhenara-agent/guides/tutorials/single-shot-coder","slug":"/dhenara-agent/guides/tutorials/single-shot-coder/part-3","permalink":"/dhenara-agent/guides/tutorials/single-shot-coder/part-3","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Part 3- Component Variables"},"sidebar":"dhenaraAgentSidebar","previous":{"title":"Part 1- Live Inputs","permalink":"/dhenara-agent/guides/tutorials/single-shot-coder/part-2"},"next":{"title":"Example Agents","permalink":"/dhenara-agent/guides/examples/"}}');var s=t(4848),o=t(8453);const a={title:"Part 3- Component Variables"},r="Part 3: Component Variables",l={},d=[{value:"What are Component Variables?",id:"what-are-component-variables",level:2},{value:"Task Specification Structure",id:"task-specification-structure",level:2},{value:"Implementing Component Variables",id:"implementing-component-variables",level:2},{value:"Step 1: Update the Types",id:"step-1-update-the-types",level:3},{value:"Step 2: Update the Implementation Flow",id:"step-2-update-the-implementation-flow",level:3},{value:"Step 3: Update the Handler",id:"step-3-update-the-handler",level:3},{value:"Creating the JSON Task Specification",id:"creating-the-json-task-specification",level:2},{value:"Key Differences and Improvements",id:"key-differences-and-improvements",level:2},{value:"Running the Enhanced Agent",id:"running-the-enhanced-agent",level:2},{value:"Benefits of Component Variables",id:"benefits-of-component-variables",level:2},{value:"What&#39;s Next?",id:"whats-next",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"part-3-component-variables",children:"Part 3: Component Variables"})}),"\n",(0,s.jsx)(n.p,{children:"In Part 2, we implemented live inputs for our agent, allowing us to specify the task description and context files at\nruntime. While this is a significant improvement, entering multiple folder analysis operations one by one can be\ntedious, especially when dealing with complex projects that require analyzing numerous files for context."}),"\n",(0,s.jsxs)(n.p,{children:["In this part, we'll enhance our implementation by using ",(0,s.jsx)(n.strong,{children:"component variables"})," and structured task specifications\nloaded from files. This approach provides greater flexibility and reusability to our agent."]}),"\n",(0,s.jsx)(n.h2,{id:"what-are-component-variables",children:"What are Component Variables?"}),"\n",(0,s.jsx)(n.p,{children:"In the Dhenara Agent DSL (DAD), components are high-level constructs like Flows and Agents. Component variables are\nvariables defined at the component level that are accessible to all nodes within that component. This is a powerful\nfeature for several reasons:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Shared Configuration"}),": Multiple nodes can access the same data without duplicating it"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Flow Reusability"}),": The same flow can be used in different agents with different variable values"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Clean Separation"}),": You can separate complex configurations from your flow logic"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"For our implementation flow, we'll use component variables to store task specifications, making it easier to handle\ncomplex tasks and creating more maintainable code."}),"\n",(0,s.jsx)(n.h2,{id:"task-specification-structure",children:"Task Specification Structure"}),"\n",(0,s.jsxs)(n.p,{children:["Before we implement component variables, let's understand the task specification structure we'll be using. We'll define\na ",(0,s.jsx)(n.code,{children:"TaskSpec"})," type that contains:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"An order number for execution sequencing"}),"\n",(0,s.jsx)(n.li,{children:"A unique task ID"}),"\n",(0,s.jsx)(n.li,{children:"A detailed description of what the task should accomplish"}),"\n",(0,s.jsx)(n.li,{children:"A list of required context files/folders that the LLM needs to analyze to implement the task"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This structured approach allows us to define complex tasks in a JSON file, which we can load into our flow as a\ncomponent variable."}),"\n",(0,s.jsx)(n.h2,{id:"implementing-component-variables",children:"Implementing Component Variables"}),"\n",(0,s.jsx)(n.p,{children:"Let's enhance our implementation by adding component variables to our flow. We'll make the following changes:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Expand our types to include ",(0,s.jsx)(n.code,{children:"TaskSpec"})," and ",(0,s.jsx)(n.code,{children:"TaskSpecWithFolderAnalysisOps"})]}),"\n",(0,s.jsx)(n.li,{children:"Create a function to load the task specification from a JSON file"}),"\n",(0,s.jsx)(n.li,{children:"Add the task specification as a component variable to our flow"}),"\n",(0,s.jsx)(n.li,{children:"Update the FolderAnalyzerNode to use operations from the task specification"}),"\n",(0,s.jsx)(n.li,{children:"Update the AIModelNode to use the task description from the specification"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"step-1-update-the-types",children:"Step 1: Update the Types"}),"\n",(0,s.jsxs)(n.p,{children:["First, let's update our ",(0,s.jsx)(n.code,{children:"types.py"})," file to include the task specification types:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.dsl.inbuilt.flow_nodes.defs.types import (\n    FileOperation,\n    FileSystemAnalysisOperation,\n    FolderAnalysisOperation,\n)\nfrom pydantic import BaseModel, Field\n\n\nclass TaskSpec(BaseModel):\n    """\n    Specification for a logical development task with its required context.\n    Each task is a discrete unit of work in the overall plan.\n    Represents a logical task of implementation with its required context and description.\n    """\n\n    order: int = Field(\n        ...,\n        description="Execution order of this task in the overall plan",\n    )\n    task_id: str = Field(\n        ...,\n        description="Unique identifier for this task using only lowercase letters, numbers, and underscores [a-z0-9_]",\n        pattern="^[a-z0-9_]+$",\n    )\n    description: str = Field(\n        ...,\n        description=(\n            "Precise and detailed description of what this task accomplishes in markdown format. "\n            "This is send to an LLM as along with the context read with `required_context`, "\n            "so this should be detailed enough for the LLM to do the task"\n        ),\n    )\n    required_context: list[FileSystemAnalysisOperation] = Field(\n        default_factory=list,\n        description=(\n            "List of specific file-system analysis operations needed to provide context for implementing this task."\n        ),\n    )\n\n\nclass TaskSpecWithFolderAnalysisOps(TaskSpec):\n    """Task spec with FolderAnalysisOperation in required_context for more option in analysis"""\n\n    required_context: list[FolderAnalysisOperation] = Field(\n        default_factory=list,\n        description=(\n            "List of specific file-system analysis operations needed to provide context for implementing this task."\n        ),\n    )\n\n\nclass TaskImplementation(BaseModel):\n    """\n    Contains the concrete file operations to implement a specific task of the plan.\n    This is the output generated after analyzing the context specified in the TaskSpec.\n    """\n\n    task_id: str | None = Field(\n        default=None,\n        description=("ID of the corresponding TaskSpec that this implements if it was given in the inputs"),\n    )\n    file_operations: list[FileOperation] | None = Field(\n        default_factory=list,\n        description="Ordered list of file operations to execute for this implementation task",\n    )\n    execution_commands: list[dict] | None = Field(\n        None,\n        description="Optional shell commands to run after file operations (e.g., for build or setup)",\n    )\n    verification_commands: list[dict] | None = Field(\n        None,\n        description="Optional commands to verify the changes work as expected",\n    )\n'})}),"\n",(0,s.jsx)(n.h3,{id:"step-2-update-the-implementation-flow",children:"Step 2: Update the Implementation Flow"}),"\n",(0,s.jsx)(n.p,{children:"Next, let's update our implementation flow to use component variables:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# ruff: noqa: E501\nimport json\nfrom dhenara.agent.dsl import (\n    PLACEHOLDER,\n    AIModelNode,\n    AIModelNodeSettings,\n    EventType,\n    FileOperationNode,\n    FileOperationNodeSettings,\n    FlowDefinition,\n    FolderAnalyzerNode,\n    FolderAnalyzerSettings,\n)\nfrom dhenara.agent.dsl.inbuilt.flow_nodes.defs.types import FolderAnalysisOperation\n\nfrom dhenara.ai.types import (\n    AIModelCallConfig,\n    ObjectTemplate,\n    Prompt,\n)\n\nfrom src.agents.autocoder.types import TaskImplementation,TaskSpecWithFolderAnalysisOps\n\n\n# Parent of the repo where we analyse the folders\nglobal_data_directory = "$var{run_root}/global_data"\n\n\ndef read_description():\n    with open("src/common/live_prompts/autocoder/task_description.md") as file:\n        return file.read()\n\n\ndef read_task_spec_json():\n    with open("src/common/live_prompts/autocoder/task_spec.json") as file:\n        spec_dict = json.load(file)\n        spec = TaskSpecWithFolderAnalysisOps(**spec_dict)\n\n        # Update the placeholder description in `task_spec.json` with the `task_description.md` file content\n        _task_description = read_description()\n        spec.description = _task_description\n        return spec\n\n\ntask_spec = read_task_spec_json()\n\n# Create a FlowDefinition\nimplementation_flow = FlowDefinition()\n\nimplementation_flow.vars(\n    {\n        "task_spec": task_spec,\n    }\n)\n\n\n\n# 1. Dynamic Folder Analysis\nimplementation_flow.node(\n    "dynamic_repo_analysis",\n    FolderAnalyzerNode(\n        # pre_events=[EventType.node_input_required],\n        settings=FolderAnalyzerSettings(\n            base_directory=global_data_directory,\n            operations_template=ObjectTemplate(expression="$expr{task_spec.required_context}"),\n        ),\n    ),\n)\n\n\n# 2. Code Generation Node\nimplementation_flow.node(\n    "code_generator",\n    AIModelNode(\n        pre_events=[EventType.node_input_required],\n        settings=AIModelNodeSettings(\n            models=["claude-3-7-sonnet","o4-mini", "gemini-2.0-flash"],\n            system_instructions=[\n                # Role and Purpose\n                "You are a professional code implementation agent specialized in executing precise file operations.",\n                "Your task is to generate the exact file operations necessary to implement requested code changes - nothing more, nothing less.",\n                "Generate machine-executable operations that require zero human intervention.",\n                # Supported Operations\n                "ALLOWED OPERATIONS:",\n                "- create_file(file_path, content)",\n                "- delete_file(file_path)",\n                "- create_directory(directory_path)",\n                # Prohibited Operations\n                "PROHIBITED OPERATIONS (do not use):",\n                "- edit_file",\n                "- list_directory",\n                "- search_files",\n                "- get_file_metadata",\n                "- list_allowed_directories",\n                # Best Practices\n                "IMPLEMENTATION GUIDELINES:",\n                "1. For complete file replacement, use delete_file followed by create_file instead of a single edit_file.",\n                "2. Maintain the project\'s existing code style, indentation, and formatting conventions.",\n            ],\n            prompt=Prompt.with_dad_text(\n                text=(\n                    "Task Specification\\n"\n                    "Task ID: $expr{task_spec.task_id}\\n"\n                    "Description: $expr{task_spec.description}\\n\\n"\n                    "## Repository Context\\n"\n                    "$expr{$hier{dynamic_repo_analysis}.outcome.results}\\n\\n"\n                    "## Implementation Requirements\\n"\n                    "1. Generate precise file operations that can be executed programmatically\\n"\n                    "2. Strictly follow instructions\\n"\n                    "3. Consider the entire context when making implementation decisions\\n"\n                    "## Output Format\\n"\n                    "Return a TaskImplementation object\\n"\n                ),\n            ),\n            model_call_config=AIModelCallConfig(\n                structured_output=TaskImplementation,\n                test_mode=False,\n                max_output_tokens=64000,\n                max_reasoning_tokens=4000,\n                reasoning=True,\n                timeout=1800.0,  # 30 minutes\n            ),\n        ),\n    ),\n)\n\n# 3. File Operation Node\nimplementation_flow.node(\n    "code_generator_file_ops",\n    FileOperationNode(\n        settings=FileOperationNodeSettings(\n            base_directory=global_data_directory,\n            operations_template=ObjectTemplate(\n                expression="$expr{ $hier{code_generator}.outcome.structured.file_operations }",\n            ),\n            stage=True,\n            commit=True,\n            commit_message="$var{run_id}: Auto generated.",\n        ),\n    ),\n)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"step-3-update-the-handler",children:"Step 3: Update the Handler"}),"\n",(0,s.jsx)(n.p,{children:"Finally, let's update our handler to work with our new component variables approach:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.dsl import (\n    FlowNodeTypeEnum,\n    NodeInputRequiredEvent,\n)\nfrom dhenara.agent.utils.helpers.terminal import async_input, get_ai_model_node_input, get_folder_analyzer_node_input\n\nfrom .flows.implementation import global_data_directory\n\nasync def node_input_event_handler(event: NodeInputRequiredEvent):\n    node_input = None\n\n    if event.node_type == FlowNodeTypeEnum.ai_model_call:\n        if event.node_id == "code_generator": # NOTE: This is the node ID\n            node_input = await get_ai_model_node_input(\n                node_def_settings=event.node_def_settings,\n            )\n            #task_description= await async_input("Enter your query: ")\n            #node_input.prompt_variables = {"task_description": task_description}\n\n        event.input = node_input\n        event.handled = True\n\n    elif event.node_type == FlowNodeTypeEnum.folder_analyzer:\n        if event.node_id == "dynamic_repo_analysis":\n            node_input = await get_folder_analyzer_node_input(\n                node_def_settings=event.node_def_settings,\n                base_directory=global_data_directory,\n                predefined_exclusion_patterns=[],\n            )\n\n        event.input = node_input\n        event.handled = True\n'})}),"\n",(0,s.jsx)(n.h2,{id:"creating-the-json-task-specification",children:"Creating the JSON Task Specification"}),"\n",(0,s.jsx)(n.p,{children:"To make our component variables approach work, we need to create two files:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"A Markdown file for the task description"}),"\n",(0,s.jsx)(n.li,{children:"A JSON file for the task specification"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Let's create these files in the ",(0,s.jsx)(n.code,{children:"src/common/live_prompts/autocoder/"})," directory:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:"# task_description.md\n\nCreate a readme file\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'# task_spec.json\n{\n    "order": 1,\n    "task_id": "singleshot_task",\n    "description": "No description as it should be read from file",\n    "required_context": [\n        {\n            "operation_type": "analyze_folder",\n            "path": "dhenara_docs/docs",\n            "content_read_mode": "none",\n            "additional_gitignore_paths": null\n        },\n        {\n            "operation_type": "analyze_file",\n            "path": "dhenara_docs/sidebars.ts",\n            "content_read_mode": "full"\n        }\n    ]\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"key-differences-and-improvements",children:"Key Differences and Improvements"}),"\n",(0,s.jsx)(n.p,{children:"Let's understand the key improvements in this approach compared to the previous parts:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Component Variables"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["We added ",(0,s.jsx)(n.code,{children:'implementation_flow.vars({"task_spec": task_spec})'})," to define a component-level variable"]}),"\n",(0,s.jsxs)(n.li,{children:["All nodes in the flow can access this variable using ",(0,s.jsx)(n.code,{children:"$expr{task_spec...}"})," expressions"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Structured Task Definition"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["We defined a proper ",(0,s.jsx)(n.code,{children:"TaskSpec"})," data model with Pydantic"]}),"\n",(0,s.jsx)(n.li,{children:"The task specification can now be loaded from a JSON file"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Dynamic Context Analysis"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The FolderAnalyzerNode now uses\n",(0,s.jsx)(n.code,{children:'operations_template=ObjectTemplate(expression="$expr{task_spec.required_context}")'})," to dynamically get operations\nfrom our task specification"]}),"\n",(0,s.jsx)(n.li,{children:"We no longer need user input for each analysis operation"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Prompt Template"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The AIModelNode prompt now uses ",(0,s.jsx)(n.code,{children:"$expr{task_spec.task_id}"})," and ",(0,s.jsx)(n.code,{children:"$expr{task_spec.description}"})," to reference the task\ninformation"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Handler Simplification"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"We've commented out the code to manually get the task description through user input"}),"\n",(0,s.jsx)(n.li,{children:"The handler is now simpler because most configuration comes from the component variables"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"running-the-enhanced-agent",children:"Running the Enhanced Agent"}),"\n",(0,s.jsx)(n.p,{children:"To run our agent with component variables:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Make sure you've created the necessary directory structure:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"mkdir -p src/common/live_prompts/autocoder\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Create the task description and specification files:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'echo "Create a readme file" > src/common/live_prompts/autocoder/task_description.md\n'})}),"\n",(0,s.jsx)(n.p,{children:"And create the JSON file with the content shown above."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Run the agent:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"dhenara run agent autocoder\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"benefits-of-component-variables",children:"Benefits of Component Variables"}),"\n",(0,s.jsx)(n.p,{children:"Using component variables provides several benefits:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Reduced Code Duplication"}),": You define configuration once and reference it throughout the flow"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Cleaner Flow Definition"}),": Your flow focuses on the structure rather than detailed configurations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Easier Maintenance"}),": Changes to configuration are centralized"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Flow Reusability"}),": The same flow can be used with different variable values"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Better Organization"}),": Logical separation between flow structure and configuration"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"whats-next",children:"What's Next?"}),"\n",(0,s.jsx)(n.p,{children:"Now that we've built a fully functional single-shot coding assistant with component variables, you can explore more\nadvanced features:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Multiple Flows"}),": Create additional flows for different purposes, like planning or verification"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Flow Composition"}),": Compose flows together to create more complex agents"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Advanced Event Handling"}),": Implement more sophisticated event handlers"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Custom Nodes"}),": Create your own custom nodes to extend the functionality"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The complete code for this tutorial can be found in the\n",(0,s.jsx)(n.a,{href:"https://github.com/dhenara/dad_tutorials",children:"DAD Tutorials repository"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var i=t(6540);const s={},o=i.createContext(s);function a(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);