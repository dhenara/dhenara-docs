"use strict";(self.webpackChunkdhenara_docs=self.webpackChunkdhenara_docs||[]).push([[8078],{4646:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"dhenara-agent/introduction","title":"Introduction","description":"Overview","source":"@site/docs/dhenara-agent/introduction.md","sourceDirName":"dhenara-agent","slug":"/dhenara-agent/introduction","permalink":"/dhenara-agent/introduction","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Introduction"},"sidebar":"dhenaraAgentSidebar","next":{"title":"Installation","permalink":"/dhenara-agent/getting-started/installation"}}');var o=t(4848),s=t(8453);const r={title:"Introduction"},a="Introduction",l={},c=[{value:"Overview",id:"overview",level:2},{value:"What is Dhenara Agent DSL?",id:"what-is-dhenara-agent-dsl",level:2},{value:"Core Concepts",id:"core-concepts",level:2},{value:"Basic Elements",id:"basic-elements",level:3},{value:"Event-Driven Architecture",id:"event-driven-architecture",level:3},{value:"Powerful Template Engine",id:"powerful-template-engine",level:3},{value:"Execution Model",id:"execution-model",level:3},{value:"Resource Management",id:"resource-management",level:3},{value:"Basic Example",id:"basic-example",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"introduction",children:"Introduction"})}),"\n",(0,o.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsxs)(n.p,{children:["Dhenara Agent DSL (DAD) is an open-source framework built on top of the ",(0,o.jsx)(n.code,{children:"dhenara-ai"})," Python package. It provides a\npowerful, expressive, and type-safe domain-specific language (DSL) for defining and executing AI agent workflows. DAD\nmakes it easier to create, compose, and orchestrate AI agents with sophisticated behaviors, while maintaining robust\nobservability and reproducibility."]}),"\n",(0,o.jsx)(n.h2,{id:"what-is-dhenara-agent-dsl",children:"What is Dhenara Agent DSL?"}),"\n",(0,o.jsxs)(n.p,{children:["Dhenara Agent DSL or DAD (available as a Python package named ",(0,o.jsx)(n.code,{children:"dhenara-agent"}),") is an AI agent framework with a strong\nfocus on:"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Expressive Agent Definition"}),": Create complex agent workflows using a straightforward, programming language-like\napproach"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Component-Based Architecture"}),": Compose reusable components to build sophisticated agent systems"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Out-of-the-box Support for Multiple LLMs"}),": Switch between different LLM models on the fly"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Comprehensive Observability"}),": Built-in logging, tracing, and metrics collection for all agent activities using\nOpenTelemetry and open-source exporters like Zipkin and Jaeger"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Reproducible Execution"}),": Track and replay agent execution through a run context system, reducing costs by\nrerunning failed flows without additional AI Model API calls"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Extensible Node System"}),": Easily create custom node types to extend functionality"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Resource Management"}),": Flexible management of AI model resources and credentials"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,o.jsx)(n.h3,{id:"basic-elements",children:"Basic Elements"}),"\n",(0,o.jsx)(n.p,{children:"DAD uses a hierarchical component model that allows for composition and reuse. It is built around three primary types of\ncomponents:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Execution Nodes"}),": Atomic execution units that perform specific functions (e.g., making an LLM API call, analyzing a\nfolder, performing file operations like creating/updating files)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Execution Flows"}),": Collections of nodes or sub-flows with execution logic, supporting sequential execution,\nconditionals, and loops"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Agents"}),": Higher-level abstractions that can contain flows and other agents, representing complete functional units"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"event-driven-architecture",children:"Event-Driven Architecture"}),"\n",(0,o.jsx)(n.p,{children:"An event system enables loose coupling between components, allowing agents to react to events, request inputs, and\ncommunicate with each other without tight coupling."}),"\n",(0,o.jsx)(n.h3,{id:"powerful-template-engine",children:"Powerful Template Engine"}),"\n",(0,o.jsx)(n.p,{children:"A powerful template engine supports variable substitution, expressions, and hierarchical references, making it easy to\nbuild dynamic prompts and process responses."}),"\n",(0,o.jsx)(n.h3,{id:"execution-model",children:"Execution Model"}),"\n",(0,o.jsx)(n.p,{children:"The execution follows a hierarchical structure:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Components (Agents or Flows) define the overall structure"}),"\n",(0,o.jsx)(n.li,{children:"Nodes within components perform specific tasks"}),"\n",(0,o.jsx)(n.li,{children:"A RunContext manages the execution environment"}),"\n",(0,o.jsx)(n.li,{children:"Tracing, logging, and metrics provide visibility into execution"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"resource-management",children:"Resource Management"}),"\n",(0,o.jsx)(n.p,{children:"DAD provides a flexible system for managing AI model resources and API credentials, making it easier to work with\ndifferent LLM providers and models."}),"\n",(0,o.jsx)(n.h2,{id:"basic-example",children:"Basic Example"}),"\n",(0,o.jsx)(n.p,{children:"Here's a simple example of defining a flow using DAD:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.dsl import (\n    AIModelNode,\n    AIModelNodeSettings,\n    FlowDefinition,\n    ResourceConfigItem,\n)\nfrom dhenara.ai.types import Prompt\n\n# Define a flow\nmy_flow = FlowDefinition()\n\n# Add an AI model node to the flow\nmy_flow.node(\n    "question_answerer",\n    AIModelNode(\n        resources=ResourceConfigItem.with_model("claude-3-5-haiku"),\n        settings=AIModelNodeSettings(\n            system_instructions=["You are a helpful assistant."],\n            prompt=Prompt.with_dad_text("Answer the following question: $var{question}"),\n        ),\n    ),\n)\n'})}),"\n",(0,o.jsx)(n.p,{children:"This example defines a simple flow with a single AI model node that uses Claude 3.5 Haiku to answer a question."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(6540);const o={},s=i.createContext(o);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);