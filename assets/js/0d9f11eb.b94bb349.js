"use strict";(self.webpackChunkdhenara_docs=self.webpackChunkdhenara_docs||[]).push([[3205],{742:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"dhenara-agent/examples/single-shot-coder","title":"Single-Shot Coder","description":"The Single-Shot Coder is a simplified version of the Code Generation Agent designed for focused,","source":"@site/docs/dhenara-agent/examples/single-shot-coder.md","sourceDirName":"dhenara-agent/examples","slug":"/dhenara-agent/examples/single-shot-coder","permalink":"/dhenara-agent/examples/single-shot-coder","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"dhenaraAgentSidebar","previous":{"title":"Code Generation Agent","permalink":"/dhenara-agent/examples/auto-coder"},"next":{"title":"Image Generation Agent","permalink":"/dhenara-agent/examples/image-agent"}}');var o=t(4848),s=t(8453);const r={sidebar_position:4},a="Single-Shot Coder",d={},l=[{value:"Agent Overview",id:"agent-overview",level:2},{value:"Agent Structure",id:"agent-structure",level:2},{value:"Agent Definition",id:"agent-definition",level:2},{value:"Flow Configuration",id:"flow-configuration",level:2},{value:"Event Handler",id:"event-handler",level:2},{value:"Task Specification",id:"task-specification",level:2},{value:"Running the Agent",id:"running-the-agent",level:2},{value:"Use Cases",id:"use-cases",level:2},{value:"Advantages over Full Autocoder",id:"advantages-over-full-autocoder",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"single-shot-coder",children:"Single-Shot Coder"})}),"\n",(0,o.jsxs)(n.p,{children:["The Single-Shot Coder is a simplified version of the ",(0,o.jsx)(n.a,{href:"/dhenara-agent/examples/auto-coder",children:"Code Generation Agent"})," designed for focused,\none-time coding tasks. This agent bypasses the planning phase and goes directly to implementation, making it ideal for\nsmaller, well-defined tasks."]}),"\n",(0,o.jsx)(n.h2,{id:"agent-overview",children:"Agent Overview"}),"\n",(0,o.jsx)(n.p,{children:"Unlike the full Autocoder agent, which has analysis, planning, and implementation phases, the Single-Shot Coder focuses\nsolely on implementation. It takes a pre-defined task specification and executes the necessary file operations to\nimplement the code changes."}),"\n",(0,o.jsx)(n.p,{children:"This agent is useful when:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"You have a clear, well-defined task"}),"\n",(0,o.jsx)(n.li,{children:"The task doesn't require complex planning"}),"\n",(0,o.jsx)(n.li,{children:"You want a quicker implementation turnaround"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"agent-structure",children:"Agent Structure"}),"\n",(0,o.jsx)(n.p,{children:"The Single-Shot Coder has a simpler structure than the Autocoder:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-plaintext",children:"src/agents/singleshot_coder/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 agent.py        # Main agent definition\n\u251c\u2500\u2500 flow.py         # Flow configuration\n\u2514\u2500\u2500 handler.py      # Event handlers\n"})}),"\n",(0,o.jsx)(n.p,{children:"It reuses the implementation flow from the Autocoder agent but skips the planning phase."}),"\n",(0,o.jsx)(n.h2,{id:"agent-definition",children:"Agent Definition"}),"\n",(0,o.jsx)(n.p,{children:"The agent definition is straightforward, directly using the implementation flow:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.dsl import AgentDefinition\n\nfrom .flow import implementation_flow\n\nagent = AgentDefinition()\nagent.flow(\n    "quick_coder",\n    implementation_flow,\n)\n'})}),"\n",(0,o.jsx)(n.h2,{id:"flow-configuration",children:"Flow Configuration"}),"\n",(0,o.jsx)(n.p,{children:"Instead of generating a task specification dynamically through a planning phase, the Single-Shot Coder loads a\npredefined task specification from a file:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import json\n\nfrom src.agents.autocoder.types import TaskSpecWithFolderAnalysisOps\nfrom ..autocoder.flows.implementation import implementation_flow\n\n# Load task background information\ndef read_background():\n    with open("src/common/data/backgrounds/dad_docs_docusorus_1.md") as file:\n        return file.read()\n\n# Load task description\ndef read_description():\n    with open("src/common/live_prompts/singleshot_coder/task_description.md") as file:\n        return file.read()\n\n# Load and prepare task specification\ndef read_task_spec_json():\n    with open("src/common/live_prompts/singleshot_coder/task_spec.json") as file:\n        spec_dict = json.load(file)\n        spec = TaskSpecWithFolderAnalysisOps(**spec_dict)\n\n        # Update description with content from task_description.md\n        _task_description = read_description()\n        spec.description = _task_description\n        return spec\n\n# Load data\ntask_background = read_background()\ntask_spec = read_task_spec_json()\n\n# Configure implementation flow\nimplementation_flow.vars(\n    {\n        "task_background": task_background,\n        "task_spec": task_spec,\n    }\n)\n'})}),"\n",(0,o.jsx)(n.h2,{id:"event-handler",children:"Event Handler"}),"\n",(0,o.jsx)(n.p,{children:"The event handler is also simplified, focusing only on handling input events for the code generator node:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.dsl import FlowNodeTypeEnum, NodeInputRequiredEvent\nfrom dhenara.agent.utils.helpers.terminal import get_ai_model_node_input\n\nfrom ..autocoder.flows.defs import models\n\nasync def singleshot_autocoder_input_handler(event: NodeInputRequiredEvent):\n    if event.node_type == FlowNodeTypeEnum.ai_model_call:\n        node_input = None\n\n        if event.node_id == "code_generator":\n            node_input = await get_ai_model_node_input(\n                node_def_settings=event.node_def_settings,\n                models=models,\n            )\n        else:\n            print(f"WARNING: Unhandled ai_model_call input event for node {event.node_id}")\n\n        event.input = node_input\n        event.handled = True\n'})}),"\n",(0,o.jsx)(n.h2,{id:"task-specification",children:"Task Specification"}),"\n",(0,o.jsx)(n.p,{children:"The task specification is defined in a JSON file with this structure:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "order": 1,\n  "task_id": "singleshot_task",\n  "description": "This will be replaced with the content from task_description.md",\n  "required_context": [\n    {\n      "operation_type": "analyze_folder",\n      "path": "docs/dhenara-agent/examples",\n      "content_read_mode": "full"\n    },\n    {\n      "operation_type": "analyze_file",\n      "path": "docs/dhenara-agent/getting-started/quick-start.md"\n    }\n  ]\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"required_context"})," field specifies which files or folders should be analyzed to provide context for the\nimplementation. This approach gives you precise control over what information is provided to the AI model."]}),"\n",(0,o.jsx)(n.h2,{id:"running-the-agent",children:"Running the Agent"}),"\n",(0,o.jsx)(n.p,{children:"To run the Single-Shot Coder, use a runner script:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.dsl.events import EventType\nfrom dhenara.agent.run import RunContext\nfrom dhenara.agent.runner import AgentRunner\n\nfrom src.agents.singleshot_coder.agent import agent\nfrom src.agents.singleshot_coder.handler import singleshot_autocoder_input_handler\nfrom src.runners.defs import observability_settings, project_root\n\nroot_component_id = "singleshot_coder_root"\nagent.root_id = root_component_id\n\nrun_context = RunContext(\n    root_component_id=root_component_id,\n    observability_settings=observability_settings,\n    project_root=project_root,\n    run_root_subpath="agent_singleshot_coder",\n)\n\nrun_context.register_event_handlers(\n    handlers_map={\n        EventType.node_input_required: singleshot_autocoder_input_handler,\n        # Additional event handlers...\n    }\n)\n\nrunner = AgentRunner(agent, run_context)\n'})}),"\n",(0,o.jsx)(n.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,o.jsx)(n.p,{children:"The Single-Shot Coder is ideal for:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Isolated Feature Development"}),": When adding a single feature or component"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Bug Fixes"}),": Targeted fixes for specific issues"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Documentation Updates"}),": Creating or updating documentation files"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Configuration Changes"}),": Updating configuration files or settings"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Small Refactoring Tasks"}),": Focused refactoring of limited scope"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"advantages-over-full-autocoder",children:"Advantages over Full Autocoder"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Simplicity"}),": Fewer components and simpler flow"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Speed"}),": Faster execution by skipping the planning phase"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Precision"}),": Direct control over exactly which files are analyzed"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Predictability"}),": Pre-defined task specification ensures consistent behavior"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,o.jsx)(n.p,{children:"The Single-Shot Coder demonstrates how DAD can be adapted for simpler use cases while still leveraging the power of the\nimplementation flow. It's a great example of how you can reuse components from more complex agents to create streamlined\nsolutions for specific tasks."}),"\n",(0,o.jsxs)(n.p,{children:["By understanding both the full ",(0,o.jsx)(n.a,{href:"/dhenara-agent/examples/auto-coder",children:"Code Generation Agent"})," and this simplified version, you can choose the\nright approach for different coding tasks based on their complexity and requirements."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(6540);const o={},s=i.createContext(o);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);