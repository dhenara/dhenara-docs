"use strict";(self.webpackChunkdhenara_docs=self.webpackChunkdhenara_docs||[]).push([[141],{7046:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"features/test-mode-and-async","title":"Test Mode & Async Support","description":"Dhenara provides powerful capabilities to help you develop, test, and deploy AI applications more efficiently. Two key features that enhance developer productivity are the Test Mode functionality and the flexible Sync/Async client options.","source":"@site/docs/features/test-mode-and-async.md","sourceDirName":"features","slug":"/features/test-mode-and-async","permalink":"/features/test-mode-and-async","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Test Mode & Async Support"},"sidebar":"docsSidebar","previous":{"title":"Reasoning","permalink":"/features/reasoning"},"next":{"title":"Foundation Models","permalink":"/features/models"}}');var s=t(4848),o=t(8453);const r={title:"Test Mode & Async Support"},a="Test Mode and Synchronous/Asynchronous Client Flexibility",l={},c=[{value:"Test Mode",id:"test-mode",level:2},{value:"How Test Mode Works",id:"how-test-mode-works",level:3},{value:"Benefits of Test Mode",id:"benefits-of-test-mode",level:3},{value:"Test Response Format",id:"test-response-format",level:3},{value:"Synchronous and Asynchronous Client Options",id:"synchronous-and-asynchronous-client-options",level:2},{value:"Creating Sync vs Async Clients",id:"creating-sync-vs-async-clients",level:3},{value:"Using the Sync Client",id:"using-the-sync-client",level:3},{value:"Using the Async Client",id:"using-the-async-client",level:3},{value:"Connection Reuse",id:"connection-reuse",level:3},{value:"Advanced Error Handling and Retry Logic",id:"advanced-error-handling-and-retry-logic",level:2},{value:"Automatic Retries",id:"automatic-retries",level:3},{value:"Timeout Management",id:"timeout-management",level:3},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"test-mode-and-synchronousasynchronous-client-flexibility",children:"Test Mode and Synchronous/Asynchronous Client Flexibility"})}),"\n",(0,s.jsx)(n.p,{children:"Dhenara provides powerful capabilities to help you develop, test, and deploy AI applications more efficiently. Two key features that enhance developer productivity are the Test Mode functionality and the flexible Sync/Async client options."}),"\n",(0,s.jsx)(n.h2,{id:"test-mode",children:"Test Mode"}),"\n",(0,s.jsx)(n.p,{children:"Dhenara's test mode allows you to develop and test your application without making actual API calls to LLM providers, saving costs and enabling development in environments without API access."}),"\n",(0,s.jsx)(n.h3,{id:"how-test-mode-works",children:"How Test Mode Works"}),"\n",(0,s.jsxs)(n.p,{children:["Enable test mode by setting the ",(0,s.jsx)(n.code,{children:"test_mode"})," parameter to ",(0,s.jsx)(n.code,{children:"True"})," in your ",(0,s.jsx)(n.code,{children:"AIModelCallConfig"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from dhenara import AIModelClient, AIModelCallConfig\nfrom dhenara.ai.types.shared.platform import PlatformEnvTypeEnum\n\n# Create a client with test mode enabled\nclient = AIModelClient(\n    model_endpoint=my_model_endpoint,\n    config=AIModelCallConfig(test_mode=True),\n    is_async=False\n)\n\n# Use the client normally - no actual API calls will be made\nresponse = client.generate(\n    prompt={"role": "user", "content": "Tell me about machine learning"},\n    instructions=["You are a helpful AI assistant"]\n)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"benefits-of-test-mode",children:"Benefits of Test Mode"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Cost Savings"}),": Develop and test without incurring API usage costs"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Offline Development"}),": Work on applications without network connectivity"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Predictable Responses"}),": Get consistent responses for UI testing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Fast Development Cycles"}),": Skip waiting for actual API responses during development"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"test-response-format",children:"Test Response Format"}),"\n",(0,s.jsx)(n.p,{children:"Test mode returns structured responses that mimic the format of real API responses, including:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Properly structured content"}),"\n",(0,s.jsx)(n.li,{children:"Model and provider information"}),"\n",(0,s.jsx)(n.li,{children:"Simulated usage data (if usage tracking is enabled)"}),"\n",(0,s.jsx)(n.li,{children:"Simulated streaming behavior (if streaming is requested)"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"synchronous-and-asynchronous-client-options",children:"Synchronous and Asynchronous Client Options"}),"\n",(0,s.jsx)(n.p,{children:"Dhenara offers both synchronous and asynchronous client options, allowing you to choose the approach that best fits your application architecture."}),"\n",(0,s.jsx)(n.h3,{id:"creating-sync-vs-async-clients",children:"Creating Sync vs Async Clients"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Synchronous client\nsync_client = AIModelClient(\n    model_endpoint=my_model_endpoint,\n    config=my_config,\n    is_async=False  # Use synchronous mode\n)\n\n# Asynchronous client\nasync_client = AIModelClient(\n    model_endpoint=my_model_endpoint,\n    config=my_config,\n    is_async=True  # Use asynchronous mode (default)\n)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"using-the-sync-client",children:"Using the Sync Client"}),"\n",(0,s.jsx)(n.p,{children:"The synchronous client is best for applications where you need blocking behavior or are working in a synchronous context:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Using the sync client with a context manager\nwith sync_client as client:\n    response = client.generate(\n        prompt={"role": "user", "content": "What is machine learning?"}\n    )\n    print(response.chat_response.choices[0].contents[0].text)\n\n# Or without a context manager\nresponse = sync_client.generate(\n    prompt={"role": "user", "content": "What is machine learning?"}\n)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"using-the-async-client",children:"Using the Async Client"}),"\n",(0,s.jsx)(n.p,{children:"The asynchronous client is ideal for high-throughput applications or when working within an async context:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import asyncio\n\nasync def get_response():\n    # Using the async client with a context manager\n    async with async_client as client:\n        response = await client.generate_async(\n            prompt={"role": "user", "content": "What is machine learning?"}\n        )\n        return response.chat_response.choices[0].contents[0].text\n\n# Run the async function\nresponse_text = asyncio.run(get_response())\n'})}),"\n",(0,s.jsx)(n.h3,{id:"connection-reuse",children:"Connection Reuse"}),"\n",(0,s.jsx)(n.p,{children:"For efficiency in making multiple API calls, both client types support connection reuse:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Sync example with connection reuse\nclient = AIModelClient(model_endpoint=my_model_endpoint, is_async=False)\ntry:\n    response1 = client.generate_with_existing_connection(prompt=prompt1)\n    response2 = client.generate_with_existing_connection(prompt=prompt2)\n    response3 = client.generate_with_existing_connection(prompt=prompt3)\nfinally:\n    client.cleanup_sync()\n\n# Async example with connection reuse\nasync def process_multiple_prompts():\n    client = AIModelClient(model_endpoint=my_model_endpoint, is_async=True)\n    try:\n        response1 = await client.generate_with_existing_connection_async(prompt=prompt1)\n        response2 = await client.generate_with_existing_connection_async(prompt=prompt2)\n        response3 = await client.generate_with_existing_connection_async(prompt=prompt3)\n    finally:\n        await client.cleanup_async()\n"})}),"\n",(0,s.jsx)(n.h2,{id:"advanced-error-handling-and-retry-logic",children:"Advanced Error Handling and Retry Logic"}),"\n",(0,s.jsx)(n.p,{children:"Dhenara's client implementation includes sophisticated error handling and retry mechanisms that work identically in both sync and async modes:"}),"\n",(0,s.jsx)(n.h3,{id:"automatic-retries",children:"Automatic Retries"}),"\n",(0,s.jsx)(n.p,{children:"The client automatically handles transient errors with configurable retry behavior:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"client = AIModelClient(\n    model_endpoint=my_model_endpoint,\n    config=AIModelCallConfig(\n        retries=3,                # Number of retry attempts\n        retry_delay=1.0,          # Initial delay between retries in seconds\n        max_retry_delay=10.0,     # Maximum delay between retries\n    )\n)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"timeout-management",children:"Timeout Management"}),"\n",(0,s.jsx)(n.p,{children:"Set timeouts to prevent hanging operations:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"client = AIModelClient(\n    model_endpoint=my_model_endpoint,\n    config=AIModelCallConfig(\n        timeout=30.0,  # Timeout in seconds\n    )\n)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(n.p,{children:"Dhenara's test mode and flexible sync/async client options simplify the development workflow and make it easy to integrate AI capabilities into any application architecture. The test mode enables rapid development and testing without API costs, while the sync/async flexibility ensures you can build applications that scale optimally."}),"\n",(0,s.jsx)(n.p,{children:"Whether you're building a simple CLI tool, a web application, or a high-throughput API service, Dhenara's client interface adapts to your needs with consistent behavior and powerful built-in features."})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(6540);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);