"use strict";(self.webpackChunkdhenara_docs=self.webpackChunkdhenara_docs||[]).push([[5277],{6089:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"dhenara-agent/concepts/input-handling","title":"Input Handling","description":"Overview","source":"@site/docs/dhenara-agent/concepts/input-handling.md","sourceDirName":"dhenara-agent/concepts","slug":"/dhenara-agent/concepts/input-handling","permalink":"/dhenara-agent/concepts/input-handling","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Input Handling"},"sidebar":"dhenaraAgentSidebar","previous":{"title":"Event System","permalink":"/dhenara-agent/concepts/event-system"},"next":{"title":"Tutorials","permalink":"/dhenara-agent/guides/tutorials/"}}');var r=t(4848),o=t(8453);const s={title:"Input Handling"},a="Input Handling",d={},l=[{value:"Overview",id:"overview",level:2},{value:"Event-Driven Input Architecture",id:"event-driven-input-architecture",level:2},{value:"Core Components",id:"core-components",level:2},{value:"NodeInputRequiredEvent",id:"nodeinputrequiredevent",level:3},{value:"Node-Specific Input Classes",id:"node-specific-input-classes",level:3},{value:"Input Handling in the Single-Shot Coder Tutorial",id:"input-handling-in-the-single-shot-coder-tutorial",level:2},{value:"Built-in Input Helpers",id:"built-in-input-helpers",level:2},{value:"async_input",id:"async_input",level:3},{value:"get_ai_model_node_input",id:"get_ai_model_node_input",level:3},{value:"get_folder_analyzer_node_input",id:"get_folder_analyzer_node_input",level:3},{value:"Common Input Patterns",id:"common-input-patterns",level:2},{value:"Interactive Console Input",id:"interactive-console-input",level:3},{value:"Menu-Based Selection",id:"menu-based-selection",level:3},{value:"Combining with Template Variables",id:"combining-with-template-variables",level:3},{value:"Leveraging Component Variables",id:"leveraging-component-variables",level:3},{value:"Static Input Registration",id:"static-input-registration",level:3},{value:"Advanced Input Handling Techniques",id:"advanced-input-handling-techniques",level:2},{value:"Combined Handler",id:"combined-handler",level:3},{value:"Context-Aware Input",id:"context-aware-input",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"input-handling",children:"Input Handling"})}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"Input handling is a critical component of the Dhenara Agent DSL (DAD) framework, enabling interactive configuration and\ndynamic behavior of agents. This document describes the architecture of the input handling system, its components, and\npatterns for effective implementation."}),"\n",(0,r.jsx)(n.h2,{id:"event-driven-input-architecture",children:"Event-Driven Input Architecture"}),"\n",(0,r.jsx)(n.p,{children:"DAD uses an event-driven architecture for input handling, where nodes emit events when they require input, and\nregistered handlers respond with appropriate configurations:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Node declares that it requires input\nai_node = AIModelNode(\n    pre_events=[EventType.node_input_required],  # This event is emitted before execution\n    resources=ResourceConfigItem.with_models("claude-3-7-sonnet"),\n    settings=AIModelNodeSettings(...),\n)\n\n# Handler provides input when requested\nasync def input_handler(event: NodeInputRequiredEvent):\n    if event.node_id == "my_node" and event.node_type == FlowNodeTypeEnum.ai_model_call:\n        # Collect user input\n        user_query = await async_input("Enter your query: ")\n        event.input = AIModelNodeInput(prompt_variables={"query": user_query})\n        event.handled = True  # Mark the event as handled\n\n# Register the handler with the event bus\nrun_context.register_node_input_handler(input_handler)\n'})}),"\n",(0,r.jsx)(n.p,{children:"This architecture provides several benefits:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Separation of Concerns"}),": Node definitions remain clean and focused on behavior, while input handling is separate"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Dynamic Configuration"}),": Nodes can be dynamically configured at runtime"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Interactive Experience"}),": Enables rich interactive experiences with user input"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Reusable Components"}),": Input handlers can be reused across different agents"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"core-components",children:"Core Components"}),"\n",(0,r.jsx)(n.h3,{id:"nodeinputrequiredevent",children:"NodeInputRequiredEvent"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"NodeInputRequiredEvent"})," is the central class for input requests:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class NodeInputRequiredEvent(BaseEvent):\n    event_type: str = EventType.node_input_required\n    node_id: str  # ID of the node requesting input\n    node_type: str  # Type of the node (ai_model_call, folder_analyzer, etc.)\n    execution_context: ExecutionContext  # Context of the execution\n    input: NodeInput | None = None  # Input to be provided by handler\n    handled: bool = False  # Whether the event has been handled\n"})}),"\n",(0,r.jsxs)(n.p,{children:["When a node with ",(0,r.jsx)(n.code,{children:"pre_events=[EventType.node_input_required]"})," is about to execute, it emits this event. Handlers then\nfill in the ",(0,r.jsx)(n.code,{children:"input"})," field and mark it as ",(0,r.jsx)(n.code,{children:"handled"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"node-specific-input-classes",children:"Node-Specific Input Classes"}),"\n",(0,r.jsx)(n.p,{children:"Each node type has its own input class that defines the configuration structure:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class AIModelNodeInput(NodeInput):\n    prompt_variables: dict[str, Any] = Field(default_factory=dict)\n    instruction_variables: dict[str, Any] = Field(default_factory=dict)\n    resources_override: list[ResourceConfigItem] | None = None\n    settings_override: AIModelNodeSettings | None = None\n\nclass FolderAnalyzerNodeInput(NodeInput):\n    operations: list[FolderAnalysisOperation] | None = None\n    settings_override: FolderAnalyzerSettings | None = None\n"})}),"\n",(0,r.jsx)(n.p,{children:"These classes provide type safety and clear structure for node configuration."}),"\n",(0,r.jsx)(n.h2,{id:"input-handling-in-the-single-shot-coder-tutorial",children:"Input Handling in the Single-Shot Coder Tutorial"}),"\n",(0,r.jsx)(n.p,{children:"The single-shot coder tutorial demonstrates practical input handling patterns. In the tutorial, a basic event handler is\nimplemented:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'async def node_input_event_handler(event: NodeInputRequiredEvent):\n    node_input = None\n\n    if event.node_type == FlowNodeTypeEnum.ai_model_call:\n        if event.node_id == "code_generator":\n            # Get model input using the built-in helper\n            node_input = await get_ai_model_node_input(\n                node_def_settings=event.node_def_settings,\n            )\n            # Get user task description\n            task_description = await async_input("Enter your query: ")\n            # Pass it as a prompt variable\n            node_input.prompt_variables = {"task_description": task_description}\n\n        event.input = node_input\n        event.handled = True\n\n    elif event.node_type == FlowNodeTypeEnum.folder_analyzer:\n        if event.node_id == "dynamic_repo_analysis":\n            # Use built-in helper for folder analyzer input\n            node_input = await get_folder_analyzer_node_input(\n                node_def_settings=event.node_def_settings,\n                base_directory=global_data_directory,\n                predefined_exclusion_patterns=[],\n            )\n\n        event.input = node_input\n        event.handled = True\n'})}),"\n",(0,r.jsx)(n.p,{children:"This handler is registered in the run context:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"run_context.register_event_handlers(\n    handlers_map={\n        EventType.node_input_required: node_input_event_handler,\n        # Optional Notification events\n        EventType.node_execution_completed: print_node_completion,\n        EventType.component_execution_completed: print_component_completion,\n    }\n)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"built-in-input-helpers",children:"Built-in Input Helpers"}),"\n",(0,r.jsx)(n.p,{children:"DAD provides several helper functions that simplify collecting user input:"}),"\n",(0,r.jsx)(n.h3,{id:"async_input",children:"async_input"}),"\n",(0,r.jsx)(n.p,{children:"A simple utility for asynchronous console input:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"async def async_input(prompt: str) -> str:\n    # Use event loop to run input in a thread pool\n    loop = asyncio.get_event_loop()\n    return await loop.run_in_executor(None, lambda: input(prompt))\n"})}),"\n",(0,r.jsx)(n.h3,{id:"get_ai_model_node_input",children:"get_ai_model_node_input"}),"\n",(0,r.jsx)(n.p,{children:"Provides an interactive interface for configuring AI model nodes:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'async def get_ai_model_node_input(\n    node_def_settings: AIModelNodeSettings,\n    models: list[str] = None,\n) -> AIModelNodeInput:\n    # If models list is provided, show selection menu\n    # Otherwise use models from node definition\n    if models is None and node_def_settings is not None:\n        models = node_def_settings.models\n\n    if models and len(models) > 1:\n        print("\\n=== AI Model Selection ===")\n        model_idx = await get_menu_choice(models, "Select an AI model:")\n        print(f"Using model: {models[model_idx]}")\n\n        return AIModelNodeInput(\n            resources_override=[ResourceConfigItem.with_model(models[model_idx])]\n        )\n    return AIModelNodeInput()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"get_folder_analyzer_node_input",children:"get_folder_analyzer_node_input"}),"\n",(0,r.jsx)(n.p,{children:"Provides an interactive interface for configuring folder analyzer nodes:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'async def get_folder_analyzer_node_input(\n    node_def_settings: FolderAnalyzerSettings = None,\n    base_directory: str = None,\n    predefined_exclusion_patterns: list[list[str]] = None,\n) -> FolderAnalyzerNodeInput:\n    # Interactive menu to configure folder analysis operations\n    print("\\n=== Repository Analysis Configuration ===")\n\n    operations = []\n    while True:\n        operation = await get_operation_input(base_directory, predefined_exclusion_patterns)\n        operations.append(operation)\n        if not await get_yes_no_input("Add another analysis operation?", False):\n            break\n\n    print("\\nConfigured operations:")\n    for i, op in enumerate(operations, 1):\n        print(f"{i}. {op.operation_type} - {op.path}")\n\n    return FolderAnalyzerNodeInput(\n        settings_override=FolderAnalyzerSettings(\n            base_directory=base_directory,\n            operations=operations,\n        )\n    )\n'})}),"\n",(0,r.jsx)(n.h2,{id:"common-input-patterns",children:"Common Input Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"interactive-console-input",children:"Interactive Console Input"}),"\n",(0,r.jsx)(n.p,{children:"The simplest pattern is to collect input directly from the console:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'async def ai_model_node_input_handler(event: NodeInputRequiredEvent):\n    if event.node_type == FlowNodeTypeEnum.ai_model_call:\n        if event.node_id == "ai_model_call_1":\n            user_query = await async_input("Enter your query: ")\n            event.input = AIModelNodeInput(prompt_variables={"user_query": user_query})\n            event.handled = True\n'})}),"\n",(0,r.jsx)(n.h3,{id:"menu-based-selection",children:"Menu-Based Selection"}),"\n",(0,r.jsx)(n.p,{children:"For selecting from multiple options, a menu-based approach is effective:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'async def get_menu_choice(options: list[str], prompt: str = "Select an option:") -> int:\n    print(f"\\n{prompt}")\n    for i, option in enumerate(options):\n        print(f"  {i+1}. {option}")\n\n    while True:\n        try:\n            choice = await async_input("Enter number: ")\n            idx = int(choice) - 1\n            if 0 <= idx < len(options):\n                return idx\n            print(f"Please enter a number between 1 and {len(options)}")\n        except ValueError:\n            print("Please enter a valid number")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"combining-with-template-variables",children:"Combining with Template Variables"}),"\n",(0,r.jsx)(n.p,{children:"Input handlers can provide values for template variables:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'async def node_input_event_handler(event: NodeInputRequiredEvent):\n    if event.node_id == "code_generator":\n        node_input = await get_ai_model_node_input(event.node_def_settings)\n        task_description = await async_input("Enter your query: ")\n\n        # These variables will be substituted in templates using $var{task_description}\n        node_input.prompt_variables = {"task_description": task_description}\n\n        event.input = node_input\n        event.handled = True\n'})}),"\n",(0,r.jsx)(n.p,{children:"And in the node definition:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'prompt=Prompt.with_dad_text(\n    text=(\n        "## Task Description\\n"\n        "$var{task_description}\\n"\n        # ... more content ...\n    ),\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"leveraging-component-variables",children:"Leveraging Component Variables"}),"\n",(0,r.jsx)(n.p,{children:"In Part 3 of the tutorial, component variables are used to reduce the need for interactive inputs:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Load task specification from files\ndef read_task_spec_json():\n    with open("src/common/live_prompts/autocoder/task_spec.json") as file:\n        spec_dict = json.load(file)\n        spec = TaskSpecWithFolderAnalysisOps(**spec_dict)\n        return spec\n\ntask_spec = read_task_spec_json()\n\n# Add as component variable\nimplementation_flow.vars(\n    {\n        "task_spec": task_spec,\n    }\n)\n'})}),"\n",(0,r.jsx)(n.p,{children:"This makes the task specification available to all nodes in the flow without requiring user input."}),"\n",(0,r.jsx)(n.h3,{id:"static-input-registration",children:"Static Input Registration"}),"\n",(0,r.jsx)(n.p,{children:"For non-interactive scenarios, static inputs can be registered in advance:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Register static input for a specific node\nrun_context.register_node_static_input(\n    "code_generator",\n    AIModelNodeInput(prompt_variables={"task_description": "Implement feature X"})\n)\n\n# Or load from a JSON file\nrun_context.read_static_inputs()  # Reads from static_inputs.json\n'})}),"\n",(0,r.jsx)(n.p,{children:"This is useful for batch processing or testing."}),"\n",(0,r.jsx)(n.h2,{id:"advanced-input-handling-techniques",children:"Advanced Input Handling Techniques"}),"\n",(0,r.jsx)(n.h3,{id:"combined-handler",children:"Combined Handler"}),"\n",(0,r.jsx)(n.p,{children:"For agents with multiple nodes, a combined handler can manage all inputs:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"async def agent_input_handler(event: NodeInputRequiredEvent):\n    # Handle based on node type and ID\n    if event.node_type == FlowNodeTypeEnum.ai_model_call:\n        await handle_ai_model_input(event)\n    elif event.node_type == FlowNodeTypeEnum.folder_analyzer:\n        await handle_folder_analyzer_input(event)\n    elif event.node_type == FlowNodeTypeEnum.file_operation:\n        await handle_file_operation_input(event)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"context-aware-input",children:"Context-Aware Input"}),"\n",(0,r.jsx)(n.p,{children:"Handlers can use the execution context to make decisions:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'async def context_aware_handler(event: NodeInputRequiredEvent):\n    # Access results from previous nodes\n    if event.node_id == "second_node":\n        first_result = event.execution_context.get_result("first_node")\n        if first_result and first_result.outcome:\n            # Use previous results to inform this input\n            event.input = AIModelNodeInput(\n                prompt_variables={"previous_output": first_result.outcome.text}\n            )\n            event.handled = True\n'})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Type Safety"}),": Use appropriate input classes for each node type"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Clear Prompts"}),": Provide clear instructions for user input"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Validation"}),": Validate user input before creating node inputs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Error Handling"}),": Handle input errors gracefully with appropriate feedback"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Timeout Handling"}),": Implement timeouts for user input to prevent indefinite waiting"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Modular Design"}),": Organize input handlers in a modular way for reusability"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Leverage Built-in Helpers"}),": Use DAD's built-in input helper functions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Component Variables"}),": Use component variables to reduce repetitive inputs"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(n.p,{children:"The input handling architecture in DAD provides a flexible, powerful system for configuring and interacting with agent\nnodes. By leveraging the event-driven architecture, built-in helper functions, and component variables, you can create\nrich interactive experiences while maintaining clean separation between node definition and input collection."})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var i=t(6540);const r={},o=i.createContext(r);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);