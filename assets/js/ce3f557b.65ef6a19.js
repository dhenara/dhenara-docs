"use strict";(self.webpackChunkdhenara_docs=self.webpackChunkdhenara_docs||[]).push([[5277],{6089:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"dhenara-agent/concepts/input-handling","title":"Input Handling","description":"Overview","source":"@site/docs/dhenara-agent/concepts/input-handling.md","sourceDirName":"dhenara-agent/concepts","slug":"/dhenara-agent/concepts/input-handling","permalink":"/dhenara-agent/concepts/input-handling","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Input Handling"},"sidebar":"dhenaraAgentSidebar","previous":{"title":"Event System","permalink":"/dhenara-agent/concepts/event-system"},"next":{"title":"Tutorials","permalink":"/dhenara-agent/guides/tutorials/"}}');var r=t(4848),o=t(8453);const a={title:"Input Handling"},s="Input Handling",d={},l=[{value:"Overview",id:"overview",level:2},{value:"Event-Driven Input Architecture",id:"event-driven-input-architecture",level:2},{value:"Core Components",id:"core-components",level:2},{value:"NodeInputRequiredEvent",id:"nodeinputrequiredevent",level:3},{value:"Node-Specific Input Classes",id:"node-specific-input-classes",level:3},{value:"Common Input Patterns",id:"common-input-patterns",level:2},{value:"Interactive Console Input",id:"interactive-console-input",level:3},{value:"Menu-Based Selection",id:"menu-based-selection",level:3},{value:"Complex Object Collection",id:"complex-object-collection",level:3},{value:"Static Input Registration",id:"static-input-registration",level:3},{value:"Input Handling for Different Node Types",id:"input-handling-for-different-node-types",level:2},{value:"AIModelNode Input Handling",id:"aimodelnode-input-handling",level:3},{value:"FolderAnalyzerNode Input Handling",id:"folderanalyzernode-input-handling",level:3},{value:"Advanced Input Handling Techniques",id:"advanced-input-handling-techniques",level:2},{value:"Combined Handler",id:"combined-handler",level:3},{value:"Context-Aware Input",id:"context-aware-input",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"input-handling",children:"Input Handling"})}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"Input handling is a critical component of the Dhenara Agent DSL (DAD) framework, enabling interactive configuration and\ndynamic behavior of agents. This document describes the architecture of the input handling system, its components, and\npatterns for effective implementation."}),"\n",(0,r.jsx)(n.h2,{id:"event-driven-input-architecture",children:"Event-Driven Input Architecture"}),"\n",(0,r.jsx)(n.p,{children:"DAD uses an event-driven architecture for input handling, where nodes emit events when they require input, and\nregistered handlers respond with appropriate configurations:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Node declares that it requires input\nai_node = AIModelNode(\n    pre_events=[EventType.node_input_required],  # This event is emitted before execution\n    resources=ResourceConfigItem.with_models("claude-3-7-sonnet"),\n    settings=AIModelNodeSettings(...),\n)\n\n# Handler provides input when requested\nasync def input_handler(event: NodeInputRequiredEvent):\n    if event.node_id == "my_node" and event.node_type == FlowNodeTypeEnum.ai_model_call:\n        event.input = AIModelNodeInput(prompt_variables={"query": "user input"})\n        event.handled = True  # Mark the event as handled\n\n# Register the handler with the event bus\nrun_context.register_node_input_handler(input_handler)\n'})}),"\n",(0,r.jsx)(n.p,{children:"This architecture provides several benefits:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Separation of Concerns"}),": Node definitions remain clean and focused on behavior, while input handling is separate"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Dynamic Configuration"}),": Nodes can be dynamically configured at runtime"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Interactive Experience"}),": Enables rich interactive experiences with user input"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Reusable Components"}),": Input handlers can be reused across different agents"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"core-components",children:"Core Components"}),"\n",(0,r.jsx)(n.h3,{id:"nodeinputrequiredevent",children:"NodeInputRequiredEvent"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"NodeInputRequiredEvent"})," is the central class for input requests:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class NodeInputRequiredEvent(BaseEvent):\n    event_type: str = EventType.node_input_required\n    node_id: str  # ID of the node requesting input\n    node_type: str  # Type of the node (ai_model_call, folder_analyzer, etc.)\n    execution_context: ExecutionContext  # Context of the execution\n    input: NodeInput | None = None  # Input to be provided by handler\n    handled: bool = False  # Whether the event has been handled\n"})}),"\n",(0,r.jsxs)(n.p,{children:["When a node with ",(0,r.jsx)(n.code,{children:"pre_events=[EventType.node_input_required]"})," is about to execute, it emits this event. Handlers then\nfill in the ",(0,r.jsx)(n.code,{children:"input"})," field and mark it as ",(0,r.jsx)(n.code,{children:"handled"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"node-specific-input-classes",children:"Node-Specific Input Classes"}),"\n",(0,r.jsx)(n.p,{children:"Each node type has its own input class that defines the configuration structure:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class AIModelNodeInput(NodeInput):\n    prompt_variables: dict[str, Any] = Field(default_factory=dict)\n    instruction_variables: dict[str, Any] = Field(default_factory=dict)\n    resources_override: list[ResourceConfigItem] | None = None\n    settings_override: AIModelNodeSettings | None = None\n\nclass FolderAnalyzerNodeInput(NodeInput):\n    operations: list[FolderAnalysisOperation] | None = None\n    settings_override: FolderAnalyzerSettings | None = None\n"})}),"\n",(0,r.jsx)(n.p,{children:"These classes provide type safety and clear structure for node configuration."}),"\n",(0,r.jsx)(n.h2,{id:"common-input-patterns",children:"Common Input Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"interactive-console-input",children:"Interactive Console Input"}),"\n",(0,r.jsx)(n.p,{children:"One common pattern is to collect input from the console:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'async def async_input(prompt: str) -> str:\n    # Use event loop to run input in a thread pool\n    loop = asyncio.get_event_loop()\n    return await loop.run_in_executor(None, lambda: input(prompt))\n\nasync def ai_model_node_input_handler(event: NodeInputRequiredEvent):\n    if event.node_type == FlowNodeTypeEnum.ai_model_call:\n        if event.node_id == "ai_model_call_1":\n            user_query = await async_input("Enter your query: ")\n            event.input = AIModelNodeInput(prompt_variables={"user_query": user_query})\n            event.handled = True\n'})}),"\n",(0,r.jsx)(n.p,{children:"This pattern is useful for simple interactive agents."}),"\n",(0,r.jsx)(n.h3,{id:"menu-based-selection",children:"Menu-Based Selection"}),"\n",(0,r.jsx)(n.p,{children:"For selecting from multiple options, a menu-based approach is effective:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'async def get_menu_choice(options: list[str], prompt: str = "Select an option:") -> int:\n    print(f"\\n{prompt}")\n    for i, option in enumerate(options):\n        print(f"  {i+1}. {option}")\n\n    while True:\n        try:\n            choice = await async_input("Enter number: ")\n            idx = int(choice) - 1\n            if 0 <= idx < len(options):\n                return idx\n            print(f"Please enter a number between 1 and {len(options)}")\n        except ValueError:\n            print("Please enter a valid number")\n'})}),"\n",(0,r.jsx)(n.p,{children:"This can be used for model selection or other multiple-choice scenarios."}),"\n",(0,r.jsx)(n.h3,{id:"complex-object-collection",children:"Complex Object Collection"}),"\n",(0,r.jsx)(n.p,{children:"For more complex inputs like folder analysis operations, a step-by-step collection approach works well:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'async def get_operation_input() -> FolderAnalysisOperation:\n    path = await async_input("Enter path to analyze: ")\n    include_content = await get_yes_no_input("Include file contents?", True)\n    include_patterns = await async_input("Include patterns (comma-separated, e.g., \'*.py,*.md\'): ")\n    exclude_patterns = await async_input("Exclude patterns (comma-separated, e.g., \'*.pyc,__pycache__\'): ")\n\n    return FolderAnalysisOperation(\n        operation_type="analyze_folder",\n        path=path,\n        include_content=include_content,\n        include_patterns=include_patterns.split(",") if include_patterns else None,\n        exclude_patterns=exclude_patterns.split(",") if exclude_patterns else None,\n    )\n'})}),"\n",(0,r.jsx)(n.h3,{id:"static-input-registration",children:"Static Input Registration"}),"\n",(0,r.jsx)(n.p,{children:"For non-interactive scenarios, static inputs can be registered in advance:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Register static input for a specific node\nrun_context.register_node_static_input(\n    "code_generator",\n    AIModelNodeInput(prompt_variables={"task_description": "Implement feature X"})\n)\n\n# Or load from a JSON file\nrun_context.read_static_inputs()  # Reads from static_inputs.json\n'})}),"\n",(0,r.jsx)(n.p,{children:"This is useful for batch processing or testing."}),"\n",(0,r.jsx)(n.h2,{id:"input-handling-for-different-node-types",children:"Input Handling for Different Node Types"}),"\n",(0,r.jsx)(n.h3,{id:"aimodelnode-input-handling",children:"AIModelNode Input Handling"}),"\n",(0,r.jsx)(n.p,{children:"AI model nodes typically require prompt variables and occasionally resource overrides:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'async def handle_ai_model_input(event: NodeInputRequiredEvent):\n    if event.node_id == "query_analyzer":\n        # Get the user query\n        query = await async_input("Enter your query: ")\n\n        # Select the model to use\n        models = ["claude-3-7-sonnet", "gpt-4.1"]\n        model_idx = await get_menu_choice(models, "Select model:")\n\n        # Create the input\n        event.input = AIModelNodeInput(\n            prompt_variables={"query": query},\n            resources_override=[ResourceConfigItem.with_model(models[model_idx])]\n        )\n        event.handled = True\n'})}),"\n",(0,r.jsx)(n.h3,{id:"folderanalyzernode-input-handling",children:"FolderAnalyzerNode Input Handling"}),"\n",(0,r.jsx)(n.p,{children:"Folder analyzer nodes require configuration for what to analyze:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'async def handle_folder_analyzer_input(event: NodeInputRequiredEvent):\n    if event.node_id == "repo_analyzer":\n        # Collect operations\n        operations = []\n        while True:\n            operation = await get_operation_input()\n            operations.append(operation)\n            if not await get_yes_no_input("Add another analysis operation?", False):\n                break\n\n        # Create the input\n        event.input = FolderAnalyzerNodeInput(\n            settings_override=FolderAnalyzerSettings(\n                base_directory="/path/to/repo",\n                operations=operations,\n            )\n        )\n        event.handled = True\n'})}),"\n",(0,r.jsx)(n.h2,{id:"advanced-input-handling-techniques",children:"Advanced Input Handling Techniques"}),"\n",(0,r.jsx)(n.h3,{id:"combined-handler",children:"Combined Handler"}),"\n",(0,r.jsx)(n.p,{children:"For agents with multiple nodes, a combined handler can manage all inputs:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"async def agent_input_handler(event: NodeInputRequiredEvent):\n    # Handle based on node type and ID\n    if event.node_type == FlowNodeTypeEnum.ai_model_call:\n        await handle_ai_model_input(event)\n    elif event.node_type == FlowNodeTypeEnum.folder_analyzer:\n        await handle_folder_analyzer_input(event)\n    elif event.node_type == FlowNodeTypeEnum.file_operation:\n        await handle_file_operation_input(event)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"context-aware-input",children:"Context-Aware Input"}),"\n",(0,r.jsx)(n.p,{children:"Handlers can use the execution context to make decisions:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'async def context_aware_handler(event: NodeInputRequiredEvent):\n    # Access results from previous nodes\n    if event.node_id == "second_node":\n        first_result = event.execution_context.get_result("first_node")\n        if first_result and first_result.outcome:\n            # Use previous results to inform this input\n            event.input = AIModelNodeInput(\n                prompt_variables={"previous_output": first_result.outcome.text}\n            )\n            event.handled = True\n'})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Type Safety"}),": Use appropriate input classes for each node type"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Clear Prompts"}),": Provide clear instructions for user input"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Validation"}),": Validate user input before creating node inputs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Error Handling"}),": Handle input errors gracefully with appropriate feedback"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Timeout Handling"}),": Implement timeouts for user input to prevent indefinite waiting"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Modular Design"}),": Organize input handlers in a modular way for reusability"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"State Management"}),": For complex inputs, consider maintaining state across prompts"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(n.p,{children:"The input handling architecture in DAD provides a flexible, powerful system for configuring and interacting with agent\nnodes. By leveraging the event-driven architecture and implementing appropriate handlers, you can create rich\ninteractive experiences while maintaining clean separation between node definition and input collection."})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var i=t(6540);const r={},o=i.createContext(r);function a(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);