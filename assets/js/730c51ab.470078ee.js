"use strict";(self.webpackChunkdhenara_docs=self.webpackChunkdhenara_docs||[]).push([[3477],{8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var t=i(6540);const s={},r=t.createContext(s);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(r.Provider,{value:n},e.children)}},8823:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"dhenara-ai/features/reasoning","title":"Reasoning","description":"The Challenge of Reasoning Tokens","source":"@site/docs/dhenara-ai/features/reasoning.md","sourceDirName":"dhenara-ai/features","slug":"/dhenara-ai/features/reasoning","permalink":"/dhenara-ai/features/reasoning","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Reasoning"},"sidebar":"dhenaraAiSidebar","previous":{"title":"Type Safety","permalink":"/dhenara-ai/features/type-safety"},"next":{"title":"Test Mode & Async Support","permalink":"/dhenara-ai/features/test-mode-and-async"}}');var s=i(4848),r=i(8453);const o={title:"Reasoning"},a="Unified Reasoning Contents",l={},h=[{value:"The Challenge of Reasoning Tokens",id:"the-challenge-of-reasoning-tokens",level:2},{value:"How Different Providers Handle Reasoning",id:"how-different-providers-handle-reasoning",level:2},{value:"Anthropic&#39;s Approach",id:"anthropics-approach",level:3},{value:"DeepSeek&#39;s Approach",id:"deepseeks-approach",level:3},{value:"OpenAI&#39;s Approach",id:"openais-approach",level:3},{value:"The Dhenara Solution",id:"the-dhenara-solution",level:2},{value:"How Dhenara Unifies Reasoning Content",id:"how-dhenara-unifies-reasoning-content",level:3},{value:"Getting Started with Reasoning in Dhenara",id:"getting-started-with-reasoning-in-dhenara",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"unified-reasoning-contents",children:"Unified Reasoning Contents"})}),"\n",(0,s.jsx)(n.h2,{id:"the-challenge-of-reasoning-tokens",children:"The Challenge of Reasoning Tokens"}),"\n",(0,s.jsx)(n.p,{children:'AI models are increasingly exposing their internal "thinking" or "reasoning" processes, offering a window into how the\nmodel arrives at its conclusions. This capability is extremely valuable for:'}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Debugging model outputs"}),"\n",(0,s.jsx)(n.li,{children:"Verifying logical chains"}),"\n",(0,s.jsx)(n.li,{children:"Evaluating model performance"}),"\n",(0,s.jsx)(n.li,{children:"Understanding model reasoning patterns"}),"\n",(0,s.jsx)(n.li,{children:"Providing transparency to users"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"However, different AI providers implement this feature in completely different ways, creating a significant challenge\nfor developers who want to work with multiple models."}),"\n",(0,s.jsx)(n.h2,{id:"how-different-providers-handle-reasoning",children:"How Different Providers Handle Reasoning"}),"\n",(0,s.jsx)(n.h3,{id:"anthropics-approach",children:"Anthropic's Approach"}),"\n",(0,s.jsx)(n.p,{children:"Anthropic models like Claude 3.7 Sonnet expose reasoning through a dedicated API structure with separate content types:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Anthropic response structure (simplified)\n{\n    "content": [\n        {\n            "type": "thinking",  # Dedicated type for reasoning\n            "thinking": "First, I need to analyze the financial data..."\n        },\n        {\n            "type": "text",\n            "text": "Based on my analysis, the company\'s growth rate is 12%..."\n        }\n    ]\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Anthropic treats reasoning as a first-class citizen in their response structure with a distinct content type."}),"\n",(0,s.jsx)(n.h3,{id:"deepseeks-approach",children:"DeepSeek's Approach"}),"\n",(0,s.jsx)(n.p,{children:"DeepSeek models like DeepSeek-R1 embed reasoning within the text response using XML-like markup:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"<think>\nLet me work through this step by step.\nThe problem is asking for the integral of x\xb2sin(x).\nI'll use integration by parts with u = x\xb2 and dv = sin(x)dx.\n</think>\n\nThe integral of x\xb2sin(x) can be solved using integration by parts...\n"})}),"\n",(0,s.jsx)(n.p,{children:"The thinking process is embedded directly in the content, requiring parsing to extract it."}),"\n",(0,s.jsx)(n.h3,{id:"openais-approach",children:"OpenAI's Approach"}),"\n",(0,s.jsx)(n.p,{children:"While writing this document, OpenAI doesn't expose the reasoing tokens to developers in any manner. When they support it\nin the API, we update to handle it."}),"\n",(0,s.jsx)(n.h2,{id:"the-dhenara-solution",children:"The Dhenara Solution"}),"\n",(0,s.jsx)(n.p,{children:"Dhenara provides a unified interface for working with reasoning content regardless of the provider implementation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# With Dhenara, regardless of the provider:\nresponse = client.generate(prompt="Solve this integral: \u222bx\xb2sin(x)dx",\n                          config=AIModelCallConfig(reasoning=True))\n\n# Access reasoning content uniformly\nfor choice in response.chat_response.choices:\n    for content in choice.contents:\n        if content.type == "reasoning":\n            print("Reasoning:", content.thinking_text)\n        elif content.type == "text":\n            print("Answer:", content.text)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"how-dhenara-unifies-reasoning-content",children:"How Dhenara Unifies Reasoning Content"}),"\n",(0,s.jsx)(n.p,{children:"Looking at the underlying code, Dhenara:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Provides standardized types"})," - ",(0,s.jsx)(n.code,{children:"ChatResponseContentItemType.REASONING"})," is a distinct content type"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Handles provider differences transparently"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["For Anthropic: Converts ",(0,s.jsx)(n.code,{children:"ThinkingBlock"})," objects directly to ",(0,s.jsx)(n.code,{children:"ChatResponseReasoningContentItem"})]}),"\n",(0,s.jsxs)(n.li,{children:["For DeepSeek: Parses ",(0,s.jsx)(n.code,{children:"<think>...</think>"})," markup and creates separate reasoning content items"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Supports streaming"})," with ",(0,s.jsx)(n.code,{children:"ChatResponseReasoningContentItemDelta"})," for incremental reasoning updates"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This approach means developers can code against a single consistent interface regardless of which model they're using."}),"\n",(0,s.jsx)(n.p,{children:"Most of the existing frameworks either:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Don't handle reasoning tokens specially"})," - they just pass through whatever the provider returns"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Require separate code paths"})," for each provider's reasoning structure"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Only support reasoning for specific providers"})," without a unified approach"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"getting-started-with-reasoning-in-dhenara",children:"Getting Started with Reasoning in Dhenara"}),"\n",(0,s.jsx)(n.p,{children:"To use reasoning capabilities:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from dhenara.ai import AIModelClient\nfrom dhenara.ai.types import AIModelCallConfig\n\n# Create client with a model that supports reasoning\nclient = AIModelClient(model_endpoint=your_model_endpoint)\n\n# Enable reasoning in your call\nresponse = client.generate(\n    prompt="Explain how to calculate the derivative of x\xb3sin(x)",\n    config=AIModelCallConfig(\n        reasoning=True,\n        max_reasoning_tokens=1000  # Optional: limit reasoning tokens\n    )\n)\n\n# Access both reasoning and answer\nfor choice in response.chat_response.choices:\n    for content in choice.contents:\n        if content.type == "reasoning":\n            print("Model\'s reasoning process:")\n            print(content.thinking_text)\n        elif content.type == "text":\n            print("\\nModel\'s answer:")\n            print(content.text)\n'})}),"\n",(0,s.jsx)(n.p,{children:"By providing a unified interface for reasoning content, Dhenara significantly simplifies working with multiple AI models\nand enables you to build more transparent, explainable AI applications."})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);