"use strict";(self.webpackChunkdhenara_docs=self.webpackChunkdhenara_docs||[]).push([[7815],{4055:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"dhenara-agent/getting-started/quick-start","title":"Quick Start","description":"This guide will help you create and run your first agent using Dhenara Agent DSL (DAD). You\'ll build a simple","source":"@site/docs/dhenara-agent/getting-started/quick-start.md","sourceDirName":"dhenara-agent/getting-started","slug":"/dhenara-agent/getting-started/quick-start","permalink":"/dhenara-agent/getting-started/quick-start","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"dhenaraAgentSidebar","previous":{"title":"Installation","permalink":"/dhenara-agent/getting-started/installation"},"next":{"title":"Core Concepts","permalink":"/dhenara-agent/concepts/core-concepts"}}');var s=t(4848),i=t(8453);const o={sidebar_position:2},a="Quick Start",l={},d=[{value:"Start a project",id:"start-a-project",level:2},{value:"Create a Simple Agent",id:"create-a-simple-agent",level:2},{value:"Run the flow",id:"run-the-flow",level:2},{value:"Explanation",id:"explanation",level:2},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"quick-start",children:"Quick Start"})}),"\n",(0,s.jsx)(n.p,{children:"This guide will help you create and run your first agent using Dhenara Agent DSL (DAD). You'll build a simple\nquestion-answering agent that can respond to user queries using an AI model."}),"\n",(0,s.jsxs)(n.p,{children:["Make sure you have installed ",(0,s.jsx)(n.code,{children:"dhenara-agent"})," as described in the\n",(0,s.jsx)(n.a,{href:"/dhenara-agent/getting-started/installation",children:"installation guide"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"python3 -m venv .venv\nsource .venv/bin/activate\npip install dhenara-agent\ndhenara --help\n"})}),"\n",(0,s.jsx)(n.h2,{id:"start-a-project",children:"Start a project"}),"\n",(0,s.jsxs)(n.p,{children:["Start a new project using the CLI with a project name. We'll use ",(0,s.jsx)(n.em,{children:"dev_agents"})," as the project name in this example."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"dhenara startproject dev_agents\n"})}),"\n",(0,s.jsx)(n.p,{children:"This will create a git repository with the following folder structure:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-plaintext",children:"dev_agents\n\u251c\u2500\u2500 .dhenara\n\u2502   \u251c\u2500\u2500 .secrets\n\u2502   \u2502   \u2514\u2500\u2500 .credentials.yaml\n\u2502   \u2514\u2500\u2500 config.yaml\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 .git\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 agents\n    \u2514\u2500\u2500 runners\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 defs.py\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Before you start running an agent, you need to update the ",(0,s.jsx)(n.code,{children:".dhenara/.secrets/.credentials.yaml"})," file with your API keys\nfrom Anthropic, OpenAI, Google, etc."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"openai:\n  api_key: <YOUR_OPENAI_API_KEY>\n\ngoogle_gemini_api:\n  api_key: <YOUR_GOOGLE_GEMINI_API_API_KEY>\n\nanthropic:\n  api_key: <YOUR_ANTHROPIC_API_KEY>\n\ngoogle_vertex_ai:\n  credentials: ...\n"})}),"\n",(0,s.jsx)(n.h2,{id:"create-a-simple-agent",children:"Create a Simple Agent"}),"\n",(0,s.jsxs)(n.p,{children:["Next, let's create an agent. When you use the CLI command, a simple chatbot flow will be included in the flow.py file so\nthat you can easily start updating it. Let's name the agent ",(0,s.jsx)(n.em,{children:"chatbot"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd dev_agents  # Go inside the project repo\ndhenara create agent chatbot\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This will create a ",(0,s.jsx)(n.em,{children:"chatbot"})," agent directory inside ",(0,s.jsx)(n.em,{children:"agents"}),", and a ",(0,s.jsx)(n.em,{children:"chatbot.py"})," runner inside the ",(0,s.jsx)(n.em,{children:"runners"})," directory:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-plaintext",children:".\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 agents\n    \u2502   \u2514\u2500\u2500 chatbot\n    \u2502       \u251c\u2500\u2500 __init__.py\n    \u2502       \u251c\u2500\u2500 agent.py\n    \u2502       \u251c\u2500\u2500 flow.py\n    \u2502       \u2514\u2500\u2500 handler.py\n    \u2514\u2500\u2500 runners\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 chatbot.py\n        \u2514\u2500\u2500 defs.py\n"})}),"\n",(0,s.jsx)(n.p,{children:"The flow inside the chatbot will be as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.dsl import (\n    AIModelNode,\n    AIModelNodeSettings,\n    EventType,\n    FlowDefinition,\n)\nfrom dhenara.ai.types import AIModelCallConfig, Prompt\n\nmain_flow = FlowDefinition()\nmain_flow.node(\n    "user_query_processor",\n    AIModelNode(\n        pre_events=[EventType.node_input_required],\n        settings=AIModelNodeSettings(\n            models=[\n                "claude-3-5-haiku",\n                "gpt-4.1-nano",\n                "gemini-2.0-flash-lite",\n            ],\n            system_instructions=[\n                "You are an AI assistant in a general purpose chatbot",\n                "Always respond in plaintext format.",\n            ],\n            prompt=Prompt.with_dad_text("$var{user_query}"),\n            model_call_config=AIModelCallConfig(\n                test_mode=False,\n            ),\n        ),\n    ),\n)\nmain_flow.node(\n    "title_generator",\n    AIModelNode(\n        settings=AIModelNodeSettings(\n            models=["gpt-4o-mini"],\n            system_instructions=[\n                "You are a summarizer which generate a title.",\n            ],\n            prompt=Prompt.with_dad_text(\n                "Summarize in plain text under 60 characters. $expr{ $hier{ai_model_call_1}.outcome.text }",\n            ),\n        ),\n    ),\n)\n\n'})}),"\n",(0,s.jsx)(n.p,{children:"There is a handler.py file which will handle input request events:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.dsl import (\n    FlowNodeTypeEnum,\n    NodeInputRequiredEvent,\n)\nfrom dhenara.agent.utils.helpers.terminal import async_input, get_ai_model_node_input\n\n\nasync def node_input_event_handler(event: NodeInputRequiredEvent):\n    node_input = None\n    if event.node_type == FlowNodeTypeEnum.ai_model_call:\n        if event.node_id == "ai_model_call_1":\n            node_input = await get_ai_model_node_input(\n                node_def_settings=event.node_def_settings,\n            )\n            user_query = await async_input("Enter your query: ")\n            node_input.prompt_variables = {"user_query": user_query}\n\n        event.input = node_input\n        event.handled = True\n\n'})}),"\n",(0,s.jsx)(n.p,{children:"And finally, there is a runner to run this flow:"}),"\n",(0,s.jsx)(n.p,{children:"dev_agents/src/runners/chatbot.py"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.dsl.events import EventType\nfrom dhenara.agent.run import RunContext\nfrom dhenara.agent.runner import AgentRunner\nfrom dhenara.agent.utils.helpers.terminal import (\n    print_component_completion,\n    print_node_completion,\n)\n\n# Select the agent to run, and import its definitions\nfrom src.agents.chatbot.agent import agent\nfrom src.agents.chatbot.handler import node_input_event_handler\nfrom src.runners.defs import project_root\n\n# Select an agent to run, assign it a root_id\nroot_component_id = "chatbot_root"\nagent.root_id = root_component_id\n\n# Create run context\nrun_context = RunContext(\n    root_component_id=root_component_id,\n    project_root=project_root,\n    observability_settings=None,  # pass observability_settings to enable tracing\n    run_root_subpath=None,  # "agent_chatbot" Useful to pass when you have multiple agents in the same projects.\n)\n\n\n# Register the event handlers\nrun_context.register_event_handlers(\n    handlers_map={\n        EventType.node_input_required: node_input_event_handler,\n        # Optional Notification events\n        EventType.node_execution_completed: print_node_completion,\n        EventType.component_execution_completed: print_component_completion,\n    }\n)\n\n# Create a runner\nrunner = AgentRunner(agent, run_context)\n\n# Use dhenara cli to run this as in an isolated context\n#  --  dhenara run agent <agent_name>\n\n'})}),"\n",(0,s.jsx)(n.h2,{id:"run-the-flow",children:"Run the flow"}),"\n",(0,s.jsxs)(n.p,{children:["Make sure you have configured API keys. (You can run in test mode without API keys by setting ",(0,s.jsx)(n.code,{children:"test_mode=True"})," in all\nAIModelNode configurations. In test mode, you will see a dummy response instead of a real response.)"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"dhenara run agent chatbot\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You will be prompted to select an AI model, and then to enter your query. Once the run finishes, you can see the\nlocation of the run directory. A ",(0,s.jsx)(n.code,{children:"runs"})," directory will be created under the project root when you run it for the first\ntime, and all runs will be tracked there under timestamped directories. Inside the current run directory, you will see\nthe artifacts per node, as shown below:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-plaintext",children:"\u2514\u2500\u2500 run_20250512_115947_4eb85d\n    \u251c\u2500\u2500 chatbot_root\n    \u2502   \u2514\u2500\u2500 main_flow\n    \u2502       \u251c\u2500\u2500 title_generator\n    \u2502       \u2502   \u251c\u2500\u2500 outcome.json\n    \u2502       \u2502   \u251c\u2500\u2500 result.json\n    \u2502       \u2502   \u2514\u2500\u2500 state.json\n    \u2502       \u2514\u2500\u2500 user_query_processor\n    \u2502           \u251c\u2500\u2500 outcome.json\n    \u2502           \u251c\u2500\u2500 result.json\n    \u2502           \u2514\u2500\u2500 state.json\n    \u2514\u2500\u2500 static_inputs\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can examine the ",(0,s.jsx)(n.code,{children:"outcome.json"})," file inside each node to see the result of execution."]}),"\n",(0,s.jsx)(n.p,{children:"You might wonder why you need to open a file to see what happened. But remember, DAD isn't just for creating fancy\nworkflows - it's designed for building real, complex agent workflows."}),"\n",(0,s.jsx)(n.p,{children:"This simple workflow serves as a foundation for more advanced implementations. We'll explore how all these files work\ntogether in a subsequent tutorial. For now, let's focus on understanding the basic structure explained below."}),"\n",(0,s.jsx)(n.h2,{id:"explanation",children:"Explanation"}),"\n",(0,s.jsx)(n.p,{children:"Let's examine how this simple flow works step by step:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"User Input Handling"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"user_query_processor"})," node is configured with ",(0,s.jsx)(n.code,{children:"pre_events=[EventType.node_input_required]"}),", which triggers an\ninput request event before execution."]}),"\n",(0,s.jsxs)(n.li,{children:["When this event is triggered, our ",(0,s.jsx)(n.code,{children:"node_input_event_handler"})," function catches it and prompts the user for input."]}),"\n",(0,s.jsxs)(n.li,{children:["The handler then attaches the user's query as a variable (",(0,s.jsx)(n.code,{children:"user_query"}),") to the node's input."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Dynamic Prompt Generation"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The prompt in the ",(0,s.jsx)(n.code,{children:"user_query_processor"})," node uses ",(0,s.jsx)(n.code,{children:"$var{user_query}"})," for variable substitution."]}),"\n",(0,s.jsx)(n.li,{children:"This allows the prompt to include the user's input dynamically at runtime."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Context Sharing Between Nodes"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"title_generator"})," node references the output of the previous node using ",(0,s.jsx)(n.code,{children:"$hier{ai_model_call_1}.outcome.text"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"$hier"})," expression allows access to the hierarchical context, where previous node results are stored."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Node Execution Flow"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Nodes execute in the order they're added to the flow using ",(0,s.jsx)(n.code,{children:".node()"})," fn."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"user_query_processor"})," runs first, generating an AI response to the user query."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"title_generator"})," runs second, creating a title based on the response from the first node."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Run Artifacts"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Each node generates artifacts (outcome.json, result.json, state.json) that capture the execution details."}),"\n",(0,s.jsx)(n.li,{children:"These artifacts provide transparency and traceability for debugging and analysis."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsx)(n.p,{children:"Now that you've created your first agent, you can:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Go through ",(0,s.jsx)(n.a,{href:"../guides/tutorials/command-line-coder",children:"Tutorials"})," and more complex ",(0,s.jsx)(n.a,{href:"../guides/examples",children:"Examples"})," to see\nwhat you can build"]}),"\n",(0,s.jsxs)(n.li,{children:["Learn more about the ",(0,s.jsx)(n.a,{href:"../concepts/core-concepts",children:"Core Concepts"})," of DAD"]}),"\n",(0,s.jsxs)(n.li,{children:["Explore the different ",(0,s.jsx)(n.a,{href:"../concepts/components/nodes",children:"Node Types"})," and how to use them"]}),"\n",(0,s.jsxs)(n.li,{children:["Understand the ",(0,s.jsx)(n.a,{href:"../architecture/overview",children:"Architecture"})," of DAD"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(6540);const s={},i=r.createContext(s);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);