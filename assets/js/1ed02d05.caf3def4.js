"use strict";(self.webpackChunkdhenara_docs=self.webpackChunkdhenara_docs||[]).push([[1510],{8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>l});var t=i(6540);const s={},o=t.createContext(s);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(o.Provider,{value:n},e.children)}},9147:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"dhenara-agent/concepts/core-concepts","title":"Core Concepts","description":"This guide explains the fundamental concepts and building blocks of Dhenara Agent DSL (DAD). Understanding these","source":"@site/docs/dhenara-agent/concepts/core-concepts.md","sourceDirName":"dhenara-agent/concepts","slug":"/dhenara-agent/concepts/core-concepts","permalink":"/dhenara-agent/concepts/core-concepts","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"dhenaraAgentSidebar","previous":{"title":"Quick Start","permalink":"/dhenara-agent/getting-started/quick-start"},"next":{"title":"Nodes","permalink":"/dhenara-agent/concepts/components/nodes"}}');var s=i(4848),o=i(8453);const r={sidebar_position:3},l="Core Concepts",c={},a=[{value:"Domain Specific Language (DSL)",id:"domain-specific-language-dsl",level:2},{value:"Basic Elements",id:"basic-elements",level:2},{value:"Node Types",id:"node-types",level:3},{value:"Flow Structure",id:"flow-structure",level:3},{value:"Agent Structure",id:"agent-structure",level:3},{value:"Element Identifiers",id:"element-identifiers",level:3},{value:"Element Execution",id:"element-execution",level:2},{value:"Nodes",id:"nodes",level:3},{value:"Flows",id:"flows",level:3},{value:"Agents",id:"agents",level:3},{value:"Execution Model",id:"execution-model",level:2},{value:"Execution Context",id:"execution-context",level:2},{value:"Event System",id:"event-system",level:2},{value:"Template Engine",id:"template-engine",level:2},{value:"Run System",id:"run-system",level:2},{value:"Observability",id:"observability",level:2},{value:"Example: Component Relationships",id:"example-component-relationships",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"core-concepts",children:"Core Concepts"})}),"\n",(0,s.jsx)(n.p,{children:"This guide explains the fundamental concepts and building blocks of Dhenara Agent DSL (DAD). Understanding these\nconcepts will help you design and build effective agent systems."}),"\n",(0,s.jsx)(n.h2,{id:"domain-specific-language-dsl",children:"Domain Specific Language (DSL)"}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Domain-specific_language",children:"Domain Specific Language"})," is a specialized language designed\nfor a particular domain. DAD is a DSL for AI Agent creation. Though we call it a DSL, it is not a separate programming\nlanguage, but rather Python with specialized patterns and structures. We call it a DSL because DAD is an attempt to make\nagent definitions look like a program, as shown below:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'implementation_flow = (\n    FlowDefinition()\n    .node(\n        "dynamic_repo_analysis",\n        FolderAnalyzerNode(settings=FolderAnalyzerSettings(base_directory=global_data_directory)),\n    )\n    .node(\n        "code_generator",\n        AIModelNode(\n            pre_events=[EventType.node_input_required],\n            settings=AIModelNodeSettings(\n                models=models,\n                system_instructions=["You are a professional code implementation agent."],\n                prompt=Prompt.with_dad_text(text=("Description: $expr{task_description}\\n\\n")),\n                model_call_config=AIModelCallConfig(\n                    structured_output=TaskImplementation,\n                ),\n            ),\n        ),\n    )\n    .for_each(\n        id="implementation_loop",\n        statement="$expr{ $hier{code_generator}.outcome.structured.implementation_tasks }",\n        item_var="task_spec",\n        index_var="task_index",\n        start_index=0,\n        max_iterations=20,\n        body=FlowDefinition().node(\n            "code_generator_file_ops",\n            FileOperationNode(\n                settings=FileOperationNodeSettings(\n                    base_directory=global_data_directory,\n                    operations_template="$expr{ $hier{code_generator}.outcome.structured.file_operations }",\n                ),\n                stage=True,\n                commit=False,\n            ),\n        ),\n    )\n)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"basic-elements",children:"Basic Elements"}),"\n",(0,s.jsx)(n.p,{children:"A DAD agent definition consists of three primary types of elements:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Execution Flow Node"})," (or simply Node): The atomic unit of execution"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Execution Flow"})," (or simply Flow): A collection of nodes with execution logic"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Agent"}),": Created using ",(0,s.jsx)(n.code,{children:"AgentDefinition"}),", which organizes and coordinates multiple flows"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"These elements form a hierarchical structure, with Agents at the top, containing Flows, which in turn contain Nodes."}),"\n",(0,s.jsx)(n.h3,{id:"node-types",children:"Node Types"}),"\n",(0,s.jsx)(n.p,{children:"The framework provides several built-in node types:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"AIModelNode"}),": Performs an AI Model API call"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"FileOperationNode"}),": Performs file operations like create_file, edit_file, delete_file, etc."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"FolderAnalyzerNode"}),": Reads a folder or file with fine-grained controls"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"CommandNode"}),": Executes a shell command"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["These are the core built-in nodes in the framework, with support for additional node types including\n",(0,s.jsx)(n.a,{href:"https://modelcontextprotocol.io",children:"MCP"})," (Model Context Protocol) being developed."]}),"\n",(0,s.jsx)(n.p,{children:"You can also create your custom nodes by creating a NodeDefinition along with its settings and executor."}),"\n",(0,s.jsx)(n.h3,{id:"flow-structure",children:"Flow Structure"}),"\n",(0,s.jsxs)(n.p,{children:["A Flow is created using a ",(0,s.jsx)(n.code,{children:"FlowDefinition"}),", to which you can add the following elements:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Nodes"}),"\n",(0,s.jsx)(n.li,{children:"Conditional Blocks (for branching logic)"}),"\n",(0,s.jsx)(n.li,{children:"ForEach Blocks (for iteration)"}),"\n",(0,s.jsx)(n.li,{children:"Other subflows (for modular design)"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"agent-structure",children:"Agent Structure"}),"\n",(0,s.jsxs)(n.p,{children:["An Agent is created using an ",(0,s.jsx)(n.code,{children:"AgentDefinition"}),", to which you can add the following elements:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Flows (top-level execution units)"}),"\n",(0,s.jsx)(n.li,{children:"Conditional Blocks (for high-level branching)"}),"\n",(0,s.jsx)(n.li,{children:"ForEach Blocks (for iterative processing)"}),"\n",(0,s.jsx)(n.li,{children:"Other subagents (for complex, hierarchical designs)"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"element-identifiers",children:"Element Identifiers"}),"\n",(0,s.jsxs)(n.p,{children:["When you add an element to a Flow/Agent definition, you need to provide an ",(0,s.jsx)(n.code,{children:"id"}),' string that uniquely identifies that\nelement within its parent. For example, in the code above, "dynamic_repo_analysis", "code_generator",\n"implementation_loop", and "code_generator_file_ops" are ids.']}),"\n",(0,s.jsxs)(n.p,{children:["These ids are crucial because they allow you to reference the output of one element's execution in another element using\nthe ",(0,s.jsx)(n.code,{children:"$hier{}"})," template syntax, like:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'statement="$expr{ $hier{code_generator}.outcome.structured.implementation_tasks }",\n'})}),"\n",(0,s.jsx)(n.h2,{id:"element-execution",children:"Element Execution"}),"\n",(0,s.jsx)(n.h3,{id:"nodes",children:"Nodes"}),"\n",(0,s.jsx)(n.p,{children:"Nodes are the atomic units of execution in DAD. Each node performs a specific task such as:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Making an LLM API call"}),"\n",(0,s.jsx)(n.li,{children:"Analyzing files or folders"}),"\n",(0,s.jsx)(n.li,{children:"Performing file operations"}),"\n",(0,s.jsx)(n.li,{children:"Executing shell commands"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Nodes are the leaf components in the hierarchy and do the actual work in an agent system."}),"\n",(0,s.jsx)(n.h3,{id:"flows",children:"Flows"}),"\n",(0,s.jsx)(n.p,{children:"Flows are collections of nodes that define execution logic. They determine how data moves between nodes and in what\norder nodes are executed. Flows can include:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Sequential execution of nodes"}),"\n",(0,s.jsx)(n.li,{children:"Conditional branches based on results"}),"\n",(0,s.jsx)(n.li,{children:"Loops for iterative processing"}),"\n",(0,s.jsx)(n.li,{children:"Nested subflows for modular design"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"agents",children:"Agents"}),"\n",(0,s.jsx)(n.p,{children:"Agents are top-level components that can contain multiple flows and other agents (subagents). They represent complete\nfunctional units and orchestrate the overall behavior of the system."}),"\n",(0,s.jsx)(n.h2,{id:"execution-model",children:"Execution Model"}),"\n",(0,s.jsx)(n.p,{children:"Execution in DAD follows a clear separation between definition (what to do) and execution (how to do it):"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Definition Classes"}),": ",(0,s.jsx)(n.code,{children:"NodeDefinition"}),", ",(0,s.jsx)(n.code,{children:"FlowDefinition"}),", ",(0,s.jsx)(n.code,{children:"AgentDefinition"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Executable Classes"}),": ",(0,s.jsx)(n.code,{children:"ExecutableNode"}),", ",(0,s.jsx)(n.code,{children:"Flow"}),", ",(0,s.jsx)(n.code,{children:"Agent"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Executor Classes"}),": ",(0,s.jsx)(n.code,{children:"NodeExecutor"}),", ",(0,s.jsx)(n.code,{children:"FlowExecutor"}),", ",(0,s.jsx)(n.code,{children:"AgentExecutor"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This separation allows for flexible composition and customization while maintaining consistent execution behavior."}),"\n",(0,s.jsx)(n.h2,{id:"execution-context",children:"Execution Context"}),"\n",(0,s.jsx)(n.p,{children:"The execution context is a crucial concept in DAD. It:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Tracks the execution state (pending, running, completed, failed)"}),"\n",(0,s.jsx)(n.li,{children:"Stores results from executed nodes"}),"\n",(0,s.jsx)(n.li,{children:"Manages hierarchical variable scoping"}),"\n",(0,s.jsx)(n.li,{children:"Provides access to resources (e.g., LLM models)"}),"\n",(0,s.jsx)(n.li,{children:"Enables communication between components through events"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The execution context creates a hierarchical structure that mirrors the component hierarchy, allowing child components\nto access resources and results from their parent contexts."}),"\n",(0,s.jsx)(n.h2,{id:"event-system",children:"Event System"}),"\n",(0,s.jsx)(n.p,{children:"The event system provides a publish-subscribe mechanism for communication between components:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Events"}),": Typed messages with a specific purpose (e.g., ",(0,s.jsx)(n.code,{children:"node_input_required"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Event Handlers"}),": Functions that respond to specific event types"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Event Bus"}),": Central hub for routing events to handlers"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Common event types include:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"node_input_required"}),": Request input for a node"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"node_execution_completed"}),": Notify when a node finishes execution"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"node_execution_failed"}),": Notify when a node encounters an error"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"template-engine",children:"Template Engine"}),"\n",(0,s.jsx)(n.p,{children:"The template engine is a powerful feature of DAD that allows for dynamic text generation and processing:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Variable Substitution"}),": Replace ",(0,s.jsx)(n.code,{children:"$var{name}"})," with the value of a variable"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Expression Evaluation"}),": Evaluate expressions like ",(0,s.jsx)(n.code,{children:"$expr{1 + 2}"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Hierarchical References"}),": Access results from other nodes using ",(0,s.jsx)(n.code,{children:"$hier{node_id.property}"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Python Expressions"}),": Evaluate Python code with ",(0,s.jsx)(n.code,{children:"$expr{py: len(items)}"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The template engine makes it easy to build dynamic prompts, process responses, and coordinate between components."}),"\n",(0,s.jsx)(n.h2,{id:"run-system",children:"Run System"}),"\n",(0,s.jsx)(n.p,{children:"The run system manages the execution environment for DAD components:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"RunContext"}),": Manages run directories, artifacts, and settings"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"IsolatedExecution"}),": Provides isolation between runs"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Run Lifecycle"}),": Initialize, setup, execute, manage artifacts, and complete"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The run system ensures reproducibility and proper resource management across different runs."}),"\n",(0,s.jsx)(n.h2,{id:"observability",children:"Observability"}),"\n",(0,s.jsx)(n.p,{children:"Observability is a core feature of DAD that provides visibility into execution:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Tracing"}),": Track the execution path of components and nodes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Logging"}),": Capture structured logs with context"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Metrics"}),": Collect numerical data about execution"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Dashboards"}),": Visualize traces and metrics for analysis"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Observability helps debug issues, optimize performance, and understand complex agent behaviors."}),"\n",(0,s.jsx)(n.h2,{id:"example-component-relationships",children:"Example: Component Relationships"}),"\n",(0,s.jsx)(n.p,{children:"Here's how these concepts work together in a simple DAD agent:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Define a flow with nodes\nmy_flow = FlowDefinition()\nmy_flow.node("analyzer", FolderAnalyzerNode(...))\nmy_flow.node("processor", AIModelNode(...))\n\n# Define an agent with flows\nmy_agent = AgentDefinition()\nmy_agent.flow("main_flow", my_flow)\n\n# Create run context for execution\nrun_context = RunContext(\n    root_component_id="my_agent",\n    project_root=Path("."),\n)\n\n# Run the agent\nrunner = AgentRunner(my_agent, run_context)\nrunner.setup_run()\nresult = await runner.run()\n'})}),"\n",(0,s.jsx)(n.p,{children:"In this example:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"The flow contains two nodes that execute in sequence"}),"\n",(0,s.jsx)(n.li,{children:"The agent contains the flow and potentially other flows"}),"\n",(0,s.jsx)(n.li,{children:"The run context provides the execution environment"}),"\n",(0,s.jsx)(n.li,{children:"The runner handles the execution process"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsx)(n.p,{children:"Now that you understand the core concepts of DAD, you can:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Explore the ",(0,s.jsx)(n.a,{href:"../architecture/overview",children:"Architecture"})," in more detail"]}),"\n",(0,s.jsxs)(n.li,{children:["Learn about specific ",(0,s.jsx)(n.a,{href:"../concepts/components/nodes",children:"Node Types"})," and their capabilities"]}),"\n",(0,s.jsxs)(n.li,{children:["Understand how to use ",(0,s.jsx)(n.a,{href:"../concepts/components/flows",children:"Flows"})," and ",(0,s.jsx)(n.a,{href:"../concepts/components/agents",children:"Agents"})]}),"\n",(0,s.jsxs)(n.li,{children:["Dive deeper into the ",(0,s.jsx)(n.a,{href:"../concepts/templating-system",children:"Templating System"})," and ",(0,s.jsx)(n.a,{href:"../concepts/event-system",children:"Event System"})]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);