"use strict";(self.webpackChunkdhenara_docs=self.webpackChunkdhenara_docs||[]).push([[8046],{8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var i=t(6540);const o={},a=i.createContext(o);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(a.Provider,{value:n},e.children)}},9933:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"dhenara-agent/tutorials/command-line-coder/single-shot","title":"Part 1: Single-Shot Implementation Flow","description":"In this first part of our tutorial, we\'ll build a simple \\"single-shot\\" coding assistant that can take a task description","source":"@site/docs/dhenara-agent/tutorials/command-line-coder/single-shot.md","sourceDirName":"dhenara-agent/tutorials/command-line-coder","slug":"/dhenara-agent/tutorials/command-line-coder/single-shot","permalink":"/dhenara-agent/tutorials/command-line-coder/single-shot","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"dhenaraAgentSidebar","previous":{"title":"Command-Line Coding Assistant","permalink":"/dhenara-agent/tutorials/command-line-coder/"},"next":{"title":"Part 2: Planning Flow","permalink":"/dhenara-agent/tutorials/command-line-coder/planning"}}');var o=t(4848),a=t(8453);const r={sidebar_position:2},s="Part 1: Single-Shot Implementation Flow",l={},d=[{value:"What is a Single-Shot Implementation?",id:"what-is-a-single-shot-implementation",level:2},{value:"Project Setup",id:"project-setup",level:2},{value:"Understanding the Project Structure",id:"understanding-the-project-structure",level:2},{value:"Creating the Types",id:"creating-the-types",level:2},{value:"Implementing the Flow",id:"implementing-the-flow",level:2},{value:"Implementing the Handler",id:"implementing-the-handler",level:2},{value:"Updating the Agent Definition",id:"updating-the-agent-definition",level:2},{value:"Running the Agent",id:"running-the-agent",level:2},{value:"Running Your Agent",id:"running-your-agent",level:2},{value:"Enhancing the Single-Shot Implementation",id:"enhancing-the-single-shot-implementation",level:2},{value:"What&#39;s Next?",id:"whats-next",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"part-1-single-shot-implementation-flow",children:"Part 1: Single-Shot Implementation Flow"})}),"\n",(0,o.jsx)(n.p,{children:'In this first part of our tutorial, we\'ll build a simple "single-shot" coding assistant that can take a task description\nand generate code to implement it. This will serve as the foundation for our more advanced agent in later parts.'}),"\n",(0,o.jsx)(n.h2,{id:"what-is-a-single-shot-implementation",children:"What is a Single-Shot Implementation?"}),"\n",(0,o.jsx)(n.p,{children:"A single-shot implementation is the simplest form of a coding assistant. It takes a task description, analyzes the\nrelevant code context, and generates code to implement the task in one go. Unlike more complex agents, it doesn't break\nthe task down into smaller steps or create a plan\u2014it simply executes the implementation directly."}),"\n",(0,o.jsx)(n.h2,{id:"project-setup",children:"Project Setup"}),"\n",(0,o.jsx)(n.p,{children:"Let's start by setting up our project structure:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Create a new project (or use an existing one):"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"dhenara startproject coding_assistant\ncd coding_assistant\n"})}),"\n",(0,o.jsxs)(n.ol,{start:"2",children:["\n",(0,o.jsx)(n.li,{children:"Create a new agent for our single-shot coder:"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"dhenara create agent singleshot_coder\n"})}),"\n",(0,o.jsx)(n.h2,{id:"understanding-the-project-structure",children:"Understanding the Project Structure"}),"\n",(0,o.jsx)(n.p,{children:"This will create the following structure:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"src/\n\u251c\u2500\u2500 agents/\n\u2502   \u2514\u2500\u2500 singleshot_coder/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 agent.py\n\u2502       \u251c\u2500\u2500 flow.py\n\u2502       \u2514\u2500\u2500 handler.py\n\u2514\u2500\u2500 runners/\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 defs.py\n    \u2514\u2500\u2500 singleshot_coder.py\n"})}),"\n",(0,o.jsx)(n.h2,{id:"creating-the-types",children:"Creating the Types"}),"\n",(0,o.jsxs)(n.p,{children:["Before we implement our flow, let's create a file to define the types our agent will use. In the ",(0,o.jsx)(n.code,{children:"singleshot_coder"}),"\ndirectory, create a ",(0,o.jsx)(n.code,{children:"types.py"})," file:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.dsl.inbuilt.flow_nodes.defs.types import (\n    FileOperation,\n    FileSystemAnalysisOperation,\n    FolderAnalysisOperation,\n)\nfrom pydantic import BaseModel, Field\n\n\nclass TaskSpecWithFolderAnalysisOps(BaseModel):\n    """Task specification with required context for implementation"""\n\n    task_id: str = Field(\n        ...,\n        description="Unique identifier for this task",\n    )\n    description: str = Field(\n        ...,\n        description="Detailed description of what this task accomplishes in markdown format",\n    )\n    required_context: list[FolderAnalysisOperation] = Field(\n        default_factory=list,\n        description=(\n            "List of specific file-system analysis operations needed to provide context for implementing this task."\n        ),\n    )\n\n\nclass TaskImplementation(BaseModel):\n    """\n    Contains the concrete file operations to implement a specific task.\n    This is the output generated after analyzing the context specified in the TaskSpec.\n    """\n\n    task_id: str | None = Field(\n        default=None,\n        description="ID of the corresponding TaskSpec that this implements",\n    )\n    file_operations: list[FileOperation] | None = Field(\n        default_factory=list,\n        description="Ordered list of file operations to execute for this implementation task",\n    )\n    execution_commands: list[dict] | None = Field(\n        None,\n        description="Optional shell commands to run after file operations (e.g., for build or setup)",\n    )\n    verification_commands: list[dict] | None = Field(\n        None,\n        description="Optional commands to verify the changes work as expected",\n    )\n'})}),"\n",(0,o.jsx)(n.h2,{id:"implementing-the-flow",children:"Implementing the Flow"}),"\n",(0,o.jsxs)(n.p,{children:["Now, let's update the ",(0,o.jsx)(n.code,{children:"flow.py"})," file with our implementation flow. This flow will:"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Read context files based on a predefined task specification"}),"\n",(0,o.jsx)(n.li,{children:"Generate code based on the task and context"}),"\n",(0,o.jsx)(n.li,{children:"Execute the generated file operations"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# src/agents/singleshot_coder/flow.py\nimport json\nfrom pathlib import Path\n\nfrom dhenara.agent.dsl import (\n    AIModelNode,\n    AIModelNodeSettings,\n    EventType,\n    FileOperationNode,\n    FileOperationNodeSettings,\n    FlowDefinition,\n    FolderAnalyzerNode,\n    FolderAnalyzerSettings,\n)\nfrom dhenara.ai.types import (\n    AIModelCallConfig,\n    ObjectTemplate,\n    Prompt,\n)\n\nfrom .types import TaskImplementation, TaskSpecWithFolderAnalysisOps\n\n# Define the base directory for file operations\nglobal_data_directory = "$expr{run_root}/global_data"\n\n# Define the available AI models\nmodels = [\n    "claude-3-5-sonnet",\n    "gpt-4o",\n    "gpt-4-turbo",\n    "claude-3-opus",\n    "gpt-4o-mini",\n    "claude-3-5-haiku",\n]\n\n# Optional: Set test_mode to True for development without API calls\ntest_mode = False\n\n\ndef read_task_spec():\n    # For tutorial purposes, we\'re defining a simple task spec here\n    # In a real application, you might read this from a file or user input\n    task_spec = TaskSpecWithFolderAnalysisOps(\n        task_id="example_task",\n        description="Create a simple Python function that calculates the Fibonacci sequence up to n terms and returns it as a list.",\n        required_context=[\n            # This would typically include analysis operations for relevant code\n            # For this simple example, we\'ll leave it empty\n        ],\n    )\n    return task_spec\n\n\n# Create our implementation flow\nimplementation_flow = FlowDefinition()\n\n# 1. Read in our task specification\ntask_spec = read_task_spec()\n\n# 2. Analyze the repository context based on the task specification\nimplementation_flow.node(\n    "context_analysis",\n    FolderAnalyzerNode(\n        settings=FolderAnalyzerSettings(\n            base_directory=global_data_directory,\n            operations_template=ObjectTemplate(expression="$expr{task_spec.required_context}"),\n        ),\n    ),\n)\n\n# 3. Generate code implementation\nimplementation_flow.node(\n    "code_generator",\n    AIModelNode(\n        pre_events=[EventType.node_input_required],  # This will trigger our input handler\n        settings=AIModelNodeSettings(\n            models=models,\n            system_instructions=[\n                "You are a professional code implementation agent specialized in executing precise file operations.",\n                "Your task is to generate the exact file operations necessary to implement requested code changes - nothing more, nothing less.",\n                "Generate machine-executable operations that require zero human intervention.",\n                "ALLOWED OPERATIONS:",\n                "- create_file(file_path, content)",\n                "- delete_file(file_path)",\n                "- create_directory(directory_path)",\n                "- move_file(source_path, destination_path)",\n                "IMPLEMENTATION GUIDELINES:",\n                "1. For complete file replacement, use delete_file followed by create_file.",\n                "2. Maintain the project\'s existing code style, indentation, and formatting conventions.",\n                "3. Use Python 3.10 style in all code examples.",\n            ],\n            prompt=Prompt.with_dad_text(\n                text=(\n                    "## Task Specification\\n"\n                    f"Task ID: {task_spec.task_id}\\n"\n                    f"Description: {task_spec.description}\\n\\n"\n                    "## Repository Context\\n"\n                    "$expr{$hier{context_analysis}.outcome.results}\\n\\n"\n                    "## Implementation Requirements\\n"\n                    "1. Generate precise file operations that can be executed programmatically\\n"\n                    "2. Follow a complete implementation strategy that addresses all aspects of the task\\n\\n"\n                    "## Output Format\\n"\n                    "Return a TaskImplementation object\\n"\n                ),\n            ),\n            model_call_config=AIModelCallConfig(\n                structured_output=TaskImplementation,\n                test_mode=test_mode,\n            ),\n        ),\n    ),\n)\n\n# 4. Execute the file operations\nimplementation_flow.node(\n    "file_operations",\n    FileOperationNode(\n        settings=FileOperationNodeSettings(\n            base_directory=global_data_directory,\n            operations_template=ObjectTemplate(\n                expression="$expr{ $hier{code_generator}.outcome.structured.file_operations }",\n            ),\n            stage=True,  # Stage changes without committing\n            commit=False,\n        ),\n    ),\n)\n'})}),"\n",(0,o.jsx)(n.h2,{id:"implementing-the-handler",children:"Implementing the Handler"}),"\n",(0,o.jsx)(n.p,{children:"Next, let's update the handler.py file to handle the input required event:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# src/agents/singleshot_coder/handler.py\nfrom dhenara.agent.dsl import (\n    FlowNodeTypeEnum,\n    NodeInputRequiredEvent,\n)\nfrom dhenara.agent.utils.helpers.terminal import get_ai_model_node_input\n\n# You can define your models here or import them from elsewhere\nmodels = [\n    "claude-3-5-sonnet",\n    "gpt-4o",\n    "gpt-4-turbo",\n    "claude-3-opus",\n    "gpt-4o-mini",\n    "claude-3-5-haiku",\n]\n\n\nasync def singleshot_coder_input_handler(event: NodeInputRequiredEvent):\n    """Handles input required events for the singleshot coder"""\n    if event.node_type == FlowNodeTypeEnum.ai_model_call:\n        node_input = None\n\n        if event.node_id == "code_generator":\n            node_input = await get_ai_model_node_input(\n                node_def_settings=event.node_def_settings,\n                models=models,\n            )\n            # In a more complex application, you might add prompt variables here\n            # node_input.prompt_variables = {"key": "value"}\n\n        else:\n            print(f"WARNING: Unhandled ai_model_call input event for node {event.node_id}")\n\n        event.input = node_input\n        event.handled = True\n\n    elif event.node_type == FlowNodeTypeEnum.folder_analyzer:\n        # Handle folder analyzer input events if needed\n        pass\n'})}),"\n",(0,o.jsx)(n.h2,{id:"updating-the-agent-definition",children:"Updating the Agent Definition"}),"\n",(0,o.jsx)(n.p,{children:"Now, let's update the agent.py file to use our implementation flow:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# src/agents/singleshot_coder/agent.py\nfrom dhenara.agent.dsl import AgentDefinition\n\nfrom .flow import implementation_flow\n\n# Main Agent Definition\nagent = AgentDefinition()\nagent.flow(\n    "quick_coder",  # The name of our flow\n    implementation_flow,\n)\n'})}),"\n",(0,o.jsx)(n.h2,{id:"running-the-agent",children:"Running the Agent"}),"\n",(0,o.jsx)(n.p,{children:"The runner.py file should be already set up correctly, but let's make sure it's properly configured to use our input\nhandler:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# src/runners/singleshot_coder.py\nfrom dhenara.agent.dsl.events import EventType\nfrom dhenara.agent.run import RunContext\nfrom dhenara.agent.runner import AgentRunner\nfrom dhenara.agent.utils.helpers.terminal import (\n    print_component_completion,\n    print_node_completion,\n)\n\n# Import our agent and handler\nfrom src.agents.singleshot_coder.agent import agent\nfrom src.agents.singleshot_coder.handler import singleshot_coder_input_handler\nfrom src.runners.defs import observability_settings, project_root\n\n# Configure the agent with a root ID\nroot_component_id = "singleshot_coder_root"\nagent.root_id = root_component_id\n\n# Create run context\nrun_context = RunContext(\n    root_component_id=root_component_id,\n    observability_settings=observability_settings,\n    project_root=project_root,\n    run_root_subpath="agent_singleshot_coder",\n)\n\n# Register event handlers\nrun_context.register_event_handlers(\n    handlers_map={\n        EventType.node_input_required: singleshot_coder_input_handler,\n        # Optional notification events\n        EventType.node_execution_completed: print_node_completion,\n        EventType.component_execution_completed: print_component_completion,\n    }\n)\n\n# Create a runner\nrunner = AgentRunner(agent, run_context)\n\n# This enables command line execution\nasync def main():\n    runner.setup_run()\n    await runner.run()\n\n\nif __name__ == "__main__":\n    import asyncio\n\n    asyncio.run(main())\n'})}),"\n",(0,o.jsx)(n.h2,{id:"running-your-agent",children:"Running Your Agent"}),"\n",(0,o.jsx)(n.p,{children:"Now you can run your agent using the DAD CLI:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"dhenara run agent singleshot_coder\n"})}),"\n",(0,o.jsx)(n.p,{children:"During execution, you'll be prompted to select an AI model, and the agent will generate file operations to implement the\nFibonacci function as specified in the task description."}),"\n",(0,o.jsx)(n.h2,{id:"enhancing-the-single-shot-implementation",children:"Enhancing the Single-Shot Implementation"}),"\n",(0,o.jsx)(n.p,{children:"There are several ways to enhance this basic implementation:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Accept task description from user input"}),": Modify the handler to prompt the user for a task description"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Add error handling"}),": Implement error checking for AI model responses"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Support multiple task types"}),": Add capability to handle different kinds of coding tasks"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"whats-next",children:"What's Next?"}),"\n",(0,o.jsxs)(n.p,{children:["In ",(0,o.jsx)(n.a,{href:"/dhenara-agent/tutorials/command-line-coder/planning",children:"Part 2: Planning Flow"}),", we'll enhance our coding assistant by adding a planning capability. This will\nenable it to break down complex tasks into smaller, manageable steps before implementation."]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);