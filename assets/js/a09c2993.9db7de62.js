"use strict";(self.webpackChunkdhenara_docs=self.webpackChunkdhenara_docs||[]).push([[899],{7974:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"introduction","title":"Introduction","description":"Dhenara-AI is a powerful, flexible Python framework for interacting with AI models from various providers. Similar to LangChain but with a focus on simplicity and performance, Dhenara provides a unified interface to work with models from OpenAI, Google AI, Anthropic, and other providers.","source":"@site/docs/introduction.md","sourceDirName":".","slug":"/","permalink":"/","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"introduction","title":"Introduction","slug":"/","sidebar_position":1},"sidebar":"docsSidebar","next":{"title":"Installing Dhenara","permalink":"/getting-started/installation"}}');var i=t(4848),o=t(8453);const s={id:"introduction",title:"Introduction",slug:"/",sidebar_position:1},a="Introduction to Dhenara",l={},d=[{value:"Why Dhenara?",id:"why-dhenara",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Example Usage",id:"example-usage",level:2},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"introduction-to-dhenara",children:"Introduction to Dhenara"})}),"\n",(0,i.jsx)(n.p,{children:"Dhenara-AI is a powerful, flexible Python framework for interacting with AI models from various providers. Similar to LangChain but with a focus on simplicity and performance, Dhenara provides a unified interface to work with models from OpenAI, Google AI, Anthropic, and other providers."}),"\n",(0,i.jsx)(n.h2,{id:"why-dhenara",children:"Why Dhenara?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Unified API"}),": Interact with different AI providers through a consistent interface"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Type Safety"}),": Built with Pydantic for robust type checking and validation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Async Support"}),": Both synchronous and asynchronous interfaces for maximum flexibility"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Streaming"}),": First-class support for streaming responses"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Resource Management"}),": Automatic handling of connections, retries, and timeouts"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Foundation Models"}),": Pre-configured models with sensible defaults"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Multiple Model Providers"}),": Support for OpenAI, Google AI, Anthropic, and DeepSeek"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Text and Image Generation"}),": Generate text or images through the same interface"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Streaming Support"}),": Stream responses for better user experience"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"File Integration"}),": Easily incorporate files into your prompts"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cost Tracking"}),": Monitor token usage and associated costs"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Extensible Design"}),": Add custom providers or model configurations"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"example-usage",children:"Example Usage"}),"\n",(0,i.jsx)(n.p,{children:"Here's a simple example of using Dhenara to interact with an AI model:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from dhenara.ai import AIModelClient, AIModelCallConfig\nfrom dhenara.ai.types.genai.ai_model import AIModelEndpoint\nfrom dhenara.ai.types.external_api import AIModelAPIProviderEnum, AIModelProviderEnum\nfrom dhenara.ai.types.genai.foundation_models import OPENAI_CHAT_MODELS\n\n# Create an API configuration\napi = AIModelAPI(\n    provider=AIModelAPIProviderEnum.OPEN_AI,\n    api_key="your-api-key"\n)\n\n# Create an endpoint using a pre-configured model\nmodel_endpoint = AIModelEndpoint(\n    api=api,\n    ai_model=OPENAI_CHAT_MODELS[0]  # Using GPT-4o\n)\n\n# Configure the call\nconfig = AIModelCallConfig(\n    streaming=True,\n    max_output_tokens=1000\n)\n\n# Create a prompt\nprompt = {\n    "role": "user",\n    "content": "Explain quantum computing in simple terms"\n}\n\n# Generate a response\nasync with AIModelClient(model_endpoint, config) as client:\n    response = await client.generate(prompt=prompt)\n\n    # If streaming\n    if response.async_stream_generator:\n        async for chunk, _ in response.async_stream_generator:\n            if chunk:\n                print(chunk.data.choice_deltas[0].content_deltas[0].get_text_delta(), end="")\n    # If not streaming\n    elif response.chat_response:\n        print(response.chat_response.choices[0].contents[0].get_text())\n'})}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Follow the ",(0,i.jsx)(n.a,{href:"./getting-started/installation",children:"Installation"})," guide to get started"]}),"\n",(0,i.jsxs)(n.li,{children:["Check out the ",(0,i.jsx)(n.a,{href:"./getting-started/quick-start",children:"Quick Start"})," for more examples"]}),"\n",(0,i.jsxs)(n.li,{children:["Learn about ",(0,i.jsx)(n.a,{href:"./getting-started/key-concepts",children:"Key Concepts"})," in Dhenara"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var r=t(6540);const i={},o=r.createContext(i);function s(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);