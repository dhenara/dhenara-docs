"use strict";(self.webpackChunkdhenara_docs=self.webpackChunkdhenara_docs||[]).push([[2861],{6642:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>d,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"dhenara-agent/concepts/components/nodes","title":"Nodes","description":"Overview","source":"@site/docs/dhenara-agent/concepts/components/nodes.md","sourceDirName":"dhenara-agent/concepts/components","slug":"/dhenara-agent/concepts/components/nodes","permalink":"/dhenara-agent/concepts/components/nodes","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Nodes"},"sidebar":"dhenaraAgentSidebar","previous":{"title":"Core Concepts","permalink":"/dhenara-agent/concepts/core-concepts"},"next":{"title":"Flows","permalink":"/dhenara-agent/concepts/components/flows"}}');var s=t(4848),i=t(8453);const d={title:"Nodes"},r="Nodes",l={},a=[{value:"Overview",id:"overview",level:2},{value:"Core Concepts",id:"core-concepts",level:2},{value:"Built-in Node Types",id:"built-in-node-types",level:2},{value:"AIModelNode",id:"aimodelnode",level:3},{value:"FileOperationNode",id:"fileoperationnode",level:3},{value:"FolderAnalyzerNode",id:"folderanalyzernode",level:3},{value:"CommandNode",id:"commandnode",level:3},{value:"Node Input and Output",id:"node-input-and-output",level:2},{value:"Node Input",id:"node-input",level:3},{value:"Node Output",id:"node-output",level:3},{value:"Extending the Node System",id:"extending-the-node-system",level:2},{value:"Best Practices",id:"best-practices",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"nodes",children:"Nodes"})}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"Nodes are the atomic execution units in Dhenara Agent DSL (DAD). Each node performs a specific function, such as making\nan AI model call, analyzing a folder, or performing file operations. Nodes form the fundamental building blocks of flows\nand agents, enabling complex behavior through composition."}),"\n",(0,s.jsx)(n.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,s.jsx)(n.p,{children:"Nodes in DAD follow these key principles:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Single Responsibility"}),": Each node focuses on a specific function"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Typed Input/Output"}),": Nodes have well-defined input and output types"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Configuration"}),": Nodes are configured through settings classes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Event-Driven"}),": Nodes can emit and respond to events"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Extensible"}),": The node system can be extended with custom node types"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"built-in-node-types",children:"Built-in Node Types"}),"\n",(0,s.jsx)(n.p,{children:"DAD includes several built-in node types for common operations:"}),"\n",(0,s.jsx)(n.h3,{id:"aimodelnode",children:"AIModelNode"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"AIModelNode"})," makes calls to AI models (like GPT-4, Claude) to process prompts and generate responses."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.dsl import AIModelNode, AIModelNodeSettings\nfrom dhenara.ai.types import Prompt, ResourceConfigItem\n\nai_node = AIModelNode(\n    resources=ResourceConfigItem.with_model("claude-3-7-sonnet"),\n    settings=AIModelNodeSettings(\n        system_instructions=["You are a helpful assistant."],\n        prompt=Prompt.with_dad_text("Generate ideas for: $var{topic}"),\n        model_call_config=AIModelCallConfig(\n            max_output_tokens=8000,\n            options={"temperature": 0.7}\n        )\n    ),\n)\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Key Features"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Configure which AI models to use via ",(0,s.jsx)(n.code,{children:"resources"})]}),"\n",(0,s.jsx)(n.li,{children:"Set system instructions and prompts"}),"\n",(0,s.jsx)(n.li,{children:"Control model parameters like temperature and max tokens"}),"\n",(0,s.jsx)(n.li,{children:"Request structured outputs using Pydantic models"}),"\n",(0,s.jsx)(n.li,{children:"Use tools by providing tool definitions"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"fileoperationnode",children:"FileOperationNode"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"FileOperationNode"})," performs file system operations like creating, editing, deleting, and moving files."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.dsl import FileOperationNode, FileOperationNodeSettings\nfrom dhenara.ai.types import ObjectTemplate\n\nfile_node = FileOperationNode(\n    settings=FileOperationNodeSettings(\n        base_directory="/path/to/workspace",\n        operations_template=ObjectTemplate(\n            expression="$hier{code_generator}.outcome.structured.file_operations"\n        ),\n        stage=True,\n        commit=True,\n        commit_message="Update files based on analysis",\n    ),\n)\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Key Features"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Perform multiple file operations in a single node"}),"\n",(0,s.jsx)(n.li,{children:"Dynamic operations through templates"}),"\n",(0,s.jsx)(n.li,{children:"Git integration for staging and committing changes"}),"\n",(0,s.jsx)(n.li,{children:"Support for various operation types (create, edit, delete, move)"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"folderanalyzernode",children:"FolderAnalyzerNode"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"FolderAnalyzerNode"})," analyzes directory structures and file contents to provide context for other nodes."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.dsl import FolderAnalyzerNode, FolderAnalyzerSettings\nfrom dhenara.agent.dsl.inbuilt.flow_nodes.defs.types import FolderAnalysisOperation\n\nanalyzer_node = FolderAnalyzerNode(\n    settings=FolderAnalyzerSettings(\n        base_directory="/path/to/repo",\n        operations=[\n            FolderAnalysisOperation(\n                operation_type="analyze_folder",\n                path="src",\n                include_patterns=["*.py"],\n                exclude_patterns=["__pycache__"],\n                include_content=True,\n                recursive=True,\n            )\n        ],\n    ),\n)\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Key Features"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Analyze directory structures and file contents"}),"\n",(0,s.jsx)(n.li,{children:"Filter files by patterns (include/exclude)"}),"\n",(0,s.jsx)(n.li,{children:"Control recursion and content extraction"}),"\n",(0,s.jsx)(n.li,{children:"Generate structured representations of repositories"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"commandnode",children:"CommandNode"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"CommandNode"})," executes shell commands and captures outputs."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.dsl import CommandNode, CommandNodeSettings\n\ncommand_node = CommandNode(\n    settings=CommandNodeSettings(\n        command=["git", "status"],\n        working_directory="/path/to/project",\n        timeout=30,\n    ),\n)\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Key Features"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Execute shell commands with arguments"}),"\n",(0,s.jsx)(n.li,{children:"Control execution environment (working directory, environment variables)"}),"\n",(0,s.jsx)(n.li,{children:"Set timeouts for command execution"}),"\n",(0,s.jsx)(n.li,{children:"Capture command output and exit code"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"node-input-and-output",children:"Node Input and Output"}),"\n",(0,s.jsx)(n.p,{children:"Nodes use typed inputs and outputs to ensure type safety and clear interfaces:"}),"\n",(0,s.jsx)(n.h3,{id:"node-input",children:"Node Input"}),"\n",(0,s.jsxs)(n.p,{children:["Each node type has a specific input class derived from ",(0,s.jsx)(n.code,{children:"NodeInput"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from dhenara.agent.dsl.base import NodeInput\nfrom pydantic import Field\n\nclass AIModelNodeInput(NodeInput):\n    prompt_variables: dict[str, Any] = Field(default_factory=dict)\n    instruction_variables: dict[str, Any] = Field(default_factory=dict)\n    settings_override: AIModelNodeSettings | None = None\n    resources_override: list[ResourceConfigItem] | None = None\n"})}),"\n",(0,s.jsx)(n.p,{children:"Inputs can be provided through several mechanisms:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Event Handlers"}),": Respond to ",(0,s.jsx)(n.code,{children:"node_input_required"})," events"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Static Registration"}),": Register inputs in advance"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Direct Execution"}),": Provide inputs when executing a node directly"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"node-output",children:"Node Output"}),"\n",(0,s.jsxs)(n.p,{children:["Node execution produces a ",(0,s.jsx)(n.code,{children:"NodeOutput"})," containing the results:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class AIModelNodeOutput(NodeOutput[AIModelNodeOutputData]):\n    pass\n\nclass AIModelNodeOutcome(NodeOutcome):\n    text: str | None\n    structured: dict | None\n    file: GenericFile | None\n    files: list[GenericFile] | None\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The standardized ",(0,s.jsx)(n.code,{children:"NodeOutcome"})," format makes it easy to access results consistently across different node types."]}),"\n",(0,s.jsx)(n.h2,{id:"extending-the-node-system",children:"Extending the Node System"}),"\n",(0,s.jsxs)(n.p,{children:["You can create custom node types by extending ",(0,s.jsx)(n.code,{children:"NodeDefinition"})," and implementing the required interfaces:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.dsl.base import NodeDefinition, NodeSettings\nfrom pydantic import BaseModel, Field\n\nclass MyCustomNodeSettings(NodeSettings):\n    param1: str\n    param2: int = 42\n\nclass MyCustomNodeInput(NodeInput):\n    input_data: str\n\nclass MyCustomNodeOutput(NodeOutput):\n    result: str\n\nclass MyCustomNode(NodeDefinition):\n    node_type = "custom"\n    settings_class = MyCustomNodeSettings\n    input_class = MyCustomNodeInput\n    output_class = MyCustomNodeOutput\n\n    # You\'ll need to register an executor for this node type\n'})}),"\n",(0,s.jsx)(n.p,{children:"Custom nodes need an executor that implements the actual execution logic."}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Keep Nodes Focused"}),": Each node should have a single responsibility"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use Typed Inputs/Outputs"}),": Leverage Pydantic models for type safety"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Handle Events"}),": Use the event system for dynamic configuration"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Document Node Behavior"}),": Clearly document what each node does and expects"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Error Handling"}),": Implement proper error handling in node executors"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"By following these practices, you can create reusable, maintainable nodes that work consistently in different contexts."})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>r});var o=t(6540);const s={},i=o.createContext(s);function d(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);