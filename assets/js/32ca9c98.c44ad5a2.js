"use strict";(self.webpackChunkdhenara_docs=self.webpackChunkdhenara_docs||[]).push([[3035],{3911:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"dhenara-agent/features/observability","title":"Observability","description":"Overview","source":"@site/docs/dhenara-agent/features/observability.md","sourceDirName":"dhenara-agent/features","slug":"/dhenara-agent/features/observability","permalink":"/dhenara-agent/features/observability","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Observability"},"sidebar":"dhenaraAgentSidebar","previous":{"title":"Resource Management","permalink":"/dhenara-agent/features/resource-management"},"next":{"title":"Run System","permalink":"/dhenara-agent/advanced-guides/run-system"}}');var i=t(4848),s=t(8453);const a={title:"Observability"},o="Observability",l={},c=[{value:"Overview",id:"overview",level:2},{value:"Core Observability Components",id:"core-observability-components",level:2},{value:"1. Tracing System",id:"1-tracing-system",level:3},{value:"2. Logging System",id:"2-logging-system",level:3},{value:"3. Metrics System",id:"3-metrics-system",level:3},{value:"Observability Configuration",id:"observability-configuration",level:2},{value:"Tracing Profiles",id:"tracing-profiles",level:2},{value:"Exporters",id:"exporters",level:2},{value:"Dashboards",id:"dashboards",level:2},{value:"Best Practices",id:"best-practices",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"observability",children:"Observability"})}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"Observability is a core feature of Dhenara Agent DSL (DAD), providing comprehensive tracking, logging, and metrics for\nall agent activities. The observability system enables developers to understand, debug, and optimize their agent\nworkflows with detailed visibility into execution."}),"\n",(0,i.jsx)(n.h2,{id:"core-observability-components",children:"Core Observability Components"}),"\n",(0,i.jsx)(n.h3,{id:"1-tracing-system",children:"1. Tracing System"}),"\n",(0,i.jsx)(n.p,{children:"The tracing system tracks the execution path of components and nodes:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.observability.tracing import setup_tracing, get_tracer, trace_method, trace_node\n\n# Use decorators for automatic tracing\n@trace_method("my_method")\nasync def my_method(self, param1):\n    # Method implementation\n    pass\n\n@trace_node("my_custom_node_type")\nasync def execute_node(self, node_id, execution_context, node_input):\n    # Node execution implementation\n    pass\n'})}),"\n",(0,i.jsx)(n.p,{children:"The tracing system creates hierarchical spans that capture:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Execution path and hierarchies"}),"\n",(0,i.jsx)(n.li,{children:"Timing information"}),"\n",(0,i.jsx)(n.li,{children:"Input and output data"}),"\n",(0,i.jsx)(n.li,{children:"Success/failure status"}),"\n",(0,i.jsx)(n.li,{children:"Error information"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"2-logging-system",children:"2. Logging System"}),"\n",(0,i.jsx)(n.p,{children:"The logging system provides structured logging with context:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.observability import log_with_context\nimport logging\n\n# Log with trace context\nlog_with_context(\n    logger,\n    logging.INFO,\n    "Processing completed successfully",\n    {"items_processed": 42, "processing_time_ms": 1250}\n)\n'})}),"\n",(0,i.jsx)(n.p,{children:"This automatically associates logs with the current execution context and trace."}),"\n",(0,i.jsx)(n.h3,{id:"3-metrics-system",children:"3. Metrics System"}),"\n",(0,i.jsx)(n.p,{children:"The metrics system collects numerical data about execution:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.observability import record_metric\n\n# Record a metric\nrecord_metric(\n    meter_name="dhenara.agent.processing",\n    metric_name="items_processed",\n    value=42,\n    metric_type="counter",\n    attributes={"node_id": "my_processor", "item_type": "document"}\n)\n'})}),"\n",(0,i.jsx)(n.p,{children:"Metrics can be aggregated and analyzed to monitor performance and behavior."}),"\n",(0,i.jsx)(n.h2,{id:"observability-configuration",children:"Observability Configuration"}),"\n",(0,i.jsxs)(n.p,{children:["Observability is configured through ",(0,i.jsx)(n.code,{children:"ObservabilitySettings"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.observability.types import ObservabilitySettings\nfrom dhenara.agent.observability import configure_observability\nimport logging\n\n# Create settings\nsettings = ObservabilitySettings(\n    service_name="my-agent-app",\n    tracing_exporter_type="file",  # "console", "file", "otlp", "jaeger", "zipkin"\n    metrics_exporter_type="file",\n    logging_exporter_type="file",\n    trace_file_path="/path/to/trace.jsonl",\n    metrics_file_path="/path/to/metrics.jsonl",\n    log_file_path="/path/to/logs.jsonl",\n    root_log_level=logging.INFO,\n)\n\n# Apply configuration\nconfigure_observability(settings)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"RunContext"})," automatically configures observability based on run parameters."]}),"\n",(0,i.jsx)(n.h2,{id:"tracing-profiles",children:"Tracing Profiles"}),"\n",(0,i.jsx)(n.p,{children:"Tracing profiles define what data should be captured in traces:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.observability.tracing.data import (\n    NodeTracingProfile,\n    TracingDataField,\n    TracingDataCategory,\n)\n\n# Define a tracing profile for a custom node\nmy_node_profile = NodeTracingProfile(\n    node_type="my_custom_node",\n    input_fields=[\n        TracingDataField(\n            name="query",\n            source_path="query",\n            category=TracingDataCategory.primary,\n            max_length=500,\n            description="The search query",\n        ),\n        # More fields...\n    ],\n    output_fields=[\n        # Output fields...\n    ],\n    result_fields=[\n        # Result fields...\n    ],\n)\n'})}),"\n",(0,i.jsx)(n.p,{children:"Profiles help control what data is captured in traces, balancing detail against volume."}),"\n",(0,i.jsx)(n.h2,{id:"exporters",children:"Exporters"}),"\n",(0,i.jsx)(n.p,{children:"DAD supports multiple exporters for observability data:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Console"}),": Output to console (good for development)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"File"}),": JSON line format files (default)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"OTLP"}),": OpenTelemetry Protocol (for integration with observability platforms)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Jaeger"}),": Direct export to Jaeger tracing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Zipkin"}),": Direct export to Zipkin tracing"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Configure for Jaeger export\nsettings = ObservabilitySettings(\n    service_name="my-agent-app",\n    tracing_exporter_type="jaeger",\n    jaeger_endpoint="http://localhost:14268/api/traces",\n)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"dashboards",children:"Dashboards"}),"\n",(0,i.jsx)(n.p,{children:"DAD includes built-in dashboard support for visualizing traces:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.observability.dashboards import (\n    run_dashboard,\n    run_jaeger_dashboard,\n    run_zipkin_dashboard,\n)\n\n# Run a simple dashboard on a trace file\nrun_dashboard("path/to/trace.jsonl", port=8080)\n\n# Or launch Jaeger in a Docker container\nrun_jaeger_dashboard()\n'})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Hierarchical Context"}),": Ensure proper nesting of traces through the component hierarchy"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Selective Tracing"}),": Be strategic about what data to capture, especially for large inputs/outputs"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Structured Logging"}),": Use log_with_context to maintain correlation with traces"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Meaningful Metrics"}),": Capture metrics that provide insights into performance and behavior"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Regular Analysis"}),": Use the dashboard tools to analyze execution and identify improvements"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"By utilizing DAD's observability features, developers can gain deep insights into their agent systems, diagnose issues\nmore effectively, and optimize performance."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var r=t(6540);const i={},s=r.createContext(i);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);