"use strict";(self.webpackChunkdhenara_docs=self.webpackChunkdhenara_docs||[]).push([[1168],{3821:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>m,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"dhenara-ai/samples/image-gen/image-gen","title":"Image Generation","description":"","source":"@site/docs/dhenara-ai/samples/image-gen/image-gen.md","sourceDirName":"dhenara-ai/samples/image-gen","slug":"/dhenara-ai/samples/image-gen/","permalink":"/dhenara-ai/samples/image-gen/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Image Generation"},"sidebar":"dhenaraAiSidebar","previous":{"title":"Streaming","permalink":"/dhenara-ai/samples/text-gen/streaming"}}');var o=a(4848),i=a(8453);const r={title:"Image Generation"},s="Image Generation",m={},l=[];function d(e){const n={code:"code",h1:"h1",header:"header",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"image-generation",children:"Image Generation"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import base64\nimport io\nfrom PIL import Image  # NOTE: You need to install \'Pillow\' # pip install Pillow\nfrom dhenara.ai import AIModelClient\nfrom dhenara.ai.types import AIModelCallConfig, AIModelEndpoint\nfrom dhenara.ai.types.external_api import AIModelAPIProviderEnum\nfrom dhenara.ai.types.genai import AIModelAPI, ImageContentFormat\nfrom dhenara.ai.types.genai.foundation_models.openai.image import DallE3\n\n# 1. Create an API\n# This can be used to create multiple model endpoints for the same API provider\nopenai_api = AIModelAPI(\n    provider=AIModelAPIProviderEnum.OPEN_AI,\n    api_key="your_api_key",\n)\n\n\n# Create the model endpoint\nmodel_endpoint = AIModelEndpoint(api=openai_api, ai_model=DallE3)\n\n# Create the client\nclient = AIModelClient(\n    model_endpoint=model_endpoint,\n    config=AIModelCallConfig(\n        options={\n            "quality": "standard",\n            "size": "1024x1024",\n            "style": "natural",\n            "n": 1,\n            "response_format": "b64_json",\n        },\n        test_mode=False,\n    ),\n    is_async=False,  # Sync mode\n)\n\n\nuser_query = "Elephant amigurumi walking in savanna, a professional photograph, blurry background"\n\nresponse = client.generate(\n    prompt=user_query,\n    context=[],\n    instructions=[],\n)\n\n\nif response.image_response:\n    for choice in response.image_response.choices:\n        for image_content in choice.contents:\n            if image_content.content_format == ImageContentFormat.BASE64:\n                # Convert base64 to image\n                image_bytes = base64.b64decode(image_content.content_b64_json)\n                image = Image.open(io.BytesIO(image_bytes))\n\n                # Save the image\n                image.save("generated_image.png")\n                print("Image saved as generated_image.png")\n            elif image_content.content_format == ImageContentFormat.URL:\n                print(f"URL: {image_content.content_url}")\n\n    # Optionally get the usage and cost for this call.\n    # Usage/Cost calculation is enabled by default, but can be disabled via setting\n    print("-" * 80)\n    print(f"Usage: {response.image_response.usage}")\n    print(f"Usage Charge: {response.image_response.usage_charge}")\n    print("-" * 80)\n\n'})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>s});var t=a(6540);const o={},i=t.createContext(o);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);