"use strict";(self.webpackChunkdhenara_docs=self.webpackChunkdhenara_docs||[]).push([[2154],{4432:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"dhenara-agent/examples/auto-coder","title":"Code Generation Agent","description":"This example demonstrates how to build a sophisticated code generation agent using Dhenara Agent DSL (DAD). The","source":"@site/docs/dhenara-agent/examples/auto-coder.md","sourceDirName":"dhenara-agent/examples","slug":"/dhenara-agent/examples/auto-coder","permalink":"/dhenara-agent/examples/auto-coder","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"dhenaraAgentSidebar","previous":{"title":"Simple Chatbot","permalink":"/dhenara-agent/examples/simple-chatbot"},"next":{"title":"Single-Shot Coder","permalink":"/dhenara-agent/examples/single-shot-coder"}}');var i=t(4848),a=t(8453);const s={sidebar_position:3},r="Code Generation Agent",l={},d=[{value:"Agent Overview",id:"agent-overview",level:2},{value:"Agent Structure",id:"agent-structure",level:2},{value:"Main Agent Definition",id:"main-agent-definition",level:2},{value:"Coordinator Flow",id:"coordinator-flow",level:2},{value:"Planning Flow",id:"planning-flow",level:2},{value:"Implementation Flow",id:"implementation-flow",level:2},{value:"Data Models",id:"data-models",level:2},{value:"Running the Agent",id:"running-the-agent",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"code-generation-agent",children:"Code Generation Agent"})}),"\n",(0,i.jsx)(e.p,{children:"This example demonstrates how to build a sophisticated code generation agent using Dhenara Agent DSL (DAD). The\nAutocoder agent can analyze code repositories, plan implementation steps, and execute precise file operations to\nimplement code changes."}),"\n",(0,i.jsx)(e.h2,{id:"agent-overview",children:"Agent Overview"}),"\n",(0,i.jsx)(e.p,{children:"The Autocoder agent follows a three-step process:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Analysis"}),": Analyzes the repository structure to understand the codebase"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Planning"}),": Creates a structured plan with implementation tasks"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Implementation"}),": Executes file operations to implement code changes"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"This agent showcases advanced DAD features including:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Complex flows with multiple stages"}),"\n",(0,i.jsx)(e.li,{children:"Conditional branching"}),"\n",(0,i.jsx)(e.li,{children:"Folder analysis operations"}),"\n",(0,i.jsx)(e.li,{children:"File operations for code implementation"}),"\n",(0,i.jsx)(e.li,{children:"Structured data processing"}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"agent-structure",children:"Agent Structure"}),"\n",(0,i.jsx)(e.p,{children:"The Autocoder agent consists of several components:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-plaintext",children:"src/agents/autocoder/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 agent.py                  # Main agent definition\n\u251c\u2500\u2500 handler.py                # Event handlers\n\u251c\u2500\u2500 types.py                  # Pydantic data models\n\u2514\u2500\u2500 flows/                    # Flow definitions\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 defs.py               # Common definitions\n    \u251c\u2500\u2500 flow.py               # Main coordinator flow\n    \u251c\u2500\u2500 planner.py            # Planning stage flow\n    \u251c\u2500\u2500 implementation.py     # Implementation stage flow\n    \u2514\u2500\u2500 structured_cleaner.py # Helper flow for fixing structured output\n"})}),"\n",(0,i.jsx)(e.h2,{id:"main-agent-definition",children:"Main Agent Definition"}),"\n",(0,i.jsx)(e.p,{children:"The agent definition connects the coordinator flow:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'from dhenara.agent.dsl import AgentDefinition\n\nfrom .flows.flow import coordinator_flow\n\n# Main Agent Definition\nagent = AgentDefinition()\nagent.flow(\n    "coordinator_flow_1",\n    coordinator_flow,\n)\n'})}),"\n",(0,i.jsx)(e.h2,{id:"coordinator-flow",children:"Coordinator Flow"}),"\n",(0,i.jsx)(e.p,{children:"The coordinator flow orchestrates the entire process:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'from dhenara.agent.dsl import FlowDefinition\nfrom dhenara.ai.types import ObjectTemplate\n\nfrom .implementation import implementation_flow\nfrom .planner import planner_flow\n\n# Load task information\ntask_background = read_background()\ntask_description = read_description()\n\n# Coordinator Agent Flow\ncoordinator_flow = FlowDefinition()\n\n# First stage: Planning\ncoordinator_flow.subflow(\n    "planner",\n    planner_flow,\n    variables={\n        "task_background": task_background,\n        "task_description": task_description,\n    },\n)\n\n# Conditional execution based on plan generation success\ncoordinator_flow.conditional(\n    id="plan_executor",\n    statement=ObjectTemplate(\n        expression="$expr{py: $hier{planner.plan_generator}.outcome.structured is not None}",\n    ),\n    # Loop through all implementation tasks if plan was generated\n    true_branch=FlowDefinition().for_each(\n        id="implementation_loop",\n        statement=ObjectTemplate(\n            expression="$expr{py: $hier{planner.plan_generator}.outcome.structured.implementation_tasks }",\n        ),\n        item_var="task_spec",\n        index_var="task_index",\n        max_iterations=20,\n        body=implementation_flow,\n        body_variables={\n            "task_background": task_background,\n            # task_spec is passed via index_var\n        },\n    ),\n    # Handle failure case\n    false_branch=FlowDefinition().node(\n        "no_plan_generated",\n        CommandNode(\n            settings=CommandNodeSettings(\n                commands=[\n                    "echo \'Planner is unsuccessful.\'",\n                ],\n            )\n        ),\n    ),\n)\n'})}),"\n",(0,i.jsx)(e.h2,{id:"planning-flow",children:"Planning Flow"}),"\n",(0,i.jsx)(e.p,{children:"The planning flow analyzes the repository and generates an implementation plan:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'from dhenara.agent.dsl import (\n    AIModelNode, AIModelNodeSettings, EventType, FlowDefinition, FolderAnalyzerNode\n)\nfrom dhenara.ai.types import AIModelCallConfig, Prompt\n\nfrom src.agents.autocoder.types import Plan\n\n# Planner Agent Flow\nplanner_flow = FlowDefinition().vars(\n    {\n        "task_background": PLACEHOLDER,\n        "task_description": PLACEHOLDER,\n    }\n)\n\n# Repository analysis\nplanner_flow.node(\n    "pre_plan_repo_analysis",\n    FolderAnalyzerNode(\n        pre_events=[EventType.node_input_required],\n        settings=None,  # Configured through the handler\n    ),\n)\n\n# Planning node\nplanner_flow.node(\n    "plan_generator",\n    AIModelNode(\n        pre_events=[EventType.node_input_required],\n        settings=AIModelNodeSettings(\n            models=models,\n            system_instructions=[\n                "You are a professional implementation planner for coding tasks",\n                # Additional instructions...\n            ],\n            prompt=Prompt.with_dad_text(\n                text=(\n                    "Task Background: $var{task_background} \\n"\n                    "Task: $var{task_description} \\n"\n                    "Context Files info:\\n $expr{ $hier{pre_plan_repo_analysis}.outcome.results }\\n\\n"\n                    # Additional prompt text...\n                ),\n            ),\n            model_call_config=AIModelCallConfig(\n                structured_output=Plan,\n                test_mode=test_mode,\n            ),\n        ),\n    ),\n)\n'})}),"\n",(0,i.jsx)(e.h2,{id:"implementation-flow",children:"Implementation Flow"}),"\n",(0,i.jsx)(e.p,{children:"The implementation flow executes a single task from the plan:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'from dhenara.agent.dsl import (\n    AIModelNode, AIModelNodeSettings, EventType, FileOperationNode,\n    FileOperationNodeSettings, FlowDefinition, FolderAnalyzerNode, FolderAnalyzerSettings\n)\nfrom dhenara.ai.types import AIModelCallConfig, ObjectTemplate, Prompt\n\nfrom src.agents.autocoder.types import TaskImplementation\n\n# Implementation flow variables\nimplementation_flow = FlowDefinition().vars(\n    {\n        "task_background": PLACEHOLDER,\n        "task_spec": "No Spec",  # Should be a TaskSpec type\n    }\n)\n\n# Dynamic analysis for this specific task\nimplementation_flow.node(\n    "dynamic_repo_analysis",\n    FolderAnalyzerNode(\n        settings=FolderAnalyzerSettings(\n            base_directory=global_data_directory,\n            operations_template=ObjectTemplate(expression="$expr{task_spec.required_context}"),\n        ),\n    ),\n)\n\n# Code generation node\nimplementation_flow.node(\n    "code_generator",\n    AIModelNode(\n        pre_events=[EventType.node_input_required],\n        settings=AIModelNodeSettings(\n            models=models,\n            system_instructions=[\n                "You are a professional code implementation agent",\n                # Additional instructions...\n            ],\n            prompt=Prompt.with_dad_text(\n                text=(\n                    "## Background\\n"\n                    "$var{task_background}\\n\\n"\n                    "## Task Specification\\n"\n                    "Task ID: $expr{task_spec.task_id}\\n"\n                    "Description: $expr{task_spec.description}\\n\\n"\n                    "## Repository Context\\n"\n                    "$expr{$hier{dynamic_repo_analysis}.outcome.results}\\n\\n"\n                    # Additional prompt text...\n                ),\n                disable_checks=True,\n            ),\n            model_call_config=AIModelCallConfig(\n                structured_output=TaskImplementation,\n                test_mode=test_mode,\n                max_output_tokens=64000,\n                reasoning=True,\n            ),\n        ),\n    ),\n)\n\n# Execute file operations\nimplementation_flow.node(\n    "code_generator_file_ops",\n    FileOperationNode(\n        settings=FileOperationNodeSettings(\n            base_directory=global_data_directory,\n            operations_template=ObjectTemplate(\n                expression="$expr{ $hier{code_generator}.outcome.structured.file_operations }",\n            ),\n            stage=True,\n            commit=False,\n        ),\n    ),\n)\n'})}),"\n",(0,i.jsx)(e.h2,{id:"data-models",children:"Data Models"}),"\n",(0,i.jsx)(e.p,{children:"The agent uses structured data models defined with Pydantic:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'from dhenara.agent.dsl.inbuilt.flow_nodes.defs.types import (\n    FileOperation, FileSystemAnalysisOperation, FolderAnalysisOperation\n)\nfrom pydantic import BaseModel, Field\n\nclass TaskSpec(BaseModel):\n    """\n    Specification for a logical development task with its required context.\n    Each task is a discrete unit of work in the overall plan.\n    """\n\n    order: int = Field(..., description="Execution order of this task in the overall plan")\n    task_id: str = Field(..., description="Unique identifier for this task")\n    description: str = Field(..., description="Detailed description of what this task accomplishes")\n    required_context: list[FileSystemAnalysisOperation] = Field(\n        default_factory=list,\n        description="File-system analysis operations needed to provide context",\n    )\n\nclass TaskImplementation(BaseModel):\n    """\n    Contains the concrete file operations to implement a specific task of the plan.\n    """\n\n    task_id: str | None = Field(default=None, description="ID of the corresponding TaskSpec")\n    file_operations: list[FileOperation] | None = Field(\n        default_factory=list,\n        description="File operations to execute for this implementation task",\n    )\n    execution_commands: list[dict] | None = Field(\n        None,\n        description="Optional shell commands to run after file operations",\n    )\n    verification_commands: list[dict] | None = Field(\n        None,\n        description="Optional commands to verify the changes work as expected",\n    )\n\nclass Plan(BaseModel):\n    """\n    A comprehensive, structured plan for implementing a specific task.\n    """\n\n    title: str = Field(..., description="Concise title of the plan")\n    description: str = Field(..., description="Detailed explanation of the implementation approach")\n    implementation_tasks: list[TaskSpec] = Field(..., description="Ordered implementation tasks")\n    validation_steps: list[str] = Field(..., description="Steps to validate the implementation")\n    estimated_complexity: int | None = Field(None, description="Complexity estimate (1-10)")\n'})}),"\n",(0,i.jsx)(e.h2,{id:"running-the-agent",children:"Running the Agent"}),"\n",(0,i.jsx)(e.p,{children:"To run the Autocoder agent, you would use a runner script similar to the one below:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'from dhenara.agent.dsl.events import EventType\nfrom dhenara.agent.run import RunContext\nfrom dhenara.agent.runner import AgentRunner\n\nfrom src.agents.autocoder.agent import agent\nfrom src.agents.autocoder.handler import autocoder_input_handler\nfrom src.runners.defs import observability_settings, project_root\n\nroot_component_id = "coding_agent_root"\nagent.root_id = root_component_id\n\nrun_context = RunContext(\n    root_component_id=root_component_id,\n    observability_settings=observability_settings,\n    project_root=project_root,\n    run_root_subpath="agent_autocoder",\n)\n\nrun_context.register_event_handlers(\n    handlers_map={\n        EventType.node_input_required: autocoder_input_handler,\n        # Additional event handlers...\n    }\n)\n\nrunner = AgentRunner(agent, run_context)\n'})}),"\n",(0,i.jsx)(e.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(e.p,{children:"The Autocoder agent demonstrates how DAD can be used to create sophisticated AI agents for code generation. By\norchestrating repository analysis, planning, and implementation stages, the agent can handle complex coding tasks with\nminimal human intervention."}),"\n",(0,i.jsx)(e.p,{children:"This example highlights several advanced DAD features:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Multi-stage flows"}),": Breaking complex tasks into manageable stages"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Structured data"}),": Using Pydantic models for structured inputs and outputs"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Dynamic analysis"}),": Analyzing specific files based on task requirements"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"File operations"}),": Implementing code changes through file system operations"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Conditional logic"}),": Handling success and failure cases"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Looping"}),": Processing multiple implementation tasks sequentially"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"By understanding this example, you can create your own specialized agents for various software development tasks."})]})}function p(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>r});var o=t(6540);const i={},a=o.createContext(i);function s(n){const e=o.useContext(a);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),o.createElement(a.Provider,{value:e},n.children)}}}]);