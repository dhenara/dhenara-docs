"use strict";(self.webpackChunkdhenara_docs=self.webpackChunkdhenara_docs||[]).push([[3355],{8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var i=t(6540);const a={},s=i.createContext(a);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(s.Provider,{value:n},e.children)}},8558:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"dhenara-agent/guides/tutorials/command-line-coder/index","title":"Command-Line Coding Assistant","description":"In this tutorial, you\'ll learn how to build a command-line coding assistant using the Dhenara Agent DSL (DAD) framework.","source":"@site/docs/dhenara-agent/guides/tutorials/command-line-coder/index.md","sourceDirName":"dhenara-agent/guides/tutorials/command-line-coder","slug":"/dhenara-agent/guides/tutorials/command-line-coder/","permalink":"/dhenara-agent/guides/tutorials/command-line-coder/","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"dhenaraAgentSidebar","previous":{"title":"Tutorials","permalink":"/dhenara-agent/guides/tutorials/"},"next":{"title":"Part 1: Single-Shot Implementation Flow","permalink":"/dhenara-agent/guides/tutorials/command-line-coder/single-shot"}}');var a=t(4848),s=t(8453);const r={sidebar_position:1},o="Command-Line Coding Assistant",l={},d=[{value:"What We&#39;ll Build",id:"what-well-build",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Tutorial Structure",id:"tutorial-structure",level:2},{value:"Let&#39;s Get Started!",id:"lets-get-started",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"command-line-coding-assistant",children:"Command-Line Coding Assistant"})}),"\n",(0,a.jsx)(n.p,{children:"In this tutorial, you'll learn how to build a command-line coding assistant using the Dhenara Agent DSL (DAD) framework.\nThis assistant will be able to generate code based on user requirements, analyze existing codebases, and implement\nchanges with precision."}),"\n",(0,a.jsx)(n.h2,{id:"what-well-build",children:"What We'll Build"}),"\n",(0,a.jsx)(n.p,{children:"We'll create a command-line coding assistant that progressively evolves through four stages:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Single-Shot Implementation"}),": A basic agent that can handle standalone coding tasks"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Planning Capabilities"}),": Adding a planning flow to break down complex tasks"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Enhanced Implementation"}),": Improving the implementation flow with context management"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Coordination"}),": Creating a coordinator flow to manage the entire process"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["By the end of this tutorial, you'll have a fully functional coding assistant similar to the ",(0,a.jsx)(n.code,{children:"auto-coder"})," example in the\nDAD framework."]}),"\n",(0,a.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,a.jsx)(n.p,{children:"Before starting this tutorial, make sure you have:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Installed the DAD framework as described in the ",(0,a.jsx)(n.a,{href:"/dhenara-agent/getting-started/installation",children:"installation guide"})]}),"\n",(0,a.jsxs)(n.li,{children:["Completed the ",(0,a.jsx)(n.a,{href:"/dhenara-agent/getting-started/quick-start",children:"Quick Start guide"})," to understand the basics"]}),"\n",(0,a.jsx)(n.li,{children:"Familiarity with basic Python programming concepts"}),"\n",(0,a.jsx)(n.li,{children:"Set up your API keys for your preferred AI providers"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"tutorial-structure",children:"Tutorial Structure"}),"\n",(0,a.jsx)(n.p,{children:"This tutorial is divided into four parts, each building on the previous one:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/dhenara-agent/guides/tutorials/command-line-coder/single-shot",children:(0,a.jsx)(n.strong,{children:"Single-Shot Implementation Flow"})}),": Build a basic agent that handles direct coding tasks"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/dhenara-agent/guides/tutorials/command-line-coder/planning",children:(0,a.jsx)(n.strong,{children:"Planning Flow"})}),": Add planning capabilities to break down complex tasks"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/dhenara-agent/guides/tutorials/command-line-coder/enhanced-implementation",children:(0,a.jsx)(n.strong,{children:"Enhanced Implementation Flow"})}),": Improve the implementation flow with better context\nhandling"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/dhenara-agent/guides/tutorials/command-line-coder/coordination",children:(0,a.jsx)(n.strong,{children:"Coordinator Flow"})}),": Create a coordinator to manage the planning and implementation"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Each part includes:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Explanation of the concepts being introduced"}),"\n",(0,a.jsx)(n.li,{children:"Step-by-step instructions for implementation"}),"\n",(0,a.jsx)(n.li,{children:"Complete code examples"}),"\n",(0,a.jsx)(n.li,{children:"Tips and best practices"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"lets-get-started",children:"Let's Get Started!"}),"\n",(0,a.jsxs)(n.p,{children:["Start with ",(0,a.jsx)(n.a,{href:"/dhenara-agent/guides/tutorials/command-line-coder/single-shot",children:"Part 1: Single-Shot Implementation Flow"})," to build the foundation of your coding assistant."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);