"use strict";(self.webpackChunkdhenara_docs=self.webpackChunkdhenara_docs||[]).push([[7292],{1540:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"dhenara-agent/guides/examples/simple-chatbot","title":"Simple Chatbot","description":"Building on the Quick Start guide, this example explores the simple","source":"@site/docs/dhenara-agent/guides/examples/simple-chatbot.md","sourceDirName":"dhenara-agent/guides/examples","slug":"/dhenara-agent/guides/examples/simple-chatbot","permalink":"/dhenara-agent/guides/examples/simple-chatbot","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"dhenaraAgentSidebar","previous":{"title":"Example Agents","permalink":"/dhenara-agent/guides/examples/"},"next":{"title":"Code Generation Agent","permalink":"/dhenara-agent/guides/examples/auto-coder"}}');var o=t(4848),r=t(8453);const s={sidebar_position:2},a="Simple Chatbot",d={},l=[{value:"Agent Structure",id:"agent-structure",level:2},{value:"Agent Definition",id:"agent-definition",level:2},{value:"Flow Definition",id:"flow-definition",level:2},{value:"Event Handler",id:"event-handler",level:2},{value:"Runner Script",id:"runner-script",level:2},{value:"How It Works",id:"how-it-works",level:2},{value:"Extending the Chatbot",id:"extending-the-chatbot",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"simple-chatbot",children:"Simple Chatbot"})}),"\n",(0,o.jsxs)(n.p,{children:["Building on the ",(0,o.jsx)(n.a,{href:"/dhenara-agent/getting-started/quick-start",children:"Quick Start guide"}),", this example explores the simple\nchatbot agent in more detail. The chatbot responds to user queries while demonstrating some basic DAD concepts like node\nflow and event handling."]}),"\n",(0,o.jsx)(n.h2,{id:"agent-structure",children:"Agent Structure"}),"\n",(0,o.jsx)(n.p,{children:"A simple chatbot agent consists of three main files:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"agent.py"}),": Defines the agent structure"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"flow.py"}),": Contains the flow definition and nodes"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"handler.py"}),": Handles events like user input"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"agent-definition",children:"Agent Definition"}),"\n",(0,o.jsx)(n.p,{children:"The agent definition file is straightforward, importing the flow and creating the agent:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.dsl import AgentDefinition\n\nfrom .flow import main_flow\n\n# Main Agent Definition\nagent = AgentDefinition()\nagent.flow(\n    "main_flow_1",  # Flow instance ID\n    main_flow,      # Flow definition\n)\n'})}),"\n",(0,o.jsx)(n.h2,{id:"flow-definition",children:"Flow Definition"}),"\n",(0,o.jsx)(n.p,{children:"The flow defines how the agent processes information:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.dsl import (\n    AIModelNode,\n    AIModelNodeSettings,\n    EventType,\n    FlowDefinition,\n)\nfrom dhenara.ai.types import AIModelCallConfig, Prompt\n\nmain_flow = FlowDefinition()\n\n# First node - processes user input and generates response\nmain_flow.node(\n    "user_query_processor",\n    AIModelNode(\n        pre_events=[EventType.node_input_required],\n        settings=AIModelNodeSettings(\n            models=[\n                "claude-3-5-haiku",\n                "gpt-4.1-nano",\n                "gemini-2.0-flash-lite",\n            ],\n            system_instructions=[\n                "You are an AI assistant in a general purpose chatbot",\n                "Always respond in plaintext format.",\n            ],\n            prompt=Prompt.with_dad_text("$var{user_query}"),\n            model_call_config=AIModelCallConfig(\n                test_mode=False,\n            ),\n        ),\n    ),\n)\n\n# Second node - generates a title for the conversation\nmain_flow.node(\n    "title_generator",\n    AIModelNode(\n        settings=AIModelNodeSettings(\n            models=["gpt-4o-mini"],\n            system_instructions=[\n                "You are a summarizer which generate a title.",\n            ],\n            prompt=Prompt.with_dad_text(\n                "Summarize in plain text under 60 characters. $expr{ $hier{ai_model_call_1}.outcome.text }",\n            ),\n        ),\n    ),\n)\n'})}),"\n",(0,o.jsx)(n.h2,{id:"event-handler",children:"Event Handler"}),"\n",(0,o.jsx)(n.p,{children:"The handler processes input events triggered during flow execution:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.dsl import (\n    FlowNodeTypeEnum,\n    NodeInputRequiredEvent,\n)\nfrom dhenara.agent.utils.helpers.terminal import async_input, get_ai_model_node_input\n\n\nasync def node_input_event_handler(event: NodeInputRequiredEvent):\n    node_input = None\n    if event.node_type == FlowNodeTypeEnum.ai_model_call:\n        if event.node_id == "ai_model_call_1":\n            node_input = await get_ai_model_node_input(\n                node_def_settings=event.node_def_settings,\n            )\n            user_query = await async_input("Enter your query: ")\n            node_input.prompt_variables = {"user_query": user_query}\n\n        event.input = node_input\n        event.handled = True\n'})}),"\n",(0,o.jsx)(n.h2,{id:"runner-script",children:"Runner Script"}),"\n",(0,o.jsx)(n.p,{children:"To run the agent, you would use a runner script:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.dsl.events import EventType\nfrom dhenara.agent.run import RunContext\nfrom dhenara.agent.runner import AgentRunner\nfrom dhenara.agent.utils.helpers.terminal import (\n    print_component_completion,\n    print_node_completion,\n)\n\n# Import the agent and handler\nfrom src.agents.chatbot.agent import agent\nfrom src.agents.chatbot.handler import node_input_event_handler\nfrom src.runners.defs import project_root\n\n# Define the root component ID\nroot_component_id = "chatbot_root"\nagent.root_id = root_component_id\n\n# Create run context\nrun_context = RunContext(\n    root_component_id=root_component_id,\n    project_root=project_root,\n    observability_settings=None,  # Optional: add observability settings\n    run_root_subpath="agent_chatbot",  # Optional: specify a path for run artifacts\n)\n\n# Register event handlers\nrun_context.register_event_handlers(\n    handlers_map={\n        EventType.node_input_required: node_input_event_handler,\n        EventType.node_execution_completed: print_node_completion,\n        EventType.component_execution_completed: print_component_completion,\n    }\n)\n\n# Create and run the agent\nrunner = AgentRunner(agent, run_context)\n'})}),"\n",(0,o.jsx)(n.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["The flow starts execution, beginning with the ",(0,o.jsx)(n.code,{children:"user_query_processor"})," node"]}),"\n",(0,o.jsxs)(n.li,{children:["This node triggers an ",(0,o.jsx)(n.code,{children:"input_required"})," event, which is handled by the ",(0,o.jsx)(n.code,{children:"node_input_event_handler"})]}),"\n",(0,o.jsx)(n.li,{children:"The handler prompts the user for input and attaches it as a variable to the node"}),"\n",(0,o.jsx)(n.li,{children:"The node uses the selected AI model to process the query and generate a response"}),"\n",(0,o.jsxs)(n.li,{children:["Next, the ",(0,o.jsx)(n.code,{children:"title_generator"})," node runs, creating a title based on the first node's response"]}),"\n",(0,o.jsx)(n.li,{children:"All results are stored in the run directory for future reference"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"extending-the-chatbot",children:"Extending the Chatbot"}),"\n",(0,o.jsx)(n.p,{children:"You can extend this basic chatbot by:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Adding more nodes to the flow for additional processing steps"}),"\n",(0,o.jsx)(n.li,{children:"Incorporating memory using context variables to remember conversation history"}),"\n",(0,o.jsx)(n.li,{children:"Integrating with external services or databases"}),"\n",(0,o.jsx)(n.li,{children:"Adding specialized roles or capabilities through system instructions"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"This simple example demonstrates the fundamentals of creating an agent with DAD. The following examples will build on\nthese concepts to create more complex agents."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var i=t(6540);const o={},r=i.createContext(o);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);