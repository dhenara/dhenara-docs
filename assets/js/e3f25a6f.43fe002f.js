"use strict";(self.webpackChunkdhenara_docs=self.webpackChunkdhenara_docs||[]).push([[4265],{774:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"dhenara-agent/guides/tutorials/single-shot-coder/part-2","title":"Part 1- Live Inputs","description":"If you look into the flow in part 1, we were hard coding the taskdescription_ inside the flow, which is a bit weird.","source":"@site/docs/dhenara-agent/guides/tutorials/single-shot-coder/part-2.md","sourceDirName":"dhenara-agent/guides/tutorials/single-shot-coder","slug":"/dhenara-agent/guides/tutorials/single-shot-coder/part-2","permalink":"/dhenara-agent/guides/tutorials/single-shot-coder/part-2","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Part 1- Live Inputs"},"sidebar":"dhenaraAgentSidebar","previous":{"title":"Part 1- Bringup","permalink":"/dhenara-agent/guides/tutorials/single-shot-coder/part-1"},"next":{"title":"Part 3- Component Variables","permalink":"/dhenara-agent/guides/tutorials/single-shot-coder/part-3"}}');var i=t(4848),a=t(8453);const r={title:"Part 1- Live Inputs"},s="Part 2: Live Inputs",d={},l=[{value:"Live Model Selections",id:"live-model-selections",level:2},{value:"Taking live task description",id:"taking-live-task-description",level:2},{value:"Live inputs for the FolderAnalyser",id:"live-inputs-for-the-folderanalyser",level:2},{value:"Final Code",id:"final-code",level:2},{value:"What&#39;s Next?",id:"whats-next",level:2}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"part-2-live-inputs",children:"Part 2: Live Inputs"})}),"\n",(0,i.jsxs)(n.p,{children:["If you look into the flow in part 1, we were hard coding the ",(0,i.jsx)(n.em,{children:"task_description"})," inside the flow, which is a bit weird.\nYou don't want to edit your source code every time when you run the agent."]}),"\n",(0,i.jsxs)(n.p,{children:["DAD's event system helps here. In this part we will modify the implementation",(0,i.jsx)(n.em,{children:"flow to accept live inputs on run. Make\nsure you switch back to _test_mode"})," until the last section in this part so that you don't want to send wrong inputs to\nAPIs and cost money."]}),"\n",(0,i.jsx)(n.h2,{id:"live-model-selections",children:"Live Model Selections"}),"\n",(0,i.jsx)(n.p,{children:"First we will add an option to select the model on run. For that, add multiple models to the AIModelNode."}),"\n",(0,i.jsxs)(n.p,{children:["In the ",(0,i.jsx)(n.code,{children:"src/agents/autocoder/flows/implementation.py"})," file make 2 changes:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Add a ",(0,i.jsx)(n.code,{children:"pre_events"})," as ",(0,i.jsx)(n.code,{children:"node_input_required"})]}),"\n",(0,i.jsx)(n.li,{children:"Add more models."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'implementation_flow.node(\n    "code_generator",\n    AIModelNode(\n        pre_events=[EventType.node_input_required],\n        settings=AIModelNodeSettings(\n            models=["claude-3-7-sonnet","o4-mini", "gemini-2.0-flash"],\n            system_instructions= ...\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This will make this node trigger a ",(0,i.jsx)(n.em,{children:"node_input_required"})," event, and wait for its response before proceeding to\nexecution. But if you run the agent right now, you will see an error in the logs as:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:'ERROR:dhenara.agent.dsl.base.node.node_executor:code_generator: No input provided for node via event node_input_required"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["It is because you are not handling that event though you added it. Let's modify ",(0,i.jsx)(n.code,{children:"src/agents/autocoder/handler.py"})," now."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.dsl import (\n    FlowNodeTypeEnum,\n    NodeInputRequiredEvent,\n)\nfrom dhenara.agent.utils.helpers.terminal import async_input, get_ai_model_node_input\n\n\nasync def node_input_event_handler(event: NodeInputRequiredEvent):\n    node_input = None\n    if event.node_type == FlowNodeTypeEnum.ai_model_call:\n\n        if event.node_id == "code_generator": # NOTE: This is the node ID\n            node_input = await get_ai_model_node_input(\n                node_def_settings=event.node_def_settings,\n            )\n\n        event.input = node_input\n        event.handled = True\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The built-in ",(0,i.jsx)(n.code,{children:"get_ai_model_node_input"})," will handle everything for you. It will trigger a command line prompt and show a\nmenu to select the models. If you want to change the models to a subset of models defined inside the node, pass the\n",(0,i.jsx)(n.code,{children:"models"})," parameter to this function, else it will use the models inside node definition."]}),"\n",(0,i.jsx)(n.p,{children:"Now if you run this agent, you will see a prompt to select a model."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"(.venv) $ dhenara run agent autocoder\n\u2713 Node dynamic_repo_analysis execution completed\n\n=== AI Model Selection ===\n\nSelect an AI model:\n1. claude-3-7-sonnet\n2. o4-mini\n3. gemini-2.0-flash\nEnter number:\n"})}),"\n",(0,i.jsx)(n.h2,{id:"taking-live-task-description",children:"Taking live task description"}),"\n",(0,i.jsx)(n.p,{children:"If you closely watch the prompt:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'            prompt=Prompt.with_dad_text(\n                text=(\n                    "## Task Description\\n"\n                    f"{task_description}"\n                    "## Repository Context\\n"\n                    "$expr{$hier{dynamic_repo_analysis}.outcome.results}\\n\\n"\n                    "## Implementation Requirements\\n"\n                    "1. Generate precise file operations that can be executed programmatically\\n"\n                    "2. Strictly follow instructions\\n"\n                    "3. Consider the entire context when making implementation decisions\\n"\n                    "## Output Format\\n"\n                    "Return a TaskImplementation object\\n"\n                ),\n            ),\n'})}),"\n",(0,i.jsxs)(n.p,{children:["You can see currently the ",(0,i.jsx)(n.em,{children:"task_description"})," is just a Python string substitution. But we want to make it run time. The\nbest way to handle this is making ",(0,i.jsx)(n.em,{children:"task_description"})," as DAD variable with a ",(0,i.jsx)(n.code,{children:"$var{}"}),". So modify the prompt as below:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'            prompt=Prompt.with_dad_text(\n                text=(\n                    "## Task Description\\n"\n                    "$var{task_description}"\n                    "## Repository Context\\n"\n                    "$expr{$hier{dynamic_repo_analysis}.outcome.results}\\n\\n"\n                    "## Implementation Requirements\\n"\n                    "1. Generate precise file operations that can be executed programmatically\\n"\n                    "2. Strictly follow instructions\\n"\n                    "3. Consider the entire context when making implementation decisions\\n"\n                    "## Output Format\\n"\n                    "Return a TaskImplementation object\\n"\n                ),\n            ),\n'})}),"\n",(0,i.jsxs)(n.p,{children:["And then modify ",(0,i.jsx)(n.code,{children:"src/agents/autocoder/handler.py"})," as:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.dsl import (\n    FlowNodeTypeEnum,\n    NodeInputRequiredEvent,\n)\nfrom dhenara.agent.utils.helpers.terminal import async_input, get_ai_model_node_input\n\n\nasync def node_input_event_handler(event: NodeInputRequiredEvent):\n    node_input = None\n    if event.node_type == FlowNodeTypeEnum.ai_model_call:\n        if event.node_id == "code_generator": # NOTE: This is the node ID\n            node_input = await get_ai_model_node_input(\n                node_def_settings=event.node_def_settings,\n            )\n            task_description = await async_input("Enter your query: ")\n            node_input.prompt_variables = {"task_description": task_description}\n\n        event.input = node_input\n        event.handled = True\n'})}),"\n",(0,i.jsx)(n.p,{children:"Here you are waiting for a user input and passing it as a prompt variable to the AI model Node."}),"\n",(0,i.jsxs)(n.p,{children:["Now if you run this (even in test mode), it will ask you for a task description. If you look into the ",(0,i.jsx)(n.em,{children:"prompt"})," inside\n",(0,i.jsx)(n.em,{children:"state.json"})," you will see your live input has been taken into the prompt."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:'"prompt": "## Task Description\\ngenerate a readme## Repository Context\\n...\n'})}),"\n",(0,i.jsx)(n.h2,{id:"live-inputs-for-the-folderanalyser",children:"Live inputs for the FolderAnalyser"}),"\n",(0,i.jsx)(n.p,{children:"Accepting live task descriptions is cool, but every time you run this, you may be asking about different project repos\nor even different parts in project repos. The context you want to send to the LLM will be different each time, and thus\nthe FolderAnalyserNode should also accept live inputs."}),"\n",(0,i.jsx)(n.p,{children:"First modify the FolderAnalyzerNode by:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Add a ",(0,i.jsx)(n.em,{children:"node_input_required"})," pre_event"]}),"\n",(0,i.jsx)(n.li,{children:"Set setting to None, as we will feed it dynamically"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# 1. Dynamic Folder Analysis\nimplementation_flow.node(\n    "dynamic_repo_analysis",\n    FolderAnalyzerNode(\n        pre_events=[EventType.node_input_required],\n        settings=None,\n        ),\n)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["And then modify ",(0,i.jsx)(n.code,{children:"src/agents/autocoder/handler.py"})," to handle the ",(0,i.jsx)(n.em,{children:"dynamic_repo_analysis"})," event too."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.dsl import (\n    FlowNodeTypeEnum,\n    NodeInputRequiredEvent,\n)\nfrom dhenara.agent.utils.helpers.terminal import async_input, get_ai_model_node_input, get_folder_analyzer_node_input\n\nfrom .flows.implementation import global_data_directory\n\nasync def node_input_event_handler(event: NodeInputRequiredEvent):\n    node_input = None\n\n    if event.node_type == FlowNodeTypeEnum.ai_model_call:\n        if event.node_id == "code_generator": # NOTE: This is the node ID\n            node_input = await get_ai_model_node_input(\n                node_def_settings=event.node_def_settings,\n            )\n            task_description = await async_input("Enter your query: ")\n            node_input.prompt_variables = {"task_description": task_description}\n\n        event.input = node_input\n        event.handled = True\n\n    elif event.node_type == FlowNodeTypeEnum.folder_analyzer:\n        if event.node_id == "dynamic_repo_analysis":\n            node_input = await get_folder_analyzer_node_input(\n                node_def_settings=event.node_def_settings,\n                base_directory=global_data_directory,\n                predefined_exclusion_patterns=[],\n            )\n\n        event.input = node_input\n        event.handled = True\n'})}),"\n",(0,i.jsxs)(n.p,{children:["And here again, the ",(0,i.jsx)(n.code,{children:"get_folder_analyzer_node_input()"})," will show a command line interface to get inputs from you, but\nyou are free to write your own version too."]}),"\n",(0,i.jsx)(n.p,{children:"Now when you run, you will see a prompt to enter operations:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"(.venv) $ dhenara run agent autocoder\n\n=== Repository Analysis Configuration ===\n\nSelect operation type:\n1. analyze_folder - Recursively examine a directory\n2. analyze_file - Analyze a single file\n3. find_files - Search for files matching patterns\n4. get_structure - Get directory structure without contents\nEnter number:\n"})}),"\n",(0,i.jsx)(n.p,{children:"And a lot of further controls on operations too:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"(.venv) $ dhenara run agent autocoder\n\n=== Repository Analysis Configuration ===\n\nSelect operation type:\n1. analyze_folder - Recursively examine a directory\n2. analyze_file - Analyze a single file\n3. find_files - Search for files matching patterns\n4. get_structure - Get directory structure without contents\nEnter number: 1\nEnter path (relative to base dir `$var{run_root}/global_data`): dhenara_docs\nRespect .gitignore files? [Y/n]:\nInclude hidden files (starting with .)? [y/N]:\nRead file contents? [Y/n]:\nSelect content read mode:\n1. full - Return the raw text content\n2. structure - Extract structural elements\nEnter number: 1\nSelect a predefined exclusion_pattern:\n1. No exclussion patters\nEnter number: 1\nConfigure advanced options? [y/N]: N\nAdd another analysis operation? [y/N]: N\n\nConfigured operations:\n1. analyze_folder - dhenara_docs\n\u2713 Node dynamic_repo_analysis execution completed\n\n=== AI Model Selection ===\n\nSelect an AI model:\n1. claude-3-7-sonnet\n2. o4-mini\n3. gemini-2.0-flash\nEnter number: 1\nUsing model: claude-3-7-sonnet\nEnter your query: Check intro section\n\u2713 Node code_generator execution completed\n\u2713 Node code_generator_file_ops execution completed\n\u2713 main_flow execution completed\n\u2713 autocoder_root execution completed\nAgent standard run completed successfully. Run ID: run_20250515_121100_f36578\n\n\n\u2705 RUN COMPLETED SUCCESSFULLY\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  Run ID: run_20250515_121100_f36578\n  Artifacts location: path/to/dev_agents/runs/run_20250515_121100_f36578\n\n\nLogs in path/to/dev_agents/runs/run_20250515_121100_f36578/.trace/logs.jsonl\n\n(.venv) $\n"})}),"\n",(0,i.jsx)(n.h2,{id:"final-code",children:"Final Code"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# ruff: noqa: E501\nfrom dhenara.agent.dsl import (\n    PLACEHOLDER,\n    AIModelNode,\n    AIModelNodeSettings,\n    EventType,\n    FileOperationNode,\n    FileOperationNodeSettings,\n    FlowDefinition,\n    FolderAnalyzerNode,\n    FolderAnalyzerSettings,\n)\nfrom dhenara.agent.dsl.inbuilt.flow_nodes.defs.types import FolderAnalysisOperation\n\nfrom dhenara.ai.types import (\n    AIModelCallConfig,\n    ObjectTemplate,\n    Prompt,\n)\n\nfrom src.agents.autocoder.types import TaskImplementation\n\n\n# Parent of the repo where we analyse the folders\nglobal_data_directory = "$var{run_root}/global_data"\n\n# Create a FlowDefinition\nimplementation_flow = FlowDefinition()\n\n\n# 1. Dynamic Folder Analysis\nimplementation_flow.node(\n    "dynamic_repo_analysis",\n    FolderAnalyzerNode(\n        pre_events=[EventType.node_input_required],\n        settings=None,\n    ),\n)\n\n# 2. Code Generation Node\nimplementation_flow.node(\n    "code_generator",\n    AIModelNode(\n        pre_events=[EventType.node_input_required],\n        settings=AIModelNodeSettings(\n            models=["claude-3-7-sonnet","o4-mini", "gemini-2.0-flash"],\n            system_instructions=[\n                # Role and Purpose\n                "You are a professional code implementation agent specialized in executing precise file operations.",\n                "Your task is to generate the exact file operations necessary to implement requested code changes - nothing more, nothing less.",\n                "Generate machine-executable operations that require zero human intervention.",\n                # Supported Operations\n                "ALLOWED OPERATIONS:",\n                "- create_file(file_path, content)",\n                "- delete_file(file_path)",\n                "- create_directory(directory_path)",\n                # Prohibited Operations\n                "PROHIBITED OPERATIONS (do not use):",\n                "- edit_file",\n                "- list_directory",\n                "- search_files",\n                "- get_file_metadata",\n                "- list_allowed_directories",\n                # Best Practices\n                "IMPLEMENTATION GUIDELINES:",\n                "1. For complete file replacement, use delete_file followed by create_file instead of a single edit_file.",\n                "2. Maintain the project\'s existing code style, indentation, and formatting conventions.",\n            ],\n            prompt=Prompt.with_dad_text(\n                text=(\n                    "## Task Description\\n"\n                    "$var{task_description}"\n                    "## Repository Context\\n"\n                    "$expr{$hier{dynamic_repo_analysis}.outcome.results}\\n\\n"\n                    "## Implementation Requirements\\n"\n                    "1. Generate precise file operations that can be executed programmatically\\n"\n                    "2. Strictly follow instructions\\n"\n                    "3. Consider the entire context when making implementation decisions\\n"\n                    "## Output Format\\n"\n                    "Return a TaskImplementation object\\n"\n                ),\n            ),\n            model_call_config=AIModelCallConfig(\n                structured_output=TaskImplementation,\n                test_mode=False,\n                max_output_tokens=64000,\n                max_reasoning_tokens=4000,\n                reasoning=True,\n                timeout=1800.0,  # 30 minutes\n            ),\n        ),\n    ),\n)\n\n# 3. File Operation Node\nimplementation_flow.node(\n    "code_generator_file_ops",\n    FileOperationNode(\n        settings=FileOperationNodeSettings(\n            base_directory=global_data_directory,\n            operations_template=ObjectTemplate(\n                expression="$expr{ $hier{code_generator}.outcome.structured.file_operations }",\n            ),\n            stage=True,\n            commit=True,\n            commit_message="$var{run_id}: Auto generated.",\n        ),\n    ),\n)\n'})}),"\n",(0,i.jsx)(n.p,{children:"Handler:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.dsl import (\n    FlowNodeTypeEnum,\n    NodeInputRequiredEvent,\n)\nfrom dhenara.agent.utils.helpers.terminal import async_input, get_ai_model_node_input, get_folder_analyzer_node_input\n\nfrom .flows.implementation import global_data_directory\n\nasync def node_input_event_handler(event: NodeInputRequiredEvent):\n    node_input = None\n\n    if event.node_type == FlowNodeTypeEnum.ai_model_call:\n        if event.node_id == "code_generator": # NOTE: This is the node ID\n            node_input = await get_ai_model_node_input(\n                node_def_settings=event.node_def_settings,\n            )\n            task_description = await async_input("Enter your query: ")\n            node_input.prompt_variables = {"task_description": task_description}\n\n        event.input = node_input\n        event.handled = True\n\n    elif event.node_type == FlowNodeTypeEnum.folder_analyzer:\n        if event.node_id == "dynamic_repo_analysis":\n            node_input = await get_folder_analyzer_node_input(\n                node_def_settings=event.node_def_settings,\n                base_directory=global_data_directory,\n                predefined_exclusion_patterns=[],\n            )\n\n        event.input = node_input\n        event.handled = True\n'})}),"\n",(0,i.jsx)(n.h2,{id:"whats-next",children:"What's Next?"}),"\n",(0,i.jsxs)(n.p,{children:["When you want to do multiple folder analysis operations, entering them one by one might be a bit tedious. An easy\nworkaround here is to save them in a JSON file, and then load it. But it requires an additional fitting, the\n",(0,i.jsx)(n.code,{children:"component variables"}),". It's the way to add variables available to all nodes in a flow. In the next part we will see\nthat."]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var o=t(6540);const i={},a=o.createContext(i);function r(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);