"use strict";(self.webpackChunkdhenara_docs=self.webpackChunkdhenara_docs||[]).push([[7801],{7176:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>s});const o=JSON.parse('{"id":"dhenara-agent/cli/extending","title":"Extending the CLI","description":"Introduction","source":"@site/docs/dhenara-agent/cli/extending.md","sourceDirName":"dhenara-agent/cli","slug":"/dhenara-agent/cli/extending","permalink":"/dhenara-agent/cli/extending","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Extending the CLI"},"sidebar":"dhenaraAgentSidebar","previous":{"title":"CLI Commands","permalink":"/dhenara-agent/cli/commands"},"next":{"title":"Execution Context","permalink":"/dhenara-agent/features/execution-context"}}');var i=t(4848),a=t(8453);const r={title:"Extending the CLI"},c="Extending the CLI",l={},s=[{value:"Introduction",id:"introduction",level:2},{value:"Extension Architecture",id:"extension-architecture",level:2},{value:"Creating a Custom Command Module",id:"creating-a-custom-command-module",level:2},{value:"Step 1: Create a New Module",id:"step-1-create-a-new-module",level:3},{value:"Step 2: Add Commands to Your Group",id:"step-2-add-commands-to-your-group",level:3},{value:"Step 3: Implement Async Commands (Optional)",id:"step-3-implement-async-commands-optional",level:3},{value:"Best Practices for CLI Extensions",id:"best-practices-for-cli-extensions",level:2},{value:"1. Follow Command Structure Conventions",id:"1-follow-command-structure-conventions",level:3},{value:"2. Provide Rich User Feedback",id:"2-provide-rich-user-feedback",level:3},{value:"3. Handle Errors Gracefully",id:"3-handle-errors-gracefully",level:3},{value:"4. Support Verbose Mode",id:"4-support-verbose-mode",level:3},{value:"5. Include Documentation",id:"5-include-documentation",level:3},{value:"Integration with Run Context",id:"integration-with-run-context",level:2},{value:"Example: Creating a Visualization Command",id:"example-creating-a-visualization-command",level:2},{value:"Publishing Your Extension",id:"publishing-your-extension",level:2},{value:"1. Include in Your Project",id:"1-include-in-your-project",level:3},{value:"2. Installable Package",id:"2-installable-package",level:3},{value:"3. Contribute to Core",id:"3-contribute-to-core",level:3},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"extending-the-cli",children:"Extending the CLI"})}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(n.p,{children:"The Dhenara Agent DSL CLI is designed to be highly extensible, allowing developers to add custom commands that integrate\nseamlessly with the existing command structure. This guide will walk you through the process of extending the CLI with\nyour own commands."}),"\n",(0,i.jsx)(n.h2,{id:"extension-architecture",children:"Extension Architecture"}),"\n",(0,i.jsx)(n.p,{children:"The DAD CLI follows a modular architecture where each set of related commands is encapsulated in a separate Python\nmodule. These modules are automatically discovered and loaded when the CLI starts."}),"\n",(0,i.jsx)(n.p,{children:"To extend the CLI, you'll create a new Python module that follows the established command registration pattern."}),"\n",(0,i.jsx)(n.h2,{id:"creating-a-custom-command-module",children:"Creating a Custom Command Module"}),"\n",(0,i.jsx)(n.h3,{id:"step-1-create-a-new-module",children:"Step 1: Create a New Module"}),"\n",(0,i.jsxs)(n.p,{children:["Start by creating a new Python module in the ",(0,i.jsx)(n.code,{children:"dhenara/cli/commands/"})," directory. For example, to add custom analytics\ncommands, you might create a file named ",(0,i.jsx)(n.code,{children:"analytics.py"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# dhenara/cli/commands/analytics.py\nimport click\nfrom pathlib import Path\nimport asyncio\n\ndef register(cli):\n    """Register the analytics commands with the CLI."""\n    cli.add_command(analytics)\n\n@click.group("analytics")\ndef analytics():\n    """Commands for analyzing agent performance and behavior."""\n    pass\n'})}),"\n",(0,i.jsx)(n.h3,{id:"step-2-add-commands-to-your-group",children:"Step 2: Add Commands to Your Group"}),"\n",(0,i.jsx)(n.p,{children:"Next, add specific commands to your command group:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@analytics.command("performance")\n@click.argument("agent_id")\n@click.option("--runs", default=5, help="Number of recent runs to analyze")\n@click.option("--output", type=click.Path(), help="Path to save the report")\ndef analyze_performance(agent_id, runs, output):\n    """Analyze the performance of an agent across recent runs."""\n    click.echo(f"Analyzing performance for agent \'{agent_id}\' across {runs} runs...")\n    # Implementation code here\n    if output:\n        click.echo(f"Report saved to {output}")\n    else:\n        click.echo("Performance analysis complete")\n\n@analytics.command("patterns")\n@click.argument("agent_id")\n@click.option("--depth", default=3, help="Depth of pattern analysis")\ndef analyze_patterns(agent_id, depth):\n    """Identify common patterns in agent behavior."""\n    click.echo(f"Analyzing behavior patterns for agent \'{agent_id}\' with depth {depth}...")\n    # Implementation code here\n'})}),"\n",(0,i.jsx)(n.h3,{id:"step-3-implement-async-commands-optional",children:"Step 3: Implement Async Commands (Optional)"}),"\n",(0,i.jsx)(n.p,{children:"For commands that need to perform asynchronous operations, use an async implementation pattern:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@analytics.command("realtime")\n@click.argument("agent_id")\n@click.option("--duration", default=60, help="Duration of monitoring in seconds")\ndef monitor_realtime(agent_id, duration):\n    """Monitor agent performance in real-time."""\n    click.echo(f"Starting real-time monitoring for agent \'{agent_id}\'...")\n    asyncio.run(_monitor_realtime(agent_id, duration))\n\nasync def _monitor_realtime(agent_id, duration):\n    """Async implementation of real-time monitoring."""\n    # Async implementation code here\n    for i in range(duration):\n        # Simulate monitoring\n        await asyncio.sleep(1)\n        click.echo(f"Monitoring... {i+1}/{duration} seconds")\n    click.echo("Monitoring complete")\n'})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices-for-cli-extensions",children:"Best Practices for CLI Extensions"}),"\n",(0,i.jsx)(n.h3,{id:"1-follow-command-structure-conventions",children:"1. Follow Command Structure Conventions"}),"\n",(0,i.jsx)(n.p,{children:"Maintain consistency with existing commands by following these conventions:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use descriptive command and option names"}),"\n",(0,i.jsx)(n.li,{children:"Provide helpful docstrings that appear in help text"}),"\n",(0,i.jsx)(n.li,{children:"Group related commands under a common group"}),"\n",(0,i.jsx)(n.li,{children:"Use appropriate option types and defaults"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"2-provide-rich-user-feedback",children:"2. Provide Rich User Feedback"}),"\n",(0,i.jsx)(n.p,{children:"Ensure your commands provide appropriate feedback to users:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@click.command()\ndef my_command():\n    with click.progressbar(range(100), label="Processing") as bar:\n        for i in bar:\n            # Do work\n            pass\n    click.echo(click.style("Command completed successfully!", fg="green"))\n'})}),"\n",(0,i.jsx)(n.h3,{id:"3-handle-errors-gracefully",children:"3. Handle Errors Gracefully"}),"\n",(0,i.jsx)(n.p,{children:"Implement error handling that provides clear messages to users:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import sys\n\n@click.command()\ndef my_command():\n    try:\n        # Command implementation\n        result = perform_operation()\n        click.echo(f"Success: {result}")\n    except Exception as e:\n        click.echo(click.style(f"Error: {str(e)}", fg="red"), err=True)\n        sys.exit(1)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"4-support-verbose-mode",children:"4. Support Verbose Mode"}),"\n",(0,i.jsx)(n.p,{children:"Implement verbose output for debugging:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@click.command()\n@click.option("--verbose", "-v", is_flag=True, help="Enable verbose output")\ndef my_command(verbose):\n    if verbose:\n        click.echo("Detailed information: ...")\n    # Command implementation\n'})}),"\n",(0,i.jsx)(n.h3,{id:"5-include-documentation",children:"5. Include Documentation"}),"\n",(0,i.jsx)(n.p,{children:"Ensure your custom commands are well-documented with examples:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@click.command()\n@click.argument("input_file")\n@click.option("--output", "-o", help="Output file path")\ndef process_file(input_file, output):\n    """Process a file and generate output.\n\n    Example usage:\n        dhenara process-file data.json -o results.json\n    """\n    # Command implementation\n'})}),"\n",(0,i.jsx)(n.h2,{id:"integration-with-run-context",children:"Integration with Run Context"}),"\n",(0,i.jsx)(n.p,{children:"Many DAD CLI commands need to interact with the run context. Here's how to access it in your custom commands:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.run import RunContext\nfrom pathlib import Path\n\n@click.command()\n@click.argument("agent_id")\n@click.option("--project-root", help="Project root directory")\ndef my_command(agent_id, project_root):\n    # Initialize run context\n    if not project_root:\n        project_root = find_project_root()\n\n    run_context = RunContext(\n        root_component_id=agent_id,\n        project_root=Path(project_root),\n    )\n\n    # Use run context\n    run_context.setup_run()\n    # Command implementation\n'})}),"\n",(0,i.jsx)(n.h2,{id:"example-creating-a-visualization-command",children:"Example: Creating a Visualization Command"}),"\n",(0,i.jsx)(n.p,{children:"Here's a complete example of adding a visualization command for agent runs:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# dhenara/cli/commands/visualize.py\nimport click\nimport asyncio\nfrom pathlib import Path\nfrom dhenara.agent.run import RunContext\nfrom dhenara.agent.observability.visualization import generate_flow_diagram\n\ndef register(cli):\n    """Register visualization commands."""\n    cli.add_command(visualize)\n\n@click.group("visualize")\ndef visualize():\n    """Commands for visualizing agent execution."""\n    pass\n\n@visualize.command("flow")\n@click.argument("run_id")\n@click.option("--project-root", help="Project root directory")\n@click.option("--output", "-o", help="Output file path")\n@click.option("--format", "-f", type=click.Choice(["svg", "png", "pdf"]), default="svg",\n              help="Output format")\ndef visualize_flow(run_id, project_root, output, format):\n    """Generate a visual diagram of a flow execution.\n\n    Example:\n        dhenara visualize flow run_20230517_123456 -o flow.svg\n    """\n    asyncio.run(_visualize_flow(run_id, project_root, output, format))\n\nasync def _visualize_flow(run_id, project_root, output, format):\n    # Find project root if not specified\n    if not project_root:\n        project_root = find_project_root()\n        if not project_root:\n            click.echo("Error: Could not determine project root. Please specify with --project-root")\n            return\n\n    # Set default output path if not specified\n    if not output:\n        output = f"{run_id}_flow.{format}"\n\n    click.echo(f"Generating flow diagram for run {run_id}...")\n\n    try:\n        # Generate the diagram\n        run_context = RunContext(\n            root_component_id="visualization",\n            project_root=Path(project_root),\n            previous_run_id=run_id\n        )\n\n        diagram_path = await generate_flow_diagram(run_context, output, format)\n        click.echo(click.style(f"Flow diagram generated at: {diagram_path}", fg="green"))\n\n    except Exception as e:\n        click.echo(click.style(f"Error generating diagram: {str(e)}", fg="red"), err=True)\n\n# Helper function to find project root\ndef find_project_root():\n    # Implementation to find project root by looking for .dhenara directory\n    current = Path.cwd()\n    while current != current.parent:\n        if (current / ".dhenara").exists():\n            return current\n        current = current.parent\n    return None\n'})}),"\n",(0,i.jsx)(n.h2,{id:"publishing-your-extension",children:"Publishing Your Extension"}),"\n",(0,i.jsx)(n.p,{children:"There are several ways to make your CLI extension available:"}),"\n",(0,i.jsx)(n.h3,{id:"1-include-in-your-project",children:"1. Include in Your Project"}),"\n",(0,i.jsx)(n.p,{children:"For project-specific commands, add your module to the project's command directory."}),"\n",(0,i.jsx)(n.h3,{id:"2-installable-package",children:"2. Installable Package"}),"\n",(0,i.jsx)(n.p,{children:"Create a separate Python package that developers can install alongside DAD:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# setup.py example for a CLI extension package\nfrom setuptools import setup, find_packages\n\nsetup(\n    name="dhenara-cli-analytics",\n    version="0.1.0",\n    packages=find_packages(),\n    entry_points={\n        "dhenara.cli.plugins": [\n            "analytics=dhenara_cli_analytics:register",\n        ],\n    },\n    install_requires=[\n        "dhenara",\n        "click",\n        # Other dependencies\n    ],\n)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"3-contribute-to-core",children:"3. Contribute to Core"}),"\n",(0,i.jsx)(n.p,{children:"For broadly useful commands, consider contributing them to the core DAD project by submitting a pull request."}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"Extending the DAD CLI allows you to customize and enhance the functionality to meet your specific needs. By following\nthe established patterns and best practices, you can create seamless extensions that integrate with the existing command\nstructure while adding powerful new capabilities."})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var o=t(6540);const i={},a=o.createContext(i);function r(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);