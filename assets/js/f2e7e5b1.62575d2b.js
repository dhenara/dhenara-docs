"use strict";(self.webpackChunkdhenara_docs=self.webpackChunkdhenara_docs||[]).push([[4458],{2278:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"dhenara-agent/guides/tutorials/command-line-coder/part-4","title":"Part 4: Coordinator Flow","description":"In the previous parts, we built a planning flow and an enhanced implementation flow. Now we\'ll create a coordinator flow","source":"@site/docs/dhenara-agent/guides/tutorials/command-line-coder/part-4.md","sourceDirName":"dhenara-agent/guides/tutorials/command-line-coder","slug":"/dhenara-agent/guides/tutorials/command-line-coder/part-4","permalink":"/dhenara-agent/guides/tutorials/command-line-coder/part-4","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5}}');var o=t(4848),i=t(8453);const s={sidebar_position:5},a="Part 4: Coordinator Flow",l={},d=[{value:"Creating the Coordinator Flow",id:"creating-the-coordinator-flow",level:2},{value:"Updating the Agent Definition",id:"updating-the-agent-definition",level:2},{value:"Setting Up the Runner",id:"setting-up-the-runner",level:2},{value:"Running the Complete Coding Assistant",id:"running-the-complete-coding-assistant",level:2},{value:"Understanding the Flow Execution",id:"understanding-the-flow-execution",level:2},{value:"Enhancing the Coding Assistant",id:"enhancing-the-coding-assistant",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"Next Steps",id:"next-steps",level:2}];function c(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"part-4-coordinator-flow",children:"Part 4: Coordinator Flow"})}),"\n",(0,o.jsx)(e.p,{children:"In the previous parts, we built a planning flow and an enhanced implementation flow. Now we'll create a coordinator flow\nthat brings everything together to create a complete command-line coding assistant."}),"\n",(0,o.jsx)(e.p,{children:"The coordinator flow will:"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsx)(e.li,{children:"Run the planner to generate a structured plan"}),"\n",(0,o.jsx)(e.li,{children:"Iterate through each task in the plan"}),"\n",(0,o.jsx)(e.li,{children:"Run the implementation flow for each task in sequence"}),"\n",(0,o.jsx)(e.li,{children:"Handle errors and track progress"}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"creating-the-coordinator-flow",children:"Creating the Coordinator Flow"}),"\n",(0,o.jsx)(e.p,{children:"Let's create a coordinator flow that orchestrates the entire process:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'# src/agents/planner_coder/flows/coordinator.py\nfrom dhenara.agent.dsl import FlowDefinition\nfrom dhenara.agent.dsl.inbuilt.flow_nodes.command import CommandNode, CommandNodeSettings\nfrom dhenara.ai.types import ObjectTemplate\n\nfrom .implementation import implementation_flow\nfrom .planner import planner_flow\n\n# Create the coordinator flow\ncoordinator_flow = FlowDefinition()\n\n# 1. Run the planner to generate tasks\ncoordinator_flow.subflow(\n    "planner",\n    planner_flow,\n    # No variables needed as planner_flow will prompt the user for the task description\n)\n\n# 2. Check if planning was successful\ncoordinator_flow.conditional(\n    id="plan_executor",\n    statement=ObjectTemplate(\n        expression="$expr{py: $hier{planner.plan_generator}.outcome.structured is not None}",\n    ),\n    # If planning was successful, iterate through each task\n    true_branch=FlowDefinition().for_each(\n        id="implementation_loop",\n        statement=ObjectTemplate(\n            expression="$expr{py: $hier{planner.plan_generator}.outcome.structured.implementation_tasks}",\n        ),\n        item_var="task_spec",\n        index_var="task_index",\n        max_iterations=20,  # Limit to 20 tasks for safety\n        body=implementation_flow,  # Use our implementation flow for each task\n    ),\n    # If planning failed, show an error message\n    false_branch=FlowDefinition().node(\n        "no_plan_generated",\n        CommandNode(\n            settings=CommandNodeSettings(\n                commands=[\n                    "echo \'Planning was unsuccessful. Please check the logs and try again.\'",\n                ],\n            )\n        ),\n    ),\n)\n\n# 3. Final summary (optional)\ncoordinator_flow.node(\n    "implementation_summary",\n    CommandNode(\n        settings=CommandNodeSettings(\n            commands=[\n                "echo \'\\n--- Implementation Summary ---\'",\n                "echo \'Plan: $expr{py: $hier{planner.plan_generator}.outcome.structured.title}\'",\n                "echo \'Tasks completed: $expr{py: len($hier{implementation_loop}.outcome.iterations)}\'",\n                "echo \'Validation steps:\'",\n                "echo \'$expr{py: "\\n".join([f"- {step}" for step in $hier{planner.plan_generator}.outcome.structured.validation_steps])}\'",\n                "echo \'\\nImplementation completed. Check the run directory for results.\'",\n            ],\n        )\n    ),\n)\n'})}),"\n",(0,o.jsx)(e.h2,{id:"updating-the-agent-definition",children:"Updating the Agent Definition"}),"\n",(0,o.jsx)(e.p,{children:"Now let's update the main agent.py file to use our coordinator flow:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'# src/agents/planner_coder/agent.py\nfrom dhenara.agent.dsl import AgentDefinition\n\nfrom .flows.coordinator import coordinator_flow\n\n# Main Agent Definition\nagent = AgentDefinition()\nagent.flow(\n    "coordinator_flow",\n    coordinator_flow,\n)\n'})}),"\n",(0,o.jsx)(e.h2,{id:"setting-up-the-runner",children:"Setting Up the Runner"}),"\n",(0,o.jsx)(e.p,{children:"In our runner file, make sure we're using the updated agent:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'# src/runners/planner_coder.py\nfrom dhenara.agent.dsl.events import EventType\nfrom dhenara.agent.run import RunContext\nfrom dhenara.agent.runner import AgentRunner\nfrom dhenara.agent.utils.helpers.terminal import (\n    print_component_completion,\n    print_node_completion,\n)\n\n# Import our agent and handler\nfrom src.agents.planner_coder.agent import agent\nfrom src.agents.planner_coder.handler import planner_coder_input_handler\nfrom src.runners.defs import observability_settings, project_root\n\n# Configure the agent with a root ID\nroot_component_id = "planner_coder_root"\nagent.root_id = root_component_id\n\n# Create run context\nrun_context = RunContext(\n    root_component_id=root_component_id,\n    observability_settings=observability_settings,\n    project_root=project_root,\n    run_root_subpath="agent_planner_coder",\n)\n\n# Register event handlers\nrun_context.register_event_handlers(\n    handlers_map={\n        EventType.node_input_required: planner_coder_input_handler,\n        # Optional notification events\n        EventType.node_execution_completed: print_node_completion,\n        EventType.component_execution_completed: print_component_completion,\n    }\n)\n\n# Create a runner\nrunner = AgentRunner(agent, run_context)\n\n# This enables command line execution\nasync def main():\n    runner.setup_run()\n    await runner.run()\n\n\nif __name__ == "__main__":\n    import asyncio\n\n    asyncio.run(main())\n'})}),"\n",(0,o.jsx)(e.h2,{id:"running-the-complete-coding-assistant",children:"Running the Complete Coding Assistant"}),"\n",(0,o.jsx)(e.p,{children:"Now you can run your complete coding assistant:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"dhenara run agent planner_coder\n"})}),"\n",(0,o.jsx)(e.p,{children:"When you run this command, the following will happen:"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsx)(e.li,{children:"The planner flow will prompt you for a task description"}),"\n",(0,o.jsx)(e.li,{children:"The planner will analyze your codebase and generate a structured plan with multiple tasks"}),"\n",(0,o.jsx)(e.li,{children:"The coordinator will iterate through each task in the plan"}),"\n",(0,o.jsxs)(e.li,{children:["For each task, the implementation flow will:","\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Analyze the specific files needed for that task"}),"\n",(0,o.jsx)(e.li,{children:"Generate code to implement the task"}),"\n",(0,o.jsx)(e.li,{children:"Execute the file operations"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.li,{children:"After all tasks are completed, a summary will be displayed"}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"understanding-the-flow-execution",children:"Understanding the Flow Execution"}),"\n",(0,o.jsx)(e.p,{children:"Let's understand the flow of execution in our coding assistant:"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Coordinator Flow"}),": Orchestrates the entire process"]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Runs the planner flow"}),"\n",(0,o.jsx)(e.li,{children:"Checks if planning was successful"}),"\n",(0,o.jsx)(e.li,{children:"Iterates through each task"}),"\n",(0,o.jsx)(e.li,{children:"Displays a summary"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Planner Flow"}),": Breaks down complex tasks"]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Analyzes the codebase"}),"\n",(0,o.jsx)(e.li,{children:"Creates a structured plan with tasks"}),"\n",(0,o.jsx)(e.li,{children:"Returns the plan to the coordinator"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Implementation Flow"}),": Implements each task"]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Analyzes task-specific context"}),"\n",(0,o.jsx)(e.li,{children:"Generates implementation code"}),"\n",(0,o.jsx)(e.li,{children:"Executes file operations"}),"\n",(0,o.jsx)(e.li,{children:"Returns the result to the coordinator"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"enhancing-the-coding-assistant",children:"Enhancing the Coding Assistant"}),"\n",(0,o.jsx)(e.p,{children:"There are many ways to enhance our coding assistant further:"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Error Handling"}),": Add better error handling to recover from failures in specific tasks"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Parallel Execution"}),": Implement parallel execution for independent tasks"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"User Feedback"}),": Add user feedback prompts at key points in the process"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Git Integration"}),": Add automatic Git commits after each task or at the end"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Testing"}),": Add automated testing of the implemented code"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Progress Tracking"}),": Implement a progress tracking UI"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,o.jsx)(e.p,{children:"Congratulations! You've built a complete command-line coding assistant using the Dhenara Agent DSL framework. This\nassistant can:"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsx)(e.li,{children:"Accept complex coding tasks from users"}),"\n",(0,o.jsx)(e.li,{children:"Break them down into manageable steps"}),"\n",(0,o.jsx)(e.li,{children:"Implement each step with precise file operations"}),"\n",(0,o.jsx)(e.li,{children:"Track progress and provide a summary"}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"This tutorial has demonstrated the power of the DAD framework for building complex AI agents. The modular design allows\nyou to add new capabilities or modify existing ones as needed."}),"\n",(0,o.jsx)(e.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,o.jsx)(e.p,{children:"Now that you've built your coding assistant, here are some ways to explore further:"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Try Different Tasks"}),": Test your assistant with different types of coding tasks"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Customize for Specific Languages"}),": Optimize your assistant for specific programming languages"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Add Visualization"}),": Implement visualization for the planning and implementation process"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Explore Advanced Features"}),": Check out the advanced guides in the DAD documentation"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Connect to Dhenara Hub"}),": Integrate your agent with Dhenara Hub for monitoring and management"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"Thank you for following this tutorial! We hope you've gained a deeper understanding of how to build practical AI agents\nusing the Dhenara Agent DSL framework."})]})}function h(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(c,{...n})}):c(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>a});var r=t(6540);const o={},i=r.createContext(o);function s(n){const e=r.useContext(i);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:s(n.components),r.createElement(i.Provider,{value:e},n.children)}}}]);