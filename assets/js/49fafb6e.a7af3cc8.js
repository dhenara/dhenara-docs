"use strict";(self.webpackChunkdhenara_docs=self.webpackChunkdhenara_docs||[]).push([[294],{6110:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>s,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"samples/image-gen/image_todo","title":"Quick Start with Dhenara","description":"This guide will help you get up and running with Dhenara quickly. We\'ll create a simple application that interacts with an AI model to generate text.","source":"@site/docs/samples/image-gen/image_todo.md","sourceDirName":"samples/image-gen","slug":"/samples/image-gen/image_todo","permalink":"/samples/image-gen/image_todo","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3}}');var i=t(4848),o=t(8453);const s={sidebar_position:3},r="Quick Start with Dhenara",l={},d=[{value:"Setup",id:"setup",level:2},{value:"Working with Images",id:"working-with-images",level:2},{value:"Next Steps",id:"next-steps",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"quick-start-with-dhenara",children:"Quick Start with Dhenara"})}),"\n",(0,i.jsx)(n.p,{children:"This guide will help you get up and running with Dhenara quickly. We'll create a simple application that interacts with an AI model to generate text."}),"\n",(0,i.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,i.jsx)(n.p,{children:"First, make sure you have Dhenara installed:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pip install dhenara\n"})}),"\n",(0,i.jsx)(n.p,{children:"You'll need API credentials for at least one of the supported AI providers. For this example, we'll use OpenAI."}),"\n",(0,i.jsx)(n.h2,{id:"working-with-images",children:"Working with Images"}),"\n",(0,i.jsx)(n.p,{children:"Dhenara also supports image generation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import asyncio\nimport base64\nfrom PIL import Image\nimport io\nfrom dhenara.ai import AIModelClient, AIModelCallConfig\nfrom dhenara.ai.types.genai.ai_model import AIModelAPI, AIModelEndpoint\nfrom dhenara.ai.types.external_api import AIModelAPIProviderEnum\nfrom dhenara.ai.types.genai.foundation_models import FoundationModelFns\n\nasync def main():\n    # Get a pre-configured image generation model\n    dalle = FoundationModelFns.get_foundation_model("dall-e-3")\n\n    # Set up API credentials\n    api = AIModelAPI(\n        provider=AIModelAPIProviderEnum.OPEN_AI,\n        api_key="your-api-key-here"\n    )\n\n    # Create an endpoint\n    endpoint = AIModelEndpoint(\n        api=api,\n        ai_model=dalle\n    )\n\n    # Configure the call\n    config = AIModelCallConfig(\n        options={\n            "size": "1024x1024",\n            "quality": "standard",\n            "style": "vivid",\n            "response_format": "b64_json"\n        }\n    )\n\n    # Generate an image\n    async with AIModelClient(endpoint, config) as client:\n        response = await client.generate(\n            prompt="A futuristic city with flying cars and digital billboards"\n        )\n\n        if response.image_response:\n            # Get the base64 image data\n            image_content = response.image_response.choices[0].contents[0]\n\n            if image_content.content_format == "base64":\n                # Convert base64 to image\n                image_bytes = base64.b64decode(image_content.content_b64_json)\n                image = Image.open(io.BytesIO(image_bytes))\n\n                # Save the image\n                image.save("generated_image.png")\n                print("Image saved as generated_image.png")\n\n# Run the async function\nasyncio.run(main())\n'})}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n"]})}function c(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var a=t(6540);const i={},o=a.createContext(i);function s(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);