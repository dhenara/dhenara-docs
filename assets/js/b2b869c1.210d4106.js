"use strict";(self.webpackChunkdhenara_docs=self.webpackChunkdhenara_docs||[]).push([[9270],{5397:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"dhenara-agent/architecture/overview","title":"Architecture Overview","description":"Dhenara Agent DSL (DAD) implements a sophisticated architecture designed for flexibility, observability, and","source":"@site/docs/dhenara-agent/architecture/overview.md","sourceDirName":"dhenara-agent/architecture","slug":"/dhenara-agent/architecture/overview","permalink":"/dhenara-agent/architecture/overview","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"dhenaraAgentSidebar","previous":{"title":"Image Generation Agent","permalink":"/dhenara-agent/examples/image-agent"},"next":{"title":"Component Model","permalink":"/dhenara-agent/architecture/component-model"}}');var t=i(4848),r=i(8453);const o={sidebar_position:1},l="Architecture Overview",c={},a=[{value:"Architectural Principles",id:"architectural-principles",level:2},{value:"System Architecture",id:"system-architecture",level:2},{value:"Core Architectural Components",id:"core-architectural-components",level:2},{value:"1. Domain-Specific Language (DSL)",id:"1-domain-specific-language-dsl",level:3},{value:"2. Component System",id:"2-component-system",level:3},{value:"3. Node System",id:"3-node-system",level:3},{value:"4. Run System",id:"4-run-system",level:3},{value:"5. Observability Stack",id:"5-observability-stack",level:3},{value:"6. Resource Management",id:"6-resource-management",level:3},{value:"Execution Flow",id:"execution-flow",level:2},{value:"Directory Structure",id:"directory-structure",level:2},{value:"Integration with Dhenara AI",id:"integration-with-dhenara-ai",level:2},{value:"Extensibility",id:"extensibility",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"architecture-overview",children:"Architecture Overview"})}),"\n",(0,t.jsx)(n.p,{children:"Dhenara Agent DSL (DAD) implements a sophisticated architecture designed for flexibility, observability, and\nreproducibility in AI agent operations. This document provides a high-level overview of the architecture and its key\ncomponents."}),"\n",(0,t.jsx)(n.h2,{id:"architectural-principles",children:"Architectural Principles"}),"\n",(0,t.jsx)(n.p,{children:"DAD's architecture is built around several key principles:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Component-Based Design"}),": Everything is a component, allowing for modular composition"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Separation of Concerns"}),": Clear separation between definition and execution"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Hierarchical Composition"}),": Components can contain other components"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Event-Driven Communication"}),": Components communicate through events"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Observability First"}),": Built-in tracing, logging, and metrics"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Reproducibility"}),": Deterministic execution with proper isolation"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"system-architecture",children:"System Architecture"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"+----------------------------------------+\n|   Dhenara Agent DSL (DAD)              |\n+----------------------------------------+\n|                                        |\n|  +----------------------------------+  |\n|  |          Agent Platform          |  |\n|  |                                  |  |\n|  |  +------------+ +------------+   |  |\n|  |  |   Agent 1  | |   Agent 2  |   |  |\n|  |  +------------+ +------------+   |  |\n|  |          |            |          |  |\n|  |  +------------+ +------------+   |  |\n|  |  |   Flows    | |   Flows    |   |  |\n|  |  +------------+ +------------+   |  |\n|  |          |            |          |  |\n|  |  +------------+ +------------+   |  |\n|  |  |   Nodes    | |   Nodes    |   |  |\n|  |  +------------+ +------------+   |  |\n|  |                                  |  |\n|  +----------------------------------+  |\n|                    |                   |\n|  +----------------------------------+  |\n|  |           Event System           |  |\n|  +----------------------------------+  |\n|                    |                   |\n|  +----------------------------------+  |\n|  |        Execution Context         |  |\n|  +----------------------------------+  |\n|                    |                   |\n|  +----------------------------------+  |\n|  |       Template Processing        |  |\n|  +----------------------------------+  |\n|                    |                   |\n|  +----------------------------------+  |\n|  |           Core Dhenara-AI        |  |\n|  +----------------------------------+  |\n|                                        |\n+----------------------------------------+\n"})}),"\n",(0,t.jsx)(n.h2,{id:"core-architectural-components",children:"Core Architectural Components"}),"\n",(0,t.jsx)(n.h3,{id:"1-domain-specific-language-dsl",children:"1. Domain-Specific Language (DSL)"}),"\n",(0,t.jsx)(n.p,{children:"The heart of DAD is a declarative DSL that allows you to define:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Components"}),": High-level constructs like agents and flows"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Nodes"}),": Individual execution units with specific functionality"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Connections"}),": How data flows between nodes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Settings"}),": Configuration for components and nodes"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This DSL is expressed through Python classes and methods but maintains a clear, domain-specific structure."}),"\n",(0,t.jsx)(n.h3,{id:"2-component-system",children:"2. Component System"}),"\n",(0,t.jsx)(n.p,{children:"The component system includes:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"ComponentDefinition"}),": Base class for defining components"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"FlowDefinition"}),": Defines a directed flow of nodes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"AgentDefinition"}),": Higher-level component that can coordinate multiple flows"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Component Execution"}),": The runtime mechanisms for executing components"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"3-node-system",children:"3. Node System"}),"\n",(0,t.jsx)(n.p,{children:"Nodes are the fundamental execution units in DAD:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Node Types"}),": Pre-defined node types for common operations (AI models, file operations, etc.)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Node Settings"}),": Configuration options for each node type"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Node Inputs/Outputs"}),": Typed data flowing between nodes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Node Execution"}),": Runtime execution of node operations"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"4-run-system",children:"4. Run System"}),"\n",(0,t.jsx)(n.p,{children:"The run system manages execution contexts and environments:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"RunContext"}),": Tracks execution state, directories, and artifacts"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"ExecutionContext"}),": Manages the context of a specific execution"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"IsolatedExecution"}),": Provides isolation between different runs"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"RunEnvParams"}),": Encapsulates run environment parameters"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"5-observability-stack",children:"5. Observability Stack"}),"\n",(0,t.jsx)(n.p,{children:"A comprehensive observability system that includes:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Tracing"}),": End-to-end tracing of execution paths"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Logging"}),": Detailed logging of operations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Metrics"}),": Collection of performance and operational metrics"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Dashboards"}),": Integration with visualization tools (Jaeger, Zipkin)"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"6-resource-management",children:"6. Resource Management"}),"\n",(0,t.jsx)(n.p,{children:"Manages AI and computational resources:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"ResourceConfig"}),": Configuration for AI models and APIs"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"ResourceRegistry"}),": Registry of available resources"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Model Management"}),": Handling of AI model specifications"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"execution-flow",children:"Execution Flow"}),"\n",(0,t.jsx)(n.p,{children:"The overall flow of execution in DAD follows this pattern:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Definition"}),": Components, flows, and nodes are defined using the DSL"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Initialization"}),": A RunContext is created to manage the execution environment"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Execution"}),": ComponentRunner executes the defined components"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Node Processing"}),": Each node in the flow processes inputs and produces outputs"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Observation"}),": All operations are traced, logged, and measured"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Artifact Management"}),": Results and artifacts are stored in a structured format"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"directory-structure",children:"Directory Structure"}),"\n",(0,t.jsx)(n.p,{children:"The DAD codebase is organized into these main directories:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"dhenara/agent/dsl/"}),": Core DSL definitions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"dhenara/agent/runner/"}),": Component and execution runners"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"dhenara/agent/run/"}),": Run context and execution environment"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"dhenara/agent/observability/"}),": Tracing, logging, and metrics"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"dhenara/agent/types/"}),": Type definitions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"dhenara/agent/utils/"}),": Utility functions and helpers"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"dhenara/agent/config/"}),": Configuration management"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"integration-with-dhenara-ai",children:"Integration with Dhenara AI"}),"\n",(0,t.jsx)(n.p,{children:"DAD builds on top of the core Dhenara AI package, which provides:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Unified API for different LLM providers"}),"\n",(0,t.jsx)(n.li,{children:"Type-safe interfaces for AI model interactions"}),"\n",(0,t.jsx)(n.li,{children:"Resource configuration for AI models"}),"\n",(0,t.jsx)(n.li,{children:"Streaming and async support"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"DAD extends these capabilities with the component model, execution system, and observability features to create a\ncomplete agent development framework."}),"\n",(0,t.jsx)(n.h2,{id:"extensibility",children:"Extensibility"}),"\n",(0,t.jsx)(n.p,{children:"The architecture is designed for extensibility at multiple levels:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Custom Node Types"}),": Implement new node types for specialized functionality"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Custom Components"}),": Define new component types beyond flows and agents"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Custom Observability"}),": Extend the observability system with additional collectors"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Resource Extensions"}),": Add support for new AI model providers and resource types"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This modular design allows DAD to grow and adapt to new requirements and use cases while maintaining a consistent\nprogramming model."}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsx)(n.p,{children:"To dive deeper into the architecture, explore:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"component-model",children:"Component Model"}),": Understand how components are defined and composed"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"execution-model",children:"Execution Model"}),": Learn how components are executed and managed"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"../components/nodes",children:"Core Components"}),": Explore the built-in node types and their capabilities"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var s=i(6540);const t={},r=s.createContext(t);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);