"use strict";(self.webpackChunkdhenara_docs=self.webpackChunkdhenara_docs||[]).push([[4461],{194:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>t,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"dhenara-agent/features/resource-management","title":"Resource Management","description":"Overview","source":"@site/docs/dhenara-agent/features/resource-management.md","sourceDirName":"dhenara-agent/features","slug":"/dhenara-agent/features/resource-management","permalink":"/dhenara-agent/features/resource-management","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Resource Management"},"sidebar":"dhenaraAgentSidebar","previous":{"title":"Templating System","permalink":"/dhenara-agent/features/templating-system"},"next":{"title":"Observability","permalink":"/dhenara-agent/features/observability"}}');var s=r(4848),i=r(8453);const t={title:"Resource Management"},a="Resource Management",c={},l=[{value:"Overview",id:"overview",level:2},{value:"Core Resource Management Components",id:"core-resource-management-components",level:2},{value:"ResourceConfig",id:"resourceconfig",level:3},{value:"ResourceRegistry",id:"resourceregistry",level:3},{value:"Resource Configuration in Nodes",id:"resource-configuration-in-nodes",level:2},{value:"AI Model Configuration",id:"ai-model-configuration",level:2},{value:"Credential Management",id:"credential-management",level:2},{value:"Resource Resolution",id:"resource-resolution",level:2},{value:"Resource Profiles",id:"resource-profiles",level:2},{value:"Best Practices",id:"best-practices",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"resource-management",children:"Resource Management"})}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"Resource management in Dhenara Agent DSL (DAD) provides a structured approach to managing AI models, API credentials,\nand other execution resources. The system allows for flexible configuration and runtime overrides of resources, making\nit easier to work with different environments and providers."}),"\n",(0,s.jsx)(n.h2,{id:"core-resource-management-components",children:"Core Resource Management Components"}),"\n",(0,s.jsx)(n.h3,{id:"resourceconfig",children:"ResourceConfig"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"ResourceConfig"})," class is the central component for managing resources, particularly AI model configurations:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from dhenara.ai.types.resource import ResourceConfig\n\n# Create a resource configuration\nresource_config = ResourceConfig()\n\n# Load from a credentials file\nresource_config.load_from_file(\n    credentials_file="~/.dhenara/credentials.yaml",\n    init_endpoints=True,\n)\n'})}),"\n",(0,s.jsx)(n.p,{children:"The credentials file typically contains API keys, endpoints, and default settings for different models and providers."}),"\n",(0,s.jsx)(n.h3,{id:"resourceregistry",children:"ResourceRegistry"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"ResourceRegistry"})," manages resources of a specific type, allowing for global registration and thread-local\noverrides:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.run.registry import resource_config_registry, model_registry\n\n# Register a resource configuration\nresource_config_registry.register("default", my_resource_config)\n\n# Get a registered configuration\nconfig = resource_config_registry.get("default")\n\n# Thread-local override for a specific context\nwith resource_config_registry.override("test", test_resource_config):\n    # Within this context, "test" config is used\n    config = resource_config_registry.get("test")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"resource-configuration-in-nodes",children:"Resource Configuration in Nodes"}),"\n",(0,s.jsxs)(n.p,{children:["Nodes, particularly ",(0,s.jsx)(n.code,{children:"AIModelNode"}),", use resources for execution:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.dsl import AIModelNode\nfrom dhenara.ai.types import ResourceConfigItem\n\n# Create a node with specific resource requirements\nai_node = AIModelNode(\n    resources=ResourceConfigItem.with_model("claude-3-5-sonnet"),\n    # Other settings...\n)\n\n# Or use multiple models\nai_node = AIModelNode(\n    resources=ResourceConfigItem.with_models(["claude-3-5-sonnet", "gpt-4-turbo"]),\n    # Other settings...\n)\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"ResourceConfigItem"})," specifies what resources the node needs to execute."]}),"\n",(0,s.jsx)(n.h2,{id:"ai-model-configuration",children:"AI Model Configuration"}),"\n",(0,s.jsx)(n.p,{children:"AI models are a specific type of resource managed by DAD:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from dhenara.ai.types import AIModel, AIModelCallConfig\n\n# Define a model configuration\nmodel = AIModel(\n    model_id="claude-3-5-sonnet",\n    provider="anthropic",\n    api_key="${ANTHROPIC_API_KEY}",  # Environment variable reference\n    endpoint="https://api.anthropic.com/v1/messages",\n    default_call_config=AIModelCallConfig(\n        temperature=0.7,\n        max_tokens=4000,\n        top_p=0.9,\n    ),\n)\n\n# Register the model\nmodel_registry.register("claude-3-5-sonnet", model)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"credential-management",children:"Credential Management"}),"\n",(0,s.jsx)(n.p,{children:"DAD provides several ways to manage credentials:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Configuration Files"}),": YAML files with API keys and endpoints"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Environment Variables"}),": References using ",(0,s.jsx)(n.code,{children:"${ENV_VAR_NAME}"})," syntax"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Runtime Configuration"}),": Programmatic configuration at startup"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Example credentials file:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# ~/.dhenara/credentials.yaml\napi_keys:\n  openai: ${OPENAI_API_KEY}\n  anthropic: ${ANTHROPIC_API_KEY}\n  google: ${GOOGLE_API_KEY}\n\nendpoints:\n  openai: 'https://api.openai.com/v1'\n  anthropic: 'https://api.anthropic.com/v1'\n  google: 'https://generativelanguage.googleapis.com/v1'\n\nresource_paths:\n  models: '~/.dhenara/models'\n"})}),"\n",(0,s.jsx)(n.h2,{id:"resource-resolution",children:"Resource Resolution"}),"\n",(0,s.jsx)(n.p,{children:"When a node requires resources, DAD resolves them in this order:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Thread-local override in the registry"}),"\n",(0,s.jsx)(n.li,{children:"Global registry entry"}),"\n",(0,s.jsx)(n.li,{children:"Default resource configuration"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This allows for flexible configuration at different levels:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Global level - applies to all runs by default\nresource_config_registry.register("default", default_resource_config)\n\n# Run level - specific to a single run\nrun_context.resource_config = custom_resource_config\n\n# Node level - specific to a single node\nnode = AIModelNode(\n    resources=ResourceConfigItem.with_model("specific-model-config"),\n    # Other settings...\n)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"resource-profiles",children:"Resource Profiles"}),"\n",(0,s.jsx)(n.p,{children:"DAD supports the concept of resource profiles for different environments:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Get a specific resource profile\ndev_config = run_context.get_resource_config("development")\nstaging_config = run_context.get_resource_config("staging")\nprod_config = run_context.get_resource_config("production")\n'})}),"\n",(0,s.jsx)(n.p,{children:"This allows for different resource configurations in different environments while maintaining the same code."}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use Environment Variables"}),": Store sensitive credentials as environment variables, not hardcoded values"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Resource Profiles"}),": Create separate resource profiles for different environments (dev, test, prod)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Default Fallbacks"}),": Configure sensible defaults for resources"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Thread Isolation"}),": Use thread-local overrides for parallel execution with different resources"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Resource Validation"}),": Validate resources are available before execution begins"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"By following these practices and using DAD's resource management system, you can create flexible, secure agent workflows\nthat can work across different environments and with multiple AI providers."})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>a});var o=r(6540);const s={},i=o.createContext(s);function t(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);