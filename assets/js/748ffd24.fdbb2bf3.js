"use strict";(self.webpackChunkdhenara_docs=self.webpackChunkdhenara_docs||[]).push([[3912],{4541:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"dhenara-ai/features/streaming-simplified","title":"Streaming Simplified","description":"Dhenara provides a streamlined approach to working with streaming responses from AI models, making it significantly","source":"@site/docs/dhenara-ai/features/streaming-simplified.md","sourceDirName":"dhenara-ai/features","slug":"/dhenara-ai/features/streaming-simplified","permalink":"/dhenara-ai/features/streaming-simplified","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Streaming Simplified"},"sidebar":"dhenaraAiSidebar","previous":{"title":"Usage & Charge Data","permalink":"/dhenara-ai/features/usage-and-charge"},"next":{"title":"Type Safety","permalink":"/dhenara-ai/features/type-safety"}}');var s=i(4848),r=i(8453);const a={title:"Streaming Simplified"},o="Streaming Simplicity in Dhenara",l={},c=[{value:"The Challenge with Streaming",id:"the-challenge-with-streaming",level:2},{value:"How Dhenara Simplifies Streaming",id:"how-dhenara-simplifies-streaming",level:2},{value:"Automatic Consolidation of Streaming Content",id:"automatic-consolidation-of-streaming-content",level:3},{value:"Key Streaming Benefits",id:"key-streaming-benefits",level:3},{value:"Configuration Options",id:"configuration-options",level:2},{value:"Comparison with Other Libraries",id:"comparison-with-other-libraries",level:2},{value:"Real-World Benefits",id:"real-world-benefits",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"streaming-simplicity-in-dhenara",children:"Streaming Simplicity in Dhenara"})}),"\n",(0,s.jsx)(n.p,{children:"Dhenara provides a streamlined approach to working with streaming responses from AI models, making it significantly\neasier to implement real-time AI interactions while maintaining access to complete responses."}),"\n",(0,s.jsx)(n.h2,{id:"the-challenge-with-streaming",children:"The Challenge with Streaming"}),"\n",(0,s.jsx)(n.p,{children:"When working with large language models, streaming responses are essential for creating responsive user experiences.\nHowever, traditional streaming implementations introduce several challenges:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Content Management"}),": You need to track and accumulate streaming chunks"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"State Management"}),": Maintaining state across streaming chunks becomes complex"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Final Response Access"}),": Often you need both incremental updates AND the final complete response"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Consistent Error Handling"}),": Errors during streaming need special handling"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"how-dhenara-simplifies-streaming",children:"How Dhenara Simplifies Streaming"}),"\n",(0,s.jsx)(n.p,{children:"Dhenara addresses these challenges with a built-in streaming management system that handles the complexity for you."}),"\n",(0,s.jsx)(n.h3,{id:"automatic-consolidation-of-streaming-content",children:"Automatic Consolidation of Streaming Content"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from dhenara.ai import AIModelClient\nfrom dhenara.ai.types import AIModelCallConfig\n\n# Create client with streaming enabled\nclient = AIModelClient(\n    model_endpoint=my_endpoint,\n    config=AIModelCallConfig(streaming=True)\n)\n\n# Generate a response with streaming\nresponse = await client.generate_async(\n    prompt={"role": "user", "content": "Tell me a story about a robot learning to paint."}\n)\n\n# You get BOTH stream chunks AND the final complete response\nasync for chunk, final_response in response.async_stream_generator:\n    if chunk:\n        # Process streaming chunk\n        print(chunk.data.choice_deltas[0].content_deltas[0].text_delta, end="")\n\n    if final_response:\n        # Process the complete, consolidated response\n        print("\\n\\nFINAL COMPLETE RESPONSE:")\n        print(final_response.chat_response.choices[0].contents[0].text)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"key-streaming-benefits",children:"Key Streaming Benefits"}),"\n",(0,s.jsx)(n.p,{children:"Dhenara provides several advantages for streaming use cases:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Buffered Final Response"}),": Dhenara automatically accumulates streaming chunks and provides the complete response\nonce streaming is finished."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Simple API"}),": The same API works for both streaming and non-streaming requests, making your code more maintainable."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Unified Error Handling"}),": Errors during streaming are handled consistently with non-streaming requests."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Automatic Content Consolidation"}),": Streaming content is automatically combined into a final response, eliminating\nthe need to manually reconstruct content."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Provider-Agnostic"}),": Works consistently across different providers (OpenAI, Anthropic, Google, etc.)"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,s.jsx)(n.p,{children:"Streaming behavior can be easily configured:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# In your dhenara_config.py file\nENABLE_STREAMING_CONSOLIDATION = True  # Default is True\n"})}),"\n",(0,s.jsx)(n.p,{children:"Or at runtime:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from dhenara.ai.config import settings\n\n# Disable streaming consolidation if needed\nsettings.ENABLE_STREAMING_CONSOLIDATION = False\n"})}),"\n",(0,s.jsx)(n.h2,{id:"comparison-with-other-libraries",children:"Comparison with Other Libraries"}),"\n",(0,s.jsx)(n.p,{children:"Unlike many other AI integration libraries, Dhenara's streaming solution provides both the incremental updates and the\ncomplete final response without additional code:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Feature"}),(0,s.jsx)(n.th,{children:"Dhenara"}),(0,s.jsx)(n.th,{children:"LangChain"}),(0,s.jsx)(n.th,{children:"Direct API"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Streaming Support"}),(0,s.jsx)(n.td,{children:"\u2705"}),(0,s.jsx)(n.td,{children:"\u2705"}),(0,s.jsx)(n.td,{children:"\u2705"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Automatic Content Consolidation"}),(0,s.jsx)(n.td,{children:"\u2705"}),(0,s.jsx)(n.td,{children:"\u274c"}),(0,s.jsx)(n.td,{children:"\u274c"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Final Response Without Manual Tracking"}),(0,s.jsx)(n.td,{children:"\u2705"}),(0,s.jsx)(n.td,{children:"\u274c"}),(0,s.jsx)(n.td,{children:"\u274c"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Consistent API Between Stream/Non-Stream"}),(0,s.jsx)(n.td,{children:"\u2705"}),(0,s.jsx)(n.td,{children:"\u26a0\ufe0f Partial"}),(0,s.jsx)(n.td,{children:"\u274c"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Provider-Agnostic Implementation"}),(0,s.jsx)(n.td,{children:"\u2705"}),(0,s.jsx)(n.td,{children:"\u2705"}),(0,s.jsx)(n.td,{children:"\u274c"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"real-world-benefits",children:"Real-World Benefits"}),"\n",(0,s.jsx)(n.p,{children:"The automatic consolidation feature is particularly valuable for:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"User Interfaces"}),": Display streaming text for responsiveness while storing the complete response for later use."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Post-Processing"}),": Apply operations on the complete response after streaming finishes."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Caching"}),": Cache the full consolidated response without reimplementing accumulation logic."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Error Recovery"}),": If a streaming session is interrupted, you still have access to the content received so far."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(n.p,{children:"Dhenara's approach to streaming significantly reduces the complexity of working with real-time AI responses. By handling\nthe state management and content accumulation for you, Dhenara lets you focus on creating great user experiences instead\nof managing streaming logic."}),"\n",(0,s.jsx)(n.p,{children:"With the automatic consolidation feature, you get the best of both worlds: the responsiveness of streaming and the\nconvenience of complete responses, all with minimal code."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var t=i(6540);const s={},r=t.createContext(s);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);