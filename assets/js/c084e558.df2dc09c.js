"use strict";(self.webpackChunkdhenara_docs=self.webpackChunkdhenara_docs||[]).push([[5719],{1651:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"dhenara-agent/concepts/observability","title":"Observability","description":"Observability is a core feature of Dhenara Agent DSL (DAD), providing comprehensive tracking, logging, and metrics for","source":"@site/docs/dhenara-agent/concepts/observability.md","sourceDirName":"dhenara-agent/concepts","slug":"/dhenara-agent/concepts/observability","permalink":"/dhenara-agent/concepts/observability","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"dhenaraAgentSidebar","previous":{"title":"Execution Context","permalink":"/dhenara-agent/concepts/execution-context"},"next":{"title":"Run System","permalink":"/dhenara-agent/concepts/run-system"}}');var t=i(4848),a=i(8453);const s={},o="Observability",l={},c=[{value:"Observability Configuration",id:"observability-configuration",level:2},{value:"Enabling and Disabling Tracing",id:"enabling-and-disabling-tracing",level:2},{value:"Disabling Tracing",id:"disabling-tracing",level:3},{value:"Enabling Tracing with Different Exporters",id:"enabling-tracing-with-different-exporters",level:3},{value:"Using Tracing Visualization Tools with Docker",id:"using-tracing-visualization-tools-with-docker",level:2},{value:"Docker Installation Tips",id:"docker-installation-tips",level:3},{value:"Using Jaeger for Trace Visualization",id:"using-jaeger-for-trace-visualization",level:3},{value:"Running Jaeger with Docker Compose",id:"running-jaeger-with-docker-compose",level:4},{value:"Jaeger Docker Compose File",id:"jaeger-docker-compose-file",level:5},{value:"Sending Traces to Jaeger",id:"sending-traces-to-jaeger",level:4},{value:"Using Zipkin for Trace Visualization",id:"using-zipkin-for-trace-visualization",level:3},{value:"Running Zipkin with Docker Compose",id:"running-zipkin-with-docker-compose",level:4},{value:"Zipkin Docker Compose File",id:"zipkin-docker-compose-file",level:5},{value:"Sending Traces to Zipkin",id:"sending-traces-to-zipkin",level:4},{value:"Using the Simple Built-in Dashboard",id:"using-the-simple-built-in-dashboard",level:2},{value:"Core Observability Components",id:"core-observability-components",level:2},{value:"1. Tracing System",id:"1-tracing-system",level:3},{value:"2. Logging System",id:"2-logging-system",level:3},{value:"3. Metrics System",id:"3-metrics-system",level:3},{value:"Tracing Profiles",id:"tracing-profiles",level:2},{value:"Complete Example: Running an Agent with Tracing and Visualization",id:"complete-example-running-an-agent-with-tracing-and-visualization",level:2},{value:"Best Practices",id:"best-practices",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"observability",children:"Observability"})}),"\n",(0,t.jsxs)(n.p,{children:["Observability is a core feature of Dhenara Agent DSL (DAD), providing comprehensive tracking, logging, and metrics for\nall agent activities. DAD includes built-in observability capabilities at no additional cost, leveraging the open-source\n",(0,t.jsx)(n.a,{href:"https://opentelemetry.io/",children:"OpenTelemetry"})," framework. ",(0,t.jsx)(n.strong,{children:"Yes, its truly free"}),". You can configure observability with a\nfew simple steps and connect to your preferred observability services."]}),"\n",(0,t.jsx)(n.p,{children:"Free OpenTelemetry-compatible visualization tools such as Jaeger and Zipkin can be easily integrated with DAD (as\ndetailed in later sections)."}),"\n",(0,t.jsxs)(n.p,{children:["We are also developing our own platform ",(0,t.jsx)(n.code,{children:"Dhenara-Hub"})," which will offer not just observability features, but a broader\nset of agent management capabilities."]}),"\n",(0,t.jsx)(n.h2,{id:"observability-configuration",children:"Observability Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["Observability is configured through ",(0,t.jsx)(n.code,{children:"ObservabilitySettings"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.observability.types import ObservabilitySettings\nfrom dhenara.agent.observability import configure_observability\nimport logging\n\n# Create settings\nsettings = ObservabilitySettings(\n    service_name="my-agent-app",\n    tracing_exporter_type="file",  # "console", "file", "otlp", "jaeger", "zipkin"\n    metrics_exporter_type="file",\n    logging_exporter_type="file",\n    trace_file_path="/path/to/trace.jsonl",\n    metrics_file_path="/path/to/metrics.jsonl",\n    log_file_path="/path/to/logs.jsonl",\n    root_log_level=logging.INFO,\n)\n\n# Apply configuration\nconfigure_observability(settings)\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"RunContext"})," automatically configures observability based on run parameters."]}),"\n",(0,t.jsx)(n.h2,{id:"enabling-and-disabling-tracing",children:"Enabling and Disabling Tracing"}),"\n",(0,t.jsxs)(n.p,{children:["The tracing system can be enabled or disabled through the ",(0,t.jsx)(n.code,{children:"ObservabilitySettings"})," configuration. Disabling tracing is\nhelpful in production environments where performance is critical or in testing scenarios where full observability is not\nneeded."]}),"\n",(0,t.jsx)(n.h3,{id:"disabling-tracing",children:"Disabling Tracing"}),"\n",(0,t.jsxs)(n.p,{children:["To disable tracing, set the ",(0,t.jsx)(n.code,{children:"enable_tracing"})," flag to ",(0,t.jsx)(n.code,{children:"False"})," in your ",(0,t.jsx)(n.code,{children:"ObservabilitySettings"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.observability.types import ObservabilitySettings\nfrom dhenara.agent.observability import configure_observability\n\n# Disable tracing while keeping other observability features enabled\nsettings = ObservabilitySettings(\n    service_name="my-agent-app",\n    enable_tracing=False,  # Disable tracing\n    enable_metrics=True,   # Keep metrics enabled\n    enable_logging=True,   # Keep logging enabled\n)\n\nconfigure_observability(settings)\n'})}),"\n",(0,t.jsxs)(n.p,{children:["When tracing is disabled, the ",(0,t.jsx)(n.code,{children:"is_tracing_disabled()"})," function will return ",(0,t.jsx)(n.code,{children:"True"}),", and any code guarded by this check\nwill be skipped:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.observability.tracing import is_tracing_disabled, get_tracer\n\n# Check if tracing is disabled before performing trace operations\nif not is_tracing_disabled():\n    tracer = get_tracer("my_component")\n    with tracer.start_as_current_span("my_operation") as span:\n        # Add trace details\n        span.set_attribute("key", "value")\n'})}),"\n",(0,t.jsx)(n.h3,{id:"enabling-tracing-with-different-exporters",children:"Enabling Tracing with Different Exporters"}),"\n",(0,t.jsx)(n.p,{children:"DAD supports multiple exporters for sending trace data to different visualization and analysis systems:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Console Exporter"}),": Outputs traces to the console (good for development)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"File Exporter"}),": Writes traces to JSON line format files (default)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"OTLP Exporter"}),": Sends traces using OpenTelemetry Protocol"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Jaeger Exporter"}),": Sends traces directly to Jaeger"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Zipkin Exporter"}),": Sends traces directly to Zipkin"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"To configure a specific exporter:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Configure for Jaeger export\nsettings = ObservabilitySettings(\n    service_name="my-agent-app",\n    tracing_exporter_type="jaeger",  # Use Jaeger exporter\n    jaeger_endpoint="http://localhost:14268/api/traces",\n)\n\n# Or for Zipkin\nsettings = ObservabilitySettings(\n    service_name="my-agent-app",\n    tracing_exporter_type="zipkin",  # Use Zipkin exporter\n    zipkin_endpoint="http://localhost:9411/api/v2/spans",\n)\n\nconfigure_observability(settings)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"using-tracing-visualization-tools-with-docker",children:"Using Tracing Visualization Tools with Docker"}),"\n",(0,t.jsx)(n.p,{children:"DAD includes built-in support for launching trace visualization tools using Docker, making it easy to analyze your\nagent's execution in detail without complex setup."}),"\n",(0,t.jsx)(n.h3,{id:"docker-installation-tips",children:"Docker Installation Tips"}),"\n",(0,t.jsx)(n.p,{children:"Before using the Docker-based visualization tools, you need to have Docker installed on your system:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Windows/Mac"}),": Install ",(0,t.jsx)(n.a,{href:"https://www.docker.com/products/docker-desktop/",children:"Docker Desktop"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Linux"}),": Install Docker Engine using your distribution's package manager or follow the\n",(0,t.jsx)(n.a,{href:"https://docs.docker.com/engine/install/",children:"official installation guide"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"To verify Docker is installed correctly, run:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker --version\n"})}),"\n",(0,t.jsx)(n.h3,{id:"using-jaeger-for-trace-visualization",children:"Using Jaeger for Trace Visualization"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://www.jaegertracing.io/",children:"Jaeger"})," is a popular open-source distributed tracing system that's well-suited for\nvisualizing DAD agent traces."]}),"\n",(0,t.jsx)(n.h4,{id:"running-jaeger-with-docker-compose",children:"Running Jaeger with Docker Compose"}),"\n",(0,t.jsx)(n.p,{children:"DAD includes a pre-configured Docker Compose file for Jaeger:"}),"\n",(0,t.jsx)(n.h5,{id:"jaeger-docker-compose-file",children:"Jaeger Docker Compose File"}),"\n",(0,t.jsxs)(n.p,{children:["Copy this to a file named ",(0,t.jsx)(n.code,{children:"jaeger-docker-compose.yaml"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"services:\n  jaeger:\n    image: jaegertracing/all-in-one:latest\n    ports:\n      - '16686:16686' # Jaeger UI\n      - '14268:14268' # Collector HTTP endpoint\n      - '6831:6831/udp' # Jaeger thrift compact\n    environment:\n      - COLLECTOR_ZIPKIN_HOST_PORT=:9411\n"})}),"\n",(0,t.jsx)(n.p,{children:"You can start Jaeger using one of these methods:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Using VS Code"}),': Open the file in VS Code and click on the "Run service" button in the editor']}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Using command line"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Navigate to the directory containing jaeger-docker-compose.yaml\ncd /path/to/directory\n\n# Start Jaeger using Docker Compose\ndocker-compose -f jaeger-docker-compose.yaml up -d\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This will start Jaeger with the following components:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Jaeger UI on port 16686"}),"\n",(0,t.jsx)(n.li,{children:"Collector HTTP endpoint on port 14268"}),"\n",(0,t.jsx)(n.li,{children:"Jaeger Thrift compact on UDP port 6831"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Then access the Jaeger UI at ",(0,t.jsx)(n.a,{href:"http://localhost:16686",children:"http://localhost:16686"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"You can also launch Jaeger directly from your Python code:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from dhenara.agent.observability.dashboards import run_jaeger_dashboard\n\n# This launches Jaeger in a Docker container and opens the UI in your browser\nrun_jaeger_dashboard()\n"})}),"\n",(0,t.jsx)(n.h4,{id:"sending-traces-to-jaeger",children:"Sending Traces to Jaeger"}),"\n",(0,t.jsx)(n.p,{children:"To send traces to your running Jaeger instance, configure your observability settings:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.observability.types import ObservabilitySettings\nfrom dhenara.agent.observability import configure_observability\n\nsettings = ObservabilitySettings(\n    service_name="my-agent-app",\n    tracing_exporter_type="jaeger",\n    jaeger_endpoint="http://localhost:14268/api/traces",\n)\n\nconfigure_observability(settings)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"using-zipkin-for-trace-visualization",children:"Using Zipkin for Trace Visualization"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://zipkin.io/",children:"Zipkin"})," is another popular open-source distributed tracing system that can be used with DAD."]}),"\n",(0,t.jsx)(n.h4,{id:"running-zipkin-with-docker-compose",children:"Running Zipkin with Docker Compose"}),"\n",(0,t.jsx)(n.p,{children:"DAD includes a pre-configured Docker Compose file for Zipkin:"}),"\n",(0,t.jsx)(n.h5,{id:"zipkin-docker-compose-file",children:"Zipkin Docker Compose File"}),"\n",(0,t.jsxs)(n.p,{children:["Copy this to a file named ",(0,t.jsx)(n.code,{children:"zipkin-docker-compose.yaml"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"services:\n  zipkin:\n    image: openzipkin/zipkin:latest\n    ports:\n      - '9411:9411' # Zipkin UI and API\n    environment:\n      - STORAGE_TYPE=mem # For simplicity, store traces in memory\n"})}),"\n",(0,t.jsx)(n.p,{children:"You can start Zipkin using one of these methods:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Using VS Code"}),': Open the file in VS Code and click on the "Run service" button in the editor']}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Using command line"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Navigate to the directory containing zipkin-docker-compose.yaml\ncd /path/to/directory\n\n# Start Zipkin using Docker Compose\ndocker-compose -f zipkin-docker-compose.yaml up -d\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This will start Zipkin with the UI and API available on port 9411."}),"\n",(0,t.jsxs)(n.p,{children:["You can access the Zipkin UI at ",(0,t.jsx)(n.a,{href:"http://localhost:9411",children:"http://localhost:9411"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"You can also launch Zipkin directly from your Python code:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from dhenara.agent.observability.dashboards import run_zipkin_dashboard\n\n# This launches Zipkin in a Docker container and opens the UI in your browser\nrun_zipkin_dashboard()\n"})}),"\n",(0,t.jsx)(n.h4,{id:"sending-traces-to-zipkin",children:"Sending Traces to Zipkin"}),"\n",(0,t.jsx)(n.p,{children:"To send traces to your running Zipkin instance, configure your observability settings:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.observability.types import ObservabilitySettings\nfrom dhenara.agent.observability import configure_observability\n\nsettings = ObservabilitySettings(\n    service_name="my-agent-app",\n    tracing_exporter_type="zipkin",\n    zipkin_endpoint="http://localhost:9411/api/v2/spans",\n)\n\nconfigure_observability(settings)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"using-the-simple-built-in-dashboard",children:"Using the Simple Built-in Dashboard"}),"\n",(0,t.jsx)(n.p,{children:"For cases where you don't want to use Docker, DAD includes a simple built-in dashboard for viewing trace files:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.observability.dashboards import run_dashboard\n\n# Run the dashboard with a trace file\nrun_dashboard("/path/to/trace.jsonl", port=8080)\n'})}),"\n",(0,t.jsx)(n.p,{children:"This will start a local web server and open a browser window with a simple trace viewer."}),"\n",(0,t.jsx)(n.h2,{id:"core-observability-components",children:"Core Observability Components"}),"\n",(0,t.jsx)(n.h3,{id:"1-tracing-system",children:"1. Tracing System"}),"\n",(0,t.jsx)(n.p,{children:"The tracing system tracks the execution path of components and nodes:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.observability.tracing import setup_tracing, get_tracer, trace_method, trace_node\n\n# Use decorators for automatic tracing\n@trace_method("my_method")\nasync def my_method(self, param1):\n    # Method implementation\n    pass\n\n@trace_node("my_custom_node_type")\nasync def execute_node(self, node_id, execution_context, node_input):\n    # Node execution implementation\n    pass\n'})}),"\n",(0,t.jsx)(n.p,{children:"The tracing system creates hierarchical spans that capture:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Execution path and hierarchies"}),"\n",(0,t.jsx)(n.li,{children:"Timing information"}),"\n",(0,t.jsx)(n.li,{children:"Input and output data"}),"\n",(0,t.jsx)(n.li,{children:"Success/failure status"}),"\n",(0,t.jsx)(n.li,{children:"Error information"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"2-logging-system",children:"2. Logging System"}),"\n",(0,t.jsx)(n.p,{children:"The logging system provides structured logging with context:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.observability import log_with_context\nimport logging\n\n# Log with trace context\nlog_with_context(\n    logger,\n    logging.INFO,\n    "Processing completed successfully",\n    {"items_processed": 42, "processing_time_ms": 1250}\n)\n'})}),"\n",(0,t.jsx)(n.p,{children:"This automatically associates logs with the current execution context and trace."}),"\n",(0,t.jsx)(n.h3,{id:"3-metrics-system",children:"3. Metrics System"}),"\n",(0,t.jsx)(n.p,{children:"The metrics system collects numerical data about execution:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.observability import record_metric\n\n# Record a metric\nrecord_metric(\n    meter_name="dhenara.agent.processing",\n    metric_name="items_processed",\n    value=42,\n    metric_type="counter",\n    attributes={"node_id": "my_processor", "item_type": "document"}\n)\n'})}),"\n",(0,t.jsx)(n.p,{children:"Metrics can be aggregated and analyzed to monitor performance and behavior."}),"\n",(0,t.jsx)(n.h2,{id:"tracing-profiles",children:"Tracing Profiles"}),"\n",(0,t.jsx)(n.p,{children:"Tracing profiles define what data should be captured in traces:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.observability.tracing.data import (\n    NodeTracingProfile,\n    TracingDataField,\n    TracingDataCategory,\n)\n\n# Define a tracing profile for a custom node\nmy_node_profile = NodeTracingProfile(\n    node_type="my_custom_node",\n    input_fields=[\n        TracingDataField(\n            name="query",\n            source_path="query",\n            category=TracingDataCategory.primary,\n            max_length=500,\n            description="The search query",\n        ),\n        # More fields...\n    ],\n    output_fields=[\n        # Output fields...\n    ],\n    result_fields=[\n        # Result fields...\n    ],\n)\n'})}),"\n",(0,t.jsx)(n.p,{children:"Profiles help control what data is captured in traces, balancing detail against volume."}),"\n",(0,t.jsx)(n.h2,{id:"complete-example-running-an-agent-with-tracing-and-visualization",children:"Complete Example: Running an Agent with Tracing and Visualization"}),"\n",(0,t.jsx)(n.p,{children:"Here's a complete example that sets up an agent with tracing enabled and visualization using Jaeger:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from pathlib import Path\nimport logging\n\nfrom dhenara.agent.observability import configure_observability\nfrom dhenara.agent.observability.types import ObservabilitySettings\nfrom dhenara.agent.observability.dashboards import run_jaeger_dashboard\nfrom dhenara.agent.run import RunContext\nfrom dhenara.agent.runner import AgentRunner\n\n# Step 1: Start Jaeger in Docker\nrun_jaeger_dashboard()\n\n# Step 2: Configure observability with Jaeger exporter\nsettings = ObservabilitySettings(\n    service_name="my-agent-example",\n    tracing_exporter_type="jaeger",\n    jaeger_endpoint="http://localhost:14268/api/traces",\n    root_log_level=logging.DEBUG,\n)\n\nconfigure_observability(settings)\n\n# Step 3: Create and run your agent\nagent = create_my_agent()  # Your agent creation function\n\nrun_context = RunContext(\n    root_component_id="my_agent",\n    project_root=Path("."),\n)\nrun_context.setup_run()\n\n# Execute the agent\nrunner = AgentRunner(agent, run_context)\nresult = await runner.run()\n'})}),"\n",(0,t.jsx)(n.p,{children:"With this setup, you can view detailed traces of your agent's execution in the Jaeger UI, helping you understand its\nbehavior, identify bottlenecks, and diagnose issues."}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Hierarchical Context"}),": Ensure proper nesting of traces through the component hierarchy"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Selective Tracing"}),": Be strategic about what data to capture, especially for large inputs/outputs"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Structured Logging"}),": Use log_with_context to maintain correlation with traces"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Meaningful Metrics"}),": Capture metrics that provide insights into performance and behavior"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Regular Analysis"}),": Use the dashboard tools to analyze execution and identify improvements"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Production Settings"}),": Consider disabling detailed tracing in production for performance-critical systems, or using\nsampling strategies"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Cleanup"}),": Remember to stop Docker containers when you're done analyzing traces to free up resources"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"By utilizing DAD's observability features, developers can gain deep insights into their agent systems, diagnose issues\nmore effectively, and optimize performance with the help of powerful visualization tools."})]})}function g(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>o});var r=i(6540);const t={},a=r.createContext(t);function s(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);