"use strict";(self.webpackChunkdhenara_docs=self.webpackChunkdhenara_docs||[]).push([[958],{1050:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"dhenara-agent/concepts/run-system","title":"Run System","description":"Overview","source":"@site/docs/dhenara-agent/concepts/run-system.md","sourceDirName":"dhenara-agent/concepts","slug":"/dhenara-agent/concepts/run-system","permalink":"/dhenara-agent/concepts/run-system","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Run System"},"sidebar":"dhenaraAgentSidebar","previous":{"title":"Observability","permalink":"/dhenara-agent/concepts/observability"},"next":{"title":"Event System","permalink":"/dhenara-agent/concepts/event-system"}}');var o=t(4848),i=t(8453);const s={title:"Run System"},a="Run System",c={},l=[{value:"Overview",id:"overview",level:2},{value:"Core Run System Components",id:"core-run-system-components",level:2},{value:"RunContext",id:"runcontext",level:3},{value:"Setting up the Run Context",id:"setting-up-the-run-context",level:2},{value:"Run Directory Structure",id:"run-directory-structure",level:2},{value:"Artifact Files",id:"artifact-files",level:2},{value:"Run Lifecycle",id:"run-lifecycle",level:2},{value:"Re-runs and Continuations",id:"re-runs-and-continuations",level:2},{value:"Static Inputs",id:"static-inputs",level:2},{value:"Integration with Event System",id:"integration-with-event-system",level:2},{value:"Integration with Runners",id:"integration-with-runners",level:2},{value:"Global Data Directory",id:"global-data-directory",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"run-system",children:"Run System"})}),"\n",(0,o.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsx)(e.p,{children:"The Run System in Dhenara Agent DSL (DAD) is responsible for managing execution contexts, environment setup, and\nartifact handling. It provides a structured approach to executing DAD components while maintaining isolation,\nreproducibility, and observability."}),"\n",(0,o.jsx)(e.h2,{id:"core-run-system-components",children:"Core Run System Components"}),"\n",(0,o.jsx)(e.h3,{id:"runcontext",children:"RunContext"}),"\n",(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.code,{children:"RunContext"})," is the central component of the run system. It manages the execution environment, including:"]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Run directories and IDs"}),"\n",(0,o.jsx)(e.li,{children:"Input and output artifacts"}),"\n",(0,o.jsx)(e.li,{children:"Observability configuration"}),"\n",(0,o.jsx)(e.li,{children:"Resource management"}),"\n",(0,o.jsx)(e.li,{children:"Event handling"}),"\n",(0,o.jsx)(e.li,{children:"Execution hierarchies"}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'from dhenara.agent.run import RunContext\nfrom pathlib import Path\n\n# Create a run context\nrun_context = RunContext(\n    root_component_id="my_agent",  # ID of the root component being executed\n    project_root=Path("/path/to/project"),  # Project root directory\n    run_root=Path("/path/to/project/runs"),  # Where run artifacts are stored\n    observability_settings=my_observability_settings,  # Optional custom settings\n)\n\n# Setup the run (creates directories, initializes observability, etc.)\nrun_context.setup_run(run_id_prefix="test")\n'})}),"\n",(0,o.jsx)(e.h2,{id:"setting-up-the-run-context",children:"Setting up the Run Context"}),"\n",(0,o.jsx)(e.p,{children:"A typical pattern for setting up the Run Context in an agent runner:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'# Select the agent to run, and import its definitions\nfrom src.agents.autocoder.agent import agent\nfrom src.agents.autocoder.handler import node_input_event_handler\nfrom src.runners.defs import project_root\n\n# Assign a root ID to the agent\nroot_component_id = "autocoder_root"\nagent.root_id = root_component_id\n\n# Create run context\nrun_context = RunContext(\n    root_component_id=root_component_id,\n    project_root=project_root,\n    observability_settings=None,  # pass observability_settings to enable tracing\n    run_root_subpath=None,  # "agent_autocoder" Useful when you have multiple agents in the same project\n)\n\n# Register event handlers\nrun_context.register_event_handlers(\n    handlers_map={\n        EventType.node_input_required: node_input_event_handler,\n        # Optional notification events\n        EventType.node_execution_completed: print_node_completion,\n        EventType.component_execution_completed: print_component_completion,\n    }\n)\n\n# Create a runner\nrunner = AgentRunner(agent, run_context)\n'})}),"\n",(0,o.jsx)(e.h2,{id:"run-directory-structure",children:"Run Directory Structure"}),"\n",(0,o.jsx)(e.p,{children:"A typical run directory structure looks like this:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"project_root/\n\u251c\u2500 runs/\n\u2502  \u251c\u2500 run_20231015_123456/  # Individual run directory\n\u2502  \u2502  \u251c\u2500 .trace/           # Observability data\n\u2502  \u2502  \u2502  \u251c\u2500 trace.jsonl\n\u2502  \u2502  \u2502  \u251c\u2500 metrics.jsonl\n\u2502  \u2502  \u2502  \u251c\u2500 logs.jsonl\n\u2502  \u2502  \u2502  \u2514\u2500 dad_metadata.json\n\u2502  \u2502  \u251c\u2500 static_inputs/    # Input data\n\u2502  \u2502  \u251c\u2500 autocoder_root/   # Root component artifacts\n\u2502  \u2502  \u2502  \u2514\u2500 main_flow/     # Flow artifacts\n\u2502  \u2502  \u2502     \u251c\u2500 dynamic_repo_analysis/  # Node artifacts\n\u2502  \u2502  \u2502     \u2502  \u251c\u2500 outcome.json\n\u2502  \u2502  \u2502     \u2502  \u2514\u2500 result.json\n\u2502  \u2502  \u2502     \u251c\u2500 code_generator/\n\u2502  \u2502  \u2502     \u2502  \u251c\u2500 outcome.json\n\u2502  \u2502  \u2502     \u2502  \u251c\u2500 result.json\n\u2502  \u2502  \u2502     \u2502  \u2514\u2500 state.json  # AI model state\n\u2502  \u2502  \u2502     \u2514\u2500 code_generator_file_ops/\n\u2502  \u2502  \u2502        \u251c\u2500 outcome.json\n\u2502  \u2502  \u2502        \u2514\u2500 result.json\n\u2502  \u251c\u2500 global_data/        # Global data directory for context\n\u2502  \u2502  \u2514\u2500 your_project/    # Cloned or copied project for context\n"})}),"\n",(0,o.jsx)(e.p,{children:"The run directory structure mirrors the component hierarchy of your agent, with each component having its own directory\nfor artifacts."}),"\n",(0,o.jsx)(e.h2,{id:"artifact-files",children:"Artifact Files"}),"\n",(0,o.jsx)(e.p,{children:"Each node execution produces several artifact files:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"result.json"}),": The complete result of the node execution, including input, output, and outcome."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"outcome.json"}),": A convenience file that extracts just the outcome field from the result."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"state.json"}),": (For AIModelNode) Contains the actual LLM API call parameters and final prompt."]}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"These artifacts are used for debugging, reproducibility, and enabling re-runs from specific points."}),"\n",(0,o.jsx)(e.h2,{id:"run-lifecycle",children:"Run Lifecycle"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Initialization"}),": Create a ",(0,o.jsx)(e.code,{children:"RunContext"})," with appropriate parameters"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Setup"}),": Call ",(0,o.jsx)(e.code,{children:"setup_run()"})," to create directories and initialize systems"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Execution"}),": Runner uses the context to execute components"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Artifact Management"}),": Results and intermediate data stored in run directory"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Completion"}),": Call ",(0,o.jsx)(e.code,{children:"complete_run()"})," to finalize and record completion status"]}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'try:\n    # Initialize and setup\n    run_context = RunContext(root_component_id="my_agent", project_root=Path("."))\n    run_context.setup_run()\n\n    # Execute\n    runner = AgentRunner(my_agent, run_context)\n    result = await runner.run()\n\n    # Complete successfully\n    run_context.complete_run(status="completed")\n\n    return result\nexcept Exception as e:\n    # Handle failure\n    run_context.complete_run(status="failed", error_msg=str(e))\n    raise\n'})}),"\n",(0,o.jsx)(e.h2,{id:"re-runs-and-continuations",children:"Re-runs and Continuations"}),"\n",(0,o.jsx)(e.p,{children:"DAD supports re-running previous executions or continuing from specific points:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'# Create a run context for a re-run\nrun_context = RunContext(\n    root_component_id="my_agent",\n    project_root=Path("."),\n    previous_run_id="run_20231015_123456",  # ID of the previous run\n    start_hierarchy_path="agent.flow1.node3"  # Continue from this node\n)\n\n# Setup the run with re-run parameters\nrun_context.setup_run()\n'})}),"\n",(0,o.jsx)(e.p,{children:"You can also use the command line to perform a re-run:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"dad agent run autocoder --previous-run-id run_20231015_123456 --entry-point autocoder_root.main_flow.code_generator\n"})}),"\n",(0,o.jsx)(e.p,{children:"This enables debugging, experimentation, and incremental development of agent workflows."}),"\n",(0,o.jsx)(e.h2,{id:"static-inputs",children:"Static Inputs"}),"\n",(0,o.jsx)(e.p,{children:"DAD supports providing static inputs to nodes:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'# Register static input for a specific node\nrun_context.register_node_static_input(\n    "my_node_id",\n    MyNodeInput(param1="value1", param2="value2")\n)\n\n# Or load static inputs from JSON\nrun_context.read_static_inputs()  # Reads from static_inputs.json\n'})}),"\n",(0,o.jsx)(e.h2,{id:"integration-with-event-system",children:"Integration with Event System"}),"\n",(0,o.jsx)(e.p,{children:"The Run Context integrates with the event system to handle events during execution:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'# Register event handlers\nrun_context.register_event_handlers(\n    handlers_map={\n        EventType.node_input_required: node_input_event_handler,\n        EventType.node_execution_completed: print_node_completion,\n    }\n)\n\n# Define a handler for node input events\nasync def node_input_event_handler(event: NodeInputRequiredEvent):\n    if event.node_type == FlowNodeTypeEnum.ai_model_call:\n        node_input = await get_ai_model_node_input(\n            node_def_settings=event.node_def_settings,\n        )\n        # Get dynamic input from user\n        task_description = await async_input("Enter your query: ")\n        node_input.prompt_variables = {"task_description": task_description}\n\n        event.input = node_input\n        event.handled = True\n'})}),"\n",(0,o.jsx)(e.p,{children:"This integration allows for dynamic, interactive agent behaviors."}),"\n",(0,o.jsx)(e.h2,{id:"integration-with-runners",children:"Integration with Runners"}),"\n",(0,o.jsx)(e.p,{children:"Runners are responsible for actually executing components using the run context:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"from dhenara.agent.runner import FlowRunner, AgentRunner\n\n# Create an agent runner\nrunner = AgentRunner(my_agent, run_context)\n\n# Execute the agent\nresult = await runner.run()\n\n# Or create a flow runner for a specific flow\nflow_runner = FlowRunner(my_flow, run_context)\nflow_result = await flow_runner.run()\n"})}),"\n",(0,o.jsx)(e.p,{children:"Different types of runners (FlowRunner, AgentRunner) handle the execution of different component types."}),"\n",(0,o.jsx)(e.h2,{id:"global-data-directory",children:"Global Data Directory"}),"\n",(0,o.jsx)(e.p,{children:"A common pattern is to use a global data directory for providing context to LLMs:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'# Define the global data directory in your flow\nglobal_data_directory = "$var{run_root}/global_data"\n\n# Use it in a FolderAnalyzerNode\nimplementation_flow.node(\n    "dynamic_repo_analysis",\n    FolderAnalyzerNode(\n        settings=FolderAnalyzerSettings(\n            base_directory=global_data_directory,\n            operations=[...],\n        ),\n    ),\n)\n\n# Use it in a FileOperationNode\nimplementation_flow.node(\n    "code_generator_file_ops",\n    FileOperationNode(\n        settings=FileOperationNodeSettings(\n            base_directory=global_data_directory,\n            operations_template=ObjectTemplate(\n                expression="$expr{$hier{code_generator}.outcome.structured.file_operations}",\n            ),\n            stage=True,\n        ),\n    ),\n)\n'})}),"\n",(0,o.jsx)(e.p,{children:"This pattern allows you to analyze and modify files in a consistent location across runs."}),"\n",(0,o.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Organized Run Directories"}),": Keep clean run directories by properly managing artifacts"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Error Handling"}),": Implement proper error handling and always call ",(0,o.jsx)(e.code,{children:"complete_run()"})]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Resource Cleanup"}),": Ensure resources are properly cleaned up after execution"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Run ID Prefixes"}),": Use meaningful run ID prefixes for easier identification"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Environment Configuration"}),": Configure runs appropriately for different environments (dev, staging, prod)"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Artifact Analysis"}),": Regularly review run artifacts to debug and improve your flows"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Leverage Re-runs"}),": Use the re-run capability for iterative development and debugging"]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,o.jsx)(e.p,{children:"The Run System in DAD provides a robust infrastructure for managing the execution of agent components. By leveraging the\nrun system effectively, you can ensure isolation, reproducibility, and observability in your agent workflows. The\nintegrated event handling and artifact management capabilities make it particularly well-suited for developing complex,\ninteractive agent workflows."})]})}function u(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>a});var r=t(6540);const o={},i=r.createContext(o);function s(n){const e=r.useContext(i);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:s(n.components),r.createElement(i.Provider,{value:e},n.children)}}}]);