"use strict";(self.webpackChunkdhenara_docs=self.webpackChunkdhenara_docs||[]).push([[8270],{3678:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>g,frontMatter:()=>s,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"dhenara-agent/concepts/components/agents","title":"Agents","description":"Overview","source":"@site/docs/dhenara-agent/concepts/components/agents.md","sourceDirName":"dhenara-agent/concepts/components","slug":"/dhenara-agent/concepts/components/agents","permalink":"/dhenara-agent/concepts/components/agents","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Agents"},"sidebar":"dhenaraAgentSidebar","previous":{"title":"Flows","permalink":"/dhenara-agent/concepts/components/flows"},"next":{"title":"Custom Components","permalink":"/dhenara-agent/concepts/components/custom-components"}}');var i=t(4848),o=t(8453);const s={title:"Agents"},c="Agents",r={},l=[{value:"Overview",id:"overview",level:2},{value:"Core Concepts",id:"core-concepts",level:2},{value:"Creating Agents",id:"creating-agents",level:2},{value:"Adding Flows to Agents",id:"adding-flows-to-agents",level:2},{value:"Agent Execution Patterns",id:"agent-execution-patterns",level:2},{value:"Sequential Execution",id:"sequential-execution",level:3},{value:"Conditional Execution",id:"conditional-execution",level:3},{value:"Loop Execution",id:"loop-execution",level:3},{value:"Working with Subagents",id:"working-with-subagents",level:2},{value:"Accessing Agent Results",id:"accessing-agent-results",level:2},{value:"Agent Execution Context",id:"agent-execution-context",level:2},{value:"Common Agent Patterns",id:"common-agent-patterns",level:2},{value:"Multi-Stage Processing Agent",id:"multi-stage-processing-agent",level:3},{value:"Collaborative Agent System",id:"collaborative-agent-system",level:3},{value:"Adaptive Decision-Making Agent",id:"adaptive-decision-making-agent",level:3},{value:"Best Practices",id:"best-practices",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"agents",children:"Agents"})}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"Agents are the top-level components in Dhenara Agent DSL (DAD). They coordinate multiple flows and subagents to\nimplement complex behaviors and solve sophisticated problems. Agents act as the primary entry points for executing\nAI-powered workflows, offering a high-level abstraction for organizing and managing flows."}),"\n",(0,i.jsx)(n.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,i.jsx)(n.p,{children:"Agents in DAD are built around these key concepts:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Coordination"}),": Agents coordinate multiple flows and subagents"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Composition"}),": Agents can contain other agents (subagents) for complex behaviors"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Orchestration"}),": Agents define the execution order and conditions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reusability"}),": Agents can be composed and reused in different contexts"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Hierarchy"}),": Agents form the top level of the DAD component hierarchy"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"creating-agents",children:"Creating Agents"}),"\n",(0,i.jsxs)(n.p,{children:["Agents are created using the ",(0,i.jsx)(n.code,{children:"AgentDefinition"})," class:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.dsl import AgentDefinition\n\n# Create an agent definition\nmy_agent = AgentDefinition(root_id="my_agent")\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The optional ",(0,i.jsx)(n.code,{children:"root_id"})," parameter sets a unique identifier for the agent, which is useful when referencing the agent from\nother components."]}),"\n",(0,i.jsx)(n.h2,{id:"adding-flows-to-agents",children:"Adding Flows to Agents"}),"\n",(0,i.jsxs)(n.p,{children:["Flows are added to agents using the ",(0,i.jsx)(n.code,{children:"flow"})," method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Create flows\nanalysis_flow = FlowDefinition()\n# Define analysis flow nodes...\n\nprocess_flow = FlowDefinition()\n# Define process flow nodes...\n\nexport_flow = FlowDefinition()\n# Define export flow nodes...\n\n# Add flows to the agent\nmy_agent.flow("analyze", analysis_flow)\nmy_agent.flow("process", process_flow)\nmy_agent.flow("export", export_flow)\n'})}),"\n",(0,i.jsx)(n.p,{children:"Each flow is assigned a unique ID within the agent, which can be used to reference the flow from other parts of the\nagent."}),"\n",(0,i.jsx)(n.h2,{id:"agent-execution-patterns",children:"Agent Execution Patterns"}),"\n",(0,i.jsx)(n.p,{children:"DAD supports several execution patterns for agents:"}),"\n",(0,i.jsx)(n.h3,{id:"sequential-execution",children:"Sequential Execution"}),"\n",(0,i.jsx)(n.p,{children:"By default, flows in an agent are executed sequentially:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Define sequential execution of flows\nmy_agent.sequence(["analyze", "process", "export"])\n'})}),"\n",(0,i.jsx)(n.p,{children:"This ensures that flows are executed in the specified order, with each flow starting after the previous one completes."}),"\n",(0,i.jsx)(n.h3,{id:"conditional-execution",children:"Conditional Execution"}),"\n",(0,i.jsx)(n.p,{children:"Conditional execution allows for different execution paths based on conditions:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Create agent branches\ntrue_branch_agent = AgentDefinition()\ntrue_branch_agent.flow("deep_process", deep_process_flow)\n\nfalse_branch_agent = AgentDefinition()\nfalse_branch_agent.flow("light_process", light_process_flow)\n\n# Add conditional to the main agent\nmain_agent = AgentDefinition()\nmain_agent.flow("analyze", analysis_flow)\nmain_agent.conditional(\n    "complexity_check",\n    statement=ObjectTemplate(expression="$hier{analyze.complexity_detector}.outcome.structured.is_complex"),\n    true_branch=true_branch_agent,\n    false_branch=false_branch_agent\n)\nmain_agent.flow("export", export_flow)\n'})}),"\n",(0,i.jsx)(n.p,{children:"The condition is evaluated using the template engine, which can access results from previous flows and nodes."}),"\n",(0,i.jsx)(n.h3,{id:"loop-execution",children:"Loop Execution"}),"\n",(0,i.jsx)(n.p,{children:"Loops allow for iterative processing over collections of items:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Create a loop body agent\nloop_body_agent = AgentDefinition()\nloop_body_agent.flow("process_item", process_item_flow)\n\n# Add loop to the main agent\nmain_agent = AgentDefinition()\nmain_agent.flow("data_collection", collection_flow)\nmain_agent.for_each(\n    "item_processor",\n    statement=ObjectTemplate(expression="$hier{data_collection.collector}.outcome.structured.items"),\n    body=loop_body_agent,\n    max_iterations=50\n)\nmain_agent.flow("aggregation", aggregation_flow)\n'})}),"\n",(0,i.jsx)(n.p,{children:"The loop iterates over each item in the collection, executing the loop body agent for each item."}),"\n",(0,i.jsx)(n.h2,{id:"working-with-subagents",children:"Working with Subagents"}),"\n",(0,i.jsx)(n.p,{children:"Agents can include other agents as subagents, enabling complex hierarchical designs:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Create subagents\ndata_collection_agent = AgentDefinition()\n# Define data collection flows...\n\ndata_processing_agent = AgentDefinition()\n# Define data processing flows...\n\ndata_analysis_agent = AgentDefinition()\n# Define data analysis flows...\n\n# Create a parent agent with subagents\nmain_agent = AgentDefinition()\nmain_agent.subagent("collector", data_collection_agent)\nmain_agent.subagent("processor", data_processing_agent)\nmain_agent.subagent("analyzer", data_analysis_agent)\nmain_agent.flow("coordination", coordination_flow)\n'})}),"\n",(0,i.jsx)(n.p,{children:"Subagents are executed as part of the parent agent, and their results are accessible using hierarchical references."}),"\n",(0,i.jsx)(n.h2,{id:"accessing-agent-results",children:"Accessing Agent Results"}),"\n",(0,i.jsx)(n.p,{children:"Results from flows and nodes within an agent can be accessed using hierarchical references:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Access a node result from a flow in the same agent\n"$hier{flow_id.node_id}.outcome.text"\n\n# Access a node result from a specific subagent\n"$hier{subagent_id.flow_id.node_id}.outcome.structured.property"\n'})}),"\n",(0,i.jsx)(n.p,{children:"These references can be used in templates to dynamically generate content based on previous results."}),"\n",(0,i.jsx)(n.h2,{id:"agent-execution-context",children:"Agent Execution Context"}),"\n",(0,i.jsxs)(n.p,{children:["When an agent is executed, it creates an ",(0,i.jsx)(n.code,{children:"AgentExecutionContext"})," that manages the agent's state and results:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Execute an agent with a specific context\nresult = await agent.execute(\n    execution_context=AgentExecutionContext(\n        component_id="my_agent",\n        component_definition=agent,\n        run_context=run_context\n    )\n)\n'})}),"\n",(0,i.jsx)(n.p,{children:"The execution context keeps track of all flow and node results and provides access to them throughout execution."}),"\n",(0,i.jsx)(n.h2,{id:"common-agent-patterns",children:"Common Agent Patterns"}),"\n",(0,i.jsx)(n.h3,{id:"multi-stage-processing-agent",children:"Multi-Stage Processing Agent"}),"\n",(0,i.jsx)(n.p,{children:"A common pattern is to create an agent that processes data in distinct stages:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Create a multi-stage processing agent\nprocessing_agent = AgentDefinition()\nprocessing_agent.flow("data_collection", collection_flow)\nprocessing_agent.flow("data_cleaning", cleaning_flow)\nprocessing_agent.flow("data_analysis", analysis_flow)\nprocessing_agent.flow("report_generation", report_flow)\nprocessing_agent.sequence(["data_collection", "data_cleaning", "data_analysis", "report_generation"])\n'})}),"\n",(0,i.jsx)(n.h3,{id:"collaborative-agent-system",children:"Collaborative Agent System"}),"\n",(0,i.jsx)(n.p,{children:"Another pattern is creating agents that collaborate on complex tasks:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Create specialized agents\nplanner_agent = AgentDefinition()\n# Define planning flows...\n\nexecutor_agent = AgentDefinition()\n# Define execution flows...\n\nverifier_agent = AgentDefinition()\n# Define verification flows...\n\n# Create a coordinating agent\ncoordinator_agent = AgentDefinition()\ncoordinator_agent.subagent("planner", planner_agent)\ncoordinator_agent.subagent("executor", executor_agent)\ncoordinator_agent.subagent("verifier", verifier_agent)\ncoordinator_agent.flow("coordination", coordination_flow)\n'})}),"\n",(0,i.jsx)(n.p,{children:"This pattern enables delegation of specialized tasks to appropriate subagents."}),"\n",(0,i.jsx)(n.h3,{id:"adaptive-decision-making-agent",children:"Adaptive Decision-Making Agent"}),"\n",(0,i.jsx)(n.p,{children:"Adaptive agents can change their behavior based on analysis results:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Create an adaptive agent\nadaptive_agent = AgentDefinition()\nadaptive_agent.flow("initial_analysis", analysis_flow)\n\n# Define behavior branches\nsimple_case_agent = AgentDefinition().flow("simple_process", simple_flow)\ncomplex_case_agent = AgentDefinition().flow("complex_process", complex_flow)\nextreme_case_agent = AgentDefinition().flow("extreme_process", extreme_flow)\n\n# Add conditional for first decision\nadaptive_agent.conditional(\n    "complexity_check",\n    statement=ObjectTemplate(expression="$hier{initial_analysis.analyzer}.outcome.structured.complexity > 0.7"),\n    true_branch=complex_branch_agent,\n    false_branch=simple_branch_agent\n)\n\n# Complex branch agent has its own conditional\ncomplex_branch_agent = AgentDefinition()\ncomplex_branch_agent.conditional(\n    "extreme_check",\n    statement=ObjectTemplate(expression="$hier{initial_analysis.analyzer}.outcome.structured.complexity > 0.9"),\n    true_branch=extreme_case_agent,\n    false_branch=complex_case_agent\n)\n'})}),"\n",(0,i.jsx)(n.p,{children:"This pattern enables sophisticated decision trees for processing."}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Logical Decomposition"}),": Break complex tasks into logical agent components"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Clear Responsibility"}),": Each agent should have a clear, focused responsibility"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Appropriate Granularity"}),": Choose the right level of granularity for agents"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Explicit Coordination"}),": Make coordination between agents explicit"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reuse Common Patterns"}),": Identify and reuse common agent patterns"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"By following these practices, you can create sophisticated agent systems that effectively solve complex problems while\nmaintaining clarity and maintainability."})]})}function g(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var a=t(6540);const i={},o=a.createContext(i);function s(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);