"use strict";(self.webpackChunkdhenara_docs=self.webpackChunkdhenara_docs||[]).push([[2861],{6642:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"dhenara-agent/concepts/components/nodes","title":"Nodes","description":"Overview","source":"@site/docs/dhenara-agent/concepts/components/nodes.md","sourceDirName":"dhenara-agent/concepts/components","slug":"/dhenara-agent/concepts/components/nodes","permalink":"/dhenara-agent/concepts/components/nodes","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Nodes"},"sidebar":"dhenaraAgentSidebar","previous":{"title":"Core Concepts","permalink":"/dhenara-agent/concepts/core-concepts"},"next":{"title":"Flows","permalink":"/dhenara-agent/concepts/components/flows"}}');var s=t(4848),i=t(8453);const r={title:"Nodes"},d="Nodes",a={},l=[{value:"Overview",id:"overview",level:2},{value:"Core Concepts",id:"core-concepts",level:2},{value:"Built-in Node Types",id:"built-in-node-types",level:2},{value:"AIModelNode",id:"aimodelnode",level:3},{value:"FileOperationNode",id:"fileoperationnode",level:3},{value:"FolderAnalyzerNode",id:"folderanalyzernode",level:3},{value:"CommandNode",id:"commandnode",level:3},{value:"Node Input and Output",id:"node-input-and-output",level:2},{value:"Node Input",id:"node-input",level:3},{value:"Node Output",id:"node-output",level:3},{value:"Working with Events",id:"working-with-events",level:2},{value:"Extending the Node System",id:"extending-the-node-system",level:2},{value:"Best Practices",id:"best-practices",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"nodes",children:"Nodes"})}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"Nodes are the atomic execution units in Dhenara Agent DSL (DAD). Each node performs a specific function, such as making\nan AI model call, analyzing a folder, or performing file operations. Nodes form the fundamental building blocks of flows\nand agents, enabling complex behavior through composition."}),"\n",(0,s.jsx)(n.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,s.jsx)(n.p,{children:"Nodes in DAD follow these key principles:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Single Responsibility"}),": Each node focuses on a specific function"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Typed Input/Output"}),": Nodes have well-defined input and output types"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Configuration"}),": Nodes are configured through settings classes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Event-Driven"}),": Nodes can emit and respond to events"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Extensible"}),": The node system can be extended with custom node types"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"built-in-node-types",children:"Built-in Node Types"}),"\n",(0,s.jsx)(n.p,{children:"DAD includes several built-in node types for common operations:"}),"\n",(0,s.jsx)(n.h3,{id:"aimodelnode",children:"AIModelNode"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"AIModelNode"})," makes calls to AI models (like GPT-4, Claude) to process prompts and generate responses."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.dsl import AIModelNode, AIModelNodeSettings\nfrom dhenara.ai.types import AIModelCallConfig, Prompt\n\nai_node = AIModelNode(\n    pre_events=[EventType.node_input_required],  # Enables dynamic input handling\n    settings=AIModelNodeSettings(\n        models=["claude-3-7-sonnet", "o4-mini", "gemini-2.0-flash"],  # Multiple model options\n        system_instructions=["You are a helpful assistant."],\n        prompt=Prompt.with_dad_text("Generate ideas for: $var{topic}"),  # Template variable\n        model_call_config=AIModelCallConfig(\n            max_output_tokens=8000,\n            structured_output=TaskImplementation,  # Type for structured output\n            reasoning=True,\n            max_reasoning_tokens=4000,\n            options={"temperature": 0.7}\n        )\n    ),\n)\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Key Features"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Configure multiple AI models via ",(0,s.jsx)(n.code,{children:"models"})," parameter"]}),"\n",(0,s.jsx)(n.li,{children:"Set system instructions and prompts with template variables"}),"\n",(0,s.jsx)(n.li,{children:"Control model parameters like temperature and max tokens"}),"\n",(0,s.jsx)(n.li,{children:"Request structured outputs using Pydantic models"}),"\n",(0,s.jsx)(n.li,{children:"Handle dynamic inputs through event system"}),"\n",(0,s.jsxs)(n.li,{children:["Access reasoning process with the ",(0,s.jsx)(n.code,{children:"reasoning"})," parameter"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"fileoperationnode",children:"FileOperationNode"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"FileOperationNode"})," performs file system operations like creating, editing, deleting, and moving files."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.dsl import FileOperationNode, FileOperationNodeSettings\nfrom dhenara.ai.types import ObjectTemplate\n\nfile_node = FileOperationNode(\n    settings=FileOperationNodeSettings(\n        base_directory="$var{run_root}/global_data",  # Base directory for operations\n        operations_template=ObjectTemplate(\n            expression="$expr{$hier{code_generator}.outcome.structured.file_operations}"\n        ),  # Hierarchical reference to previous node output\n        stage=True,\n        commit=True,\n        commit_message="$var{run_id}: Auto generated.",  # Template variable for commit message\n    ),\n)\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Key Features"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Perform multiple file operations in a single node"}),"\n",(0,s.jsx)(n.li,{children:"Dynamic operations through templates and hierarchical references"}),"\n",(0,s.jsx)(n.li,{children:"Git integration for staging and committing changes"}),"\n",(0,s.jsx)(n.li,{children:"Support for various operation types (create, edit, delete, move)"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"folderanalyzernode",children:"FolderAnalyzerNode"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"FolderAnalyzerNode"})," analyzes directory structures and file contents to provide context for other nodes."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.dsl import FolderAnalyzerNode, FolderAnalyzerSettings\nfrom dhenara.agent.dsl.inbuilt.flow_nodes.defs.types import FolderAnalysisOperation\nfrom dhenara.ai.types import ObjectTemplate\n\nanalyzer_node = FolderAnalyzerNode(\n    pre_events=[EventType.node_input_required],  # Enable dynamic input handling\n    settings=FolderAnalyzerSettings(\n        base_directory="$var{run_root}/global_data",\n        operations_template=ObjectTemplate(expression="$expr{task_spec.required_context}"),  # Component variable reference\n        # Alternatively, explicit operations:\n        # operations=[\n        #     FolderAnalysisOperation(\n        #         operation_type="analyze_folder",\n        #         path="dhenara_docs/docs",\n        #         content_read_mode="none",\n        #     )\n        # ]\n    ),\n)\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Key Features"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Analyze directory structures and file contents"}),"\n",(0,s.jsx)(n.li,{children:"Filter files by patterns (include/exclude)"}),"\n",(0,s.jsx)(n.li,{children:"Control recursion and content extraction"}),"\n",(0,s.jsx)(n.li,{children:"Support for dynamic operations through templates or event-based input"}),"\n",(0,s.jsx)(n.li,{children:"Generate structured representations of repositories"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"commandnode",children:"CommandNode"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"CommandNode"})," executes shell commands and captures outputs."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from dhenara.agent.dsl import CommandNode, CommandNodeSettings\n\ncommand_node = CommandNode(\n    settings=CommandNodeSettings(\n        command=["git", "status"],\n        working_directory="/path/to/project",\n        timeout=30,\n    ),\n)\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Key Features"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Execute shell commands with arguments"}),"\n",(0,s.jsx)(n.li,{children:"Control execution environment (working directory, environment variables)"}),"\n",(0,s.jsx)(n.li,{children:"Set timeouts for command execution"}),"\n",(0,s.jsx)(n.li,{children:"Capture command output and exit code"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"node-input-and-output",children:"Node Input and Output"}),"\n",(0,s.jsx)(n.p,{children:"Nodes use typed inputs and outputs to ensure type safety and clear interfaces:"}),"\n",(0,s.jsx)(n.h3,{id:"node-input",children:"Node Input"}),"\n",(0,s.jsxs)(n.p,{children:["Each node type has a specific input class derived from ",(0,s.jsx)(n.code,{children:"NodeInput"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from dhenara.agent.dsl.base import NodeInput\nfrom pydantic import Field\n\nclass AIModelNodeInput(NodeInput):\n    prompt_variables: dict[str, Any] = Field(default_factory=dict)\n    instruction_variables: dict[str, Any] = Field(default_factory=dict)\n    settings_override: AIModelNodeSettings | None = None\n    resources_override: list[ResourceConfigItem] | None = None\n"})}),"\n",(0,s.jsx)(n.p,{children:"Inputs can be provided through several mechanisms:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Event Handlers"}),": Respond to ",(0,s.jsx)(n.code,{children:"node_input_required"})," events"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'async def node_input_event_handler(event: NodeInputRequiredEvent):\n    if event.node_type == FlowNodeTypeEnum.ai_model_call:\n        if event.node_id == "code_generator":\n            node_input = await get_ai_model_node_input(\n                node_def_settings=event.node_def_settings,\n            )\n            task_description = await async_input("Enter your query: ")\n            node_input.prompt_variables = {"task_description": task_description}\n\n            event.input = node_input\n            event.handled = True\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Hierarchical References"}),": Pass data from previous nodes using the template system"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'Prompt.with_dad_text("$expr{$hier{previous_node}.outcome.text}")\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Component Variables"}),": Use flow-level variables"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'Prompt.with_dad_text("$expr{task_spec.description}")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"node-output",children:"Node Output"}),"\n",(0,s.jsxs)(n.p,{children:["Node execution produces a ",(0,s.jsx)(n.code,{children:"NodeOutput"})," containing the results, which is accessible via hierarchical references:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Access a node\'s outcome in a template\nObjectTemplate(expression="$expr{$hier{code_generator}.outcome.structured.file_operations}")\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The standardized ",(0,s.jsx)(n.code,{children:"NodeOutcome"})," format makes it easy to access results consistently across different node types:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class NodeOutcome:\n    text: str | None       # Text output\n    structured: dict | None  # Structured data output\n    files: list[File] | None  # File outputs\n"})}),"\n",(0,s.jsx)(n.h2,{id:"working-with-events",children:"Working with Events"}),"\n",(0,s.jsx)(n.p,{children:"Nodes can trigger and respond to events, enabling dynamic behavior:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Node that triggers input event\nAIModelNode(\n    pre_events=[EventType.node_input_required],  # Will trigger this event before execution\n    settings=AIModelNodeSettings(...)\n)\n\n# Handler for the event\nasync def node_input_event_handler(event: NodeInputRequiredEvent):\n    if event.node_id == "code_generator":\n        # Provide dynamic input\n        node_input = await get_ai_model_node_input(...)\n        task_description = await async_input("Enter your query: ")\n        node_input.prompt_variables = {"task_description": task_description}\n\n        event.input = node_input\n        event.handled = True  # Mark as handled\n\n# Register the handler\nrun_context.register_event_handlers({\n    EventType.node_input_required: node_input_event_handler\n})\n'})}),"\n",(0,s.jsx)(n.h2,{id:"extending-the-node-system",children:"Extending the Node System"}),"\n",(0,s.jsxs)(n.p,{children:["You can create custom node types by extending ",(0,s.jsx)(n.code,{children:"NodeDefinition"})," and implementing the required interfaces. See the\n",(0,s.jsx)(n.a,{href:"/dhenara-agent/concepts/components/custom-components",children:"Custom Components"})," section for details."]}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Keep Nodes Focused"}),": Each node should have a single responsibility"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use Typed Inputs/Outputs"}),": Leverage Pydantic models for type safety"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use Hierarchical References"}),": Reference previous node outputs using ",(0,s.jsx)(n.code,{children:"$hier{}"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Leverage Events"}),": Use events for dynamic configuration and interaction"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use Component Variables"}),": For shared configuration in flows"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Document Node Behavior"}),": Clearly document what each node does and expects"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Handle Errors"}),": Implement proper error handling in node executors"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"By following these practices, you can create reusable, maintainable nodes that work consistently in different contexts."})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>d});var o=t(6540);const s={},i=o.createContext(s);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);